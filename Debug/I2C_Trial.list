
I2C_Trial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa18  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001af  0800ac4c  0800ac4c  0001ac4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800adfc  0800adfc  0001adfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ae04  0800ae04  0001ae04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ae08  0800ae08  0001ae08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800ae0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000924  20000070  0800ae7c  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000994  0800ae7c  00020994  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   000209bb  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000039ca  00000000  00000000  00040a61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000018d0  00000000  00000000  00044430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001758  00000000  00000000  00045d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003905e  00000000  00000000  00047458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000213c1  00000000  00000000  000804b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015da34  00000000  00000000  000a1877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  001ff2ab  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000072a0  00000000  00000000  001ff2fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	20000070 	.word	0x20000070
 8000250:	00000000 	.word	0x00000000
 8000254:	0800ac34 	.word	0x0800ac34

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000074 	.word	0x20000074
 8000270:	0800ac34 	.word	0x0800ac34

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b982 	b.w	8000590 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002aa:	4604      	mov	r4, r0
 80002ac:	460f      	mov	r7, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d148      	bne.n	8000344 <__udivmoddi4+0xa0>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d961      	bls.n	800037c <__udivmoddi4+0xd8>
 80002b8:	fab2 f382 	clz	r3, r2
 80002bc:	b143      	cbz	r3, 80002d0 <__udivmoddi4+0x2c>
 80002be:	f1c3 0120 	rsb	r1, r3, #32
 80002c2:	409f      	lsls	r7, r3
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	409c      	lsls	r4, r3
 80002ca:	fa20 f101 	lsr.w	r1, r0, r1
 80002ce:	430f      	orrs	r7, r1
 80002d0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d4:	fa1f fe8c 	uxth.w	lr, ip
 80002d8:	0c22      	lsrs	r2, r4, #16
 80002da:	fbb7 f6f1 	udiv	r6, r7, r1
 80002de:	fb01 7716 	mls	r7, r1, r6, r7
 80002e2:	fb06 f00e 	mul.w	r0, r6, lr
 80002e6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ea:	4290      	cmp	r0, r2
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x5c>
 80002ee:	eb1c 0202 	adds.w	r2, ip, r2
 80002f2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x5a>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f200 8137 	bhi.w	800056c <__udivmoddi4+0x2c8>
 80002fe:	463e      	mov	r6, r7
 8000300:	1a12      	subs	r2, r2, r0
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb2 f0f1 	udiv	r0, r2, r1
 8000308:	fb01 2210 	mls	r2, r1, r0, r2
 800030c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000314:	45a6      	cmp	lr, r4
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x86>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x84>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f200 811c 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 8000328:	4610      	mov	r0, r2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	eba4 040e 	sub.w	r4, r4, lr
 8000332:	2600      	movs	r6, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0x9a>
 8000336:	40dc      	lsrs	r4, r3
 8000338:	2300      	movs	r3, #0
 800033a:	e9c5 4300 	strd	r4, r3, [r5]
 800033e:	4631      	mov	r1, r6
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000344:	428b      	cmp	r3, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0xb8>
 8000348:	2d00      	cmp	r5, #0
 800034a:	f000 80fd 	beq.w	8000548 <__udivmoddi4+0x2a4>
 800034e:	2600      	movs	r6, #0
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	4630      	mov	r0, r6
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f683 	clz	r6, r3
 8000360:	2e00      	cmp	r6, #0
 8000362:	d14b      	bne.n	80003fc <__udivmoddi4+0x158>
 8000364:	428b      	cmp	r3, r1
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2aa>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2aa>
 8000370:	4630      	mov	r0, r6
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e3      	beq.n	800033e <__udivmoddi4+0x9a>
 8000376:	e9c5 4700 	strd	r4, r7, [r5]
 800037a:	e7e0      	b.n	800033e <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xdc>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809d 	bne.w	80004c4 <__udivmoddi4+0x220>
 800038a:	1a89      	subs	r1, r1, r2
 800038c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000390:	b297      	uxth	r7, r2
 8000392:	2601      	movs	r6, #1
 8000394:	0c20      	lsrs	r0, r4, #16
 8000396:	fbb1 f2fe 	udiv	r2, r1, lr
 800039a:	fb0e 1112 	mls	r1, lr, r2, r1
 800039e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a2:	fb07 f002 	mul.w	r0, r7, r2
 80003a6:	4288      	cmp	r0, r1
 80003a8:	d90f      	bls.n	80003ca <__udivmoddi4+0x126>
 80003aa:	eb1c 0101 	adds.w	r1, ip, r1
 80003ae:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b2:	bf2c      	ite	cs
 80003b4:	f04f 0901 	movcs.w	r9, #1
 80003b8:	f04f 0900 	movcc.w	r9, #0
 80003bc:	4288      	cmp	r0, r1
 80003be:	d903      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003c0:	f1b9 0f00 	cmp.w	r9, #0
 80003c4:	f000 80cf 	beq.w	8000566 <__udivmoddi4+0x2c2>
 80003c8:	4642      	mov	r2, r8
 80003ca:	1a09      	subs	r1, r1, r0
 80003cc:	b2a4      	uxth	r4, r4
 80003ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003de:	42a7      	cmp	r7, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x150>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x14e>
 80003ec:	42a7      	cmp	r7, r4
 80003ee:	f200 80b4 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003f2:	4608      	mov	r0, r1
 80003f4:	1be4      	subs	r4, r4, r7
 80003f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fa:	e79b      	b.n	8000334 <__udivmoddi4+0x90>
 80003fc:	f1c6 0720 	rsb	r7, r6, #32
 8000400:	40b3      	lsls	r3, r6
 8000402:	fa01 f406 	lsl.w	r4, r1, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	40f9      	lsrs	r1, r7
 800040c:	40b2      	lsls	r2, r6
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f307 	lsr.w	r3, r0, r7
 8000416:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041a:	431c      	orrs	r4, r3
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	fb09 1118 	mls	r1, r9, r8, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb08 f00e 	mul.w	r0, r8, lr
 8000436:	4288      	cmp	r0, r1
 8000438:	d90f      	bls.n	800045a <__udivmoddi4+0x1b6>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	4288      	cmp	r0, r1
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b4>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ce>
 8000458:	46d0      	mov	r8, sl
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	b2a4      	uxth	r4, r4
 800045e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000462:	fb09 1110 	mls	r1, r9, r0, r1
 8000466:	fb00 fe0e 	mul.w	lr, r0, lr
 800046a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1de>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d201      	bcs.n	8000480 <__udivmoddi4+0x1dc>
 800047c:	458e      	cmp	lr, r1
 800047e:	d87f      	bhi.n	8000580 <__udivmoddi4+0x2dc>
 8000480:	4620      	mov	r0, r4
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	eba1 010e 	sub.w	r1, r1, lr
 800048a:	fba0 9802 	umull	r9, r8, r0, r2
 800048e:	4541      	cmp	r1, r8
 8000490:	464c      	mov	r4, r9
 8000492:	46c6      	mov	lr, r8
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0x1f8>
 8000496:	d106      	bne.n	80004a6 <__udivmoddi4+0x202>
 8000498:	454b      	cmp	r3, r9
 800049a:	d204      	bcs.n	80004a6 <__udivmoddi4+0x202>
 800049c:	3801      	subs	r0, #1
 800049e:	ebb9 0402 	subs.w	r4, r9, r2
 80004a2:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d070      	beq.n	800058c <__udivmoddi4+0x2e8>
 80004aa:	1b1a      	subs	r2, r3, r4
 80004ac:	eb61 010e 	sbc.w	r1, r1, lr
 80004b0:	fa22 f306 	lsr.w	r3, r2, r6
 80004b4:	fa01 f707 	lsl.w	r7, r1, r7
 80004b8:	40f1      	lsrs	r1, r6
 80004ba:	2600      	movs	r6, #0
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	e73c      	b.n	800033e <__udivmoddi4+0x9a>
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	f1c3 0020 	rsb	r0, r3, #32
 80004cc:	fa01 f203 	lsl.w	r2, r1, r3
 80004d0:	fa21 f600 	lsr.w	r6, r1, r0
 80004d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004d8:	fa24 f100 	lsr.w	r1, r4, r0
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	409c      	lsls	r4, r3
 80004e2:	4311      	orrs	r1, r2
 80004e4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004e8:	0c0a      	lsrs	r2, r1, #16
 80004ea:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ee:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f2:	fb00 f607 	mul.w	r6, r0, r7
 80004f6:	4296      	cmp	r6, r2
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x274>
 80004fa:	eb1c 0202 	adds.w	r2, ip, r2
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	4296      	cmp	r6, r2
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x272>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d6>
 8000516:	4640      	mov	r0, r8
 8000518:	1b92      	subs	r2, r2, r6
 800051a:	b289      	uxth	r1, r1
 800051c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000520:	fb0e 2216 	mls	r2, lr, r6, r2
 8000524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000528:	fb06 f207 	mul.w	r2, r6, r7
 800052c:	428a      	cmp	r2, r1
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x29c>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f106 38ff 	add.w	r8, r6, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x29a>
 800053a:	428a      	cmp	r2, r1
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2e2>
 800053e:	4646      	mov	r6, r8
 8000540:	1a89      	subs	r1, r1, r2
 8000542:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000546:	e725      	b.n	8000394 <__udivmoddi4+0xf0>
 8000548:	462e      	mov	r6, r5
 800054a:	4628      	mov	r0, r5
 800054c:	e6f7      	b.n	800033e <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb61 0303 	sbc.w	r3, r1, r3
 8000554:	2001      	movs	r0, #1
 8000556:	461f      	mov	r7, r3
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xce>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e749      	b.n	80003f4 <__udivmoddi4+0x150>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e1      	b.n	800032a <__udivmoddi4+0x86>
 8000566:	3a02      	subs	r2, #2
 8000568:	4461      	add	r1, ip
 800056a:	e72e      	b.n	80003ca <__udivmoddi4+0x126>
 800056c:	3e02      	subs	r6, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c6      	b.n	8000300 <__udivmoddi4+0x5c>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b6>
 800057a:	3802      	subs	r0, #2
 800057c:	4462      	add	r2, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x274>
 8000580:	3802      	subs	r0, #2
 8000582:	4461      	add	r1, ip
 8000584:	e77d      	b.n	8000482 <__udivmoddi4+0x1de>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x29c>
 800058c:	462e      	mov	r6, r5
 800058e:	e6d6      	b.n	800033e <__udivmoddi4+0x9a>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 800059c:	4b0a      	ldr	r3, [pc, #40]	; (80005c8 <LL_AHB2_GRP1_EnableClock+0x34>)
 800059e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005a2:	4909      	ldr	r1, [pc, #36]	; (80005c8 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	4313      	orrs	r3, r2
 80005a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <LL_AHB2_GRP1_EnableClock+0x34>)
 80005ae:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4013      	ands	r3, r2
 80005b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005b8:	68fb      	ldr	r3, [r7, #12]
}
 80005ba:	bf00      	nop
 80005bc:	3714      	adds	r7, #20
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	46020c00 	.word	0x46020c00

080005cc <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80005d4:	4b0a      	ldr	r3, [pc, #40]	; (8000600 <LL_APB1_GRP2_EnableClock+0x34>)
 80005d6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80005da:	4909      	ldr	r1, [pc, #36]	; (8000600 <LL_APB1_GRP2_EnableClock+0x34>)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4313      	orrs	r3, r2
 80005e0:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <LL_APB1_GRP2_EnableClock+0x34>)
 80005e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	4013      	ands	r3, r2
 80005ee:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005f0:	68fb      	ldr	r3, [r7, #12]
}
 80005f2:	bf00      	nop
 80005f4:	3714      	adds	r7, #20
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	46020c00 	.word	0x46020c00

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f001 fdc3 	bl	8002194 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060e:	f000 f825 	bl	800065c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000612:	f000 f882 	bl	800071a <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000616:	f000 fbb7 	bl	8000d88 <MX_GPIO_Init>
  MX_ADF1_Init();
 800061a:	f000 f88d 	bl	8000738 <MX_ADF1_Init>
  MX_I2C1_Init();
 800061e:	f000 f8d7 	bl	80007d0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000622:	f000 f915 	bl	8000850 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000626:	f000 f953 	bl	80008d0 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 800062a:	f000 f9c9 	bl	80009c0 <MX_OCTOSPI2_Init>
  MX_SPI2_Init();
 800062e:	f000 fa43 	bl	8000ab8 <MX_SPI2_Init>
  MX_UART4_Init();
 8000632:	f000 faaf 	bl	8000b94 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000636:	f000 faf9 	bl	8000c2c <MX_USART1_UART_Init>
  MX_UCPD1_Init();
 800063a:	f000 fb43 	bl	8000cc4 <MX_UCPD1_Init>
  MX_USB_OTG_FS_PCD_Init();
 800063e:	f000 fb77 	bl	8000d30 <MX_USB_OTG_FS_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  read_temp(&hi2c2, &temp_val);
 8000642:	1dbb      	adds	r3, r7, #6
 8000644:	4619      	mov	r1, r3
 8000646:	4804      	ldr	r0, [pc, #16]	; (8000658 <main+0x54>)
 8000648:	f000 fd00 	bl	800104c <read_temp>
	  read_humidity(&hi2c2, &hum_val);
 800064c:	1d3b      	adds	r3, r7, #4
 800064e:	4619      	mov	r1, r3
 8000650:	4801      	ldr	r0, [pc, #4]	; (8000658 <main+0x54>)
 8000652:	f000 fe35 	bl	80012c0 <read_humidity>
	  read_temp(&hi2c2, &temp_val);
 8000656:	e7f4      	b.n	8000642 <main+0x3e>
 8000658:	20000198 	.word	0x20000198

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b09e      	sub	sp, #120	; 0x78
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0318 	add.w	r3, r7, #24
 8000666:	2260      	movs	r2, #96	; 0x60
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f009 fb3e 	bl	8009cec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	463b      	mov	r3, r7
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]
 800067e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000680:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8000684:	f004 f87a 	bl	800477c <HAL_PWREx_ControlVoltageScaling>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800068e:	f000 ff13 	bl	80014b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 8000692:	2330      	movs	r3, #48	; 0x30
 8000694:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800069c:	2301      	movs	r3, #1
 800069e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006a0:	2310      	movs	r3, #16
 80006a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 80006a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006ae:	2301      	movs	r3, #1
 80006b0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006b6:	2301      	movs	r3, #1
 80006b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 80;
 80006ba:	2350      	movs	r3, #80	; 0x50
 80006bc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006be:	2302      	movs	r3, #2
 80006c0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c6:	2302      	movs	r3, #2
 80006c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d2:	f107 0318 	add.w	r3, r7, #24
 80006d6:	4618      	mov	r0, r3
 80006d8:	f004 f942 	bl	8004960 <HAL_RCC_OscConfig>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80006e2:	f000 fee9 	bl	80014b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e6:	231f      	movs	r3, #31
 80006e8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ea:	2303      	movs	r3, #3
 80006ec:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006fe:	463b      	mov	r3, r7
 8000700:	2104      	movs	r1, #4
 8000702:	4618      	mov	r0, r3
 8000704:	f005 f802 	bl	800570c <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800070e:	f000 fed3 	bl	80014b8 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3778      	adds	r7, #120	; 0x78
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}

0800071a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800071a:	b580      	push	{r7, lr}
 800071c:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800071e:	f004 f90f 	bl	8004940 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000722:	2002      	movs	r0, #2
 8000724:	f004 f8ac 	bl	8004880 <HAL_PWREx_ConfigSupply>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemPower_Config+0x18>
  {
    Error_Handler();
 800072e:	f000 fec3 	bl	80014b8 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 800073c:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <MX_ADF1_Init+0x8c>)
 800073e:	4a22      	ldr	r2, [pc, #136]	; (80007c8 <MX_ADF1_Init+0x90>)
 8000740:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <MX_ADF1_Init+0x8c>)
 8000744:	2201      	movs	r2, #1
 8000746:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <MX_ADF1_Init+0x8c>)
 800074a:	2200      	movs	r2, #0
 800074c:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 800074e:	4b1d      	ldr	r3, [pc, #116]	; (80007c4 <MX_ADF1_Init+0x8c>)
 8000750:	2201      	movs	r2, #1
 8000752:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 8000756:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_ADF1_Init+0x8c>)
 8000758:	2200      	movs	r2, #0
 800075a:	62da      	str	r2, [r3, #44]	; 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 800075c:	4b19      	ldr	r3, [pc, #100]	; (80007c4 <MX_ADF1_Init+0x8c>)
 800075e:	2204      	movs	r2, #4
 8000760:	631a      	str	r2, [r3, #48]	; 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_ADF1_Init+0x8c>)
 8000764:	2201      	movs	r2, #1
 8000766:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 8000768:	4816      	ldr	r0, [pc, #88]	; (80007c4 <MX_ADF1_Init+0x8c>)
 800076a:	f002 fd9f 	bl	80032ac <HAL_MDF_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_ADF1_Init+0x40>
  {
    Error_Handler();
 8000774:	f000 fea0 	bl	80014b8 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_ADF1_Init+0x94>)
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_ADF1_Init+0x94>)
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_ADF1_Init+0x94>)
 8000786:	2240      	movs	r2, #64	; 0x40
 8000788:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_ADF1_Init+0x94>)
 800078c:	2202      	movs	r2, #2
 800078e:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 8000790:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_ADF1_Init+0x94>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 8000796:	4b0d      	ldr	r3, [pc, #52]	; (80007cc <MX_ADF1_Init+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 800079c:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_ADF1_Init+0x94>)
 800079e:	2200      	movs	r2, #0
 80007a0:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_ADF1_Init+0x94>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 80007ac:	4b07      	ldr	r3, [pc, #28]	; (80007cc <MX_ADF1_Init+0x94>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	665a      	str	r2, [r3, #100]	; 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_ADF1_Init+0x94>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	669a      	str	r2, [r3, #104]	; 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 80007b8:	4b04      	ldr	r3, [pc, #16]	; (80007cc <MX_ADF1_Init+0x94>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	2000008c 	.word	0x2000008c
 80007c8:	46024080 	.word	0x46024080
 80007cc:	200000d0 	.word	0x200000d0

080007d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007d4:	4b1b      	ldr	r3, [pc, #108]	; (8000844 <MX_I2C1_Init+0x74>)
 80007d6:	4a1c      	ldr	r2, [pc, #112]	; (8000848 <MX_I2C1_Init+0x78>)
 80007d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 80007da:	4b1a      	ldr	r3, [pc, #104]	; (8000844 <MX_I2C1_Init+0x74>)
 80007dc:	4a1b      	ldr	r2, [pc, #108]	; (800084c <MX_I2C1_Init+0x7c>)
 80007de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80007e0:	4b18      	ldr	r3, [pc, #96]	; (8000844 <MX_I2C1_Init+0x74>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <MX_I2C1_Init+0x74>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007ec:	4b15      	ldr	r3, [pc, #84]	; (8000844 <MX_I2C1_Init+0x74>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <MX_I2C1_Init+0x74>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007f8:	4b12      	ldr	r3, [pc, #72]	; (8000844 <MX_I2C1_Init+0x74>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007fe:	4b11      	ldr	r3, [pc, #68]	; (8000844 <MX_I2C1_Init+0x74>)
 8000800:	2200      	movs	r2, #0
 8000802:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000804:	4b0f      	ldr	r3, [pc, #60]	; (8000844 <MX_I2C1_Init+0x74>)
 8000806:	2200      	movs	r2, #0
 8000808:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800080a:	480e      	ldr	r0, [pc, #56]	; (8000844 <MX_I2C1_Init+0x74>)
 800080c:	f002 f8ba 	bl	8002984 <HAL_I2C_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000816:	f000 fe4f 	bl	80014b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800081a:	2100      	movs	r1, #0
 800081c:	4809      	ldr	r0, [pc, #36]	; (8000844 <MX_I2C1_Init+0x74>)
 800081e:	f002 fcad 	bl	800317c <HAL_I2CEx_ConfigAnalogFilter>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000828:	f000 fe46 	bl	80014b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800082c:	2100      	movs	r1, #0
 800082e:	4805      	ldr	r0, [pc, #20]	; (8000844 <MX_I2C1_Init+0x74>)
 8000830:	f002 fcef 	bl	8003212 <HAL_I2CEx_ConfigDigitalFilter>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800083a:	f000 fe3d 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	2000014c 	.word	0x2000014c
 8000848:	40005400 	.word	0x40005400
 800084c:	30909dec 	.word	0x30909dec

08000850 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <MX_I2C2_Init+0x78>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x30909DEC;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_I2C2_Init+0x74>)
 800085c:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <MX_I2C2_Init+0x7c>)
 800085e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000868:	2201      	movs	r2, #1
 800086a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_I2C2_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_I2C2_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_I2C2_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800088a:	480e      	ldr	r0, [pc, #56]	; (80008c4 <MX_I2C2_Init+0x74>)
 800088c:	f002 f87a 	bl	8002984 <HAL_I2C_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000896:	f000 fe0f 	bl	80014b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089a:	2100      	movs	r1, #0
 800089c:	4809      	ldr	r0, [pc, #36]	; (80008c4 <MX_I2C2_Init+0x74>)
 800089e:	f002 fc6d 	bl	800317c <HAL_I2CEx_ConfigAnalogFilter>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80008a8:	f000 fe06 	bl	80014b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_I2C2_Init+0x74>)
 80008b0:	f002 fcaf 	bl	8003212 <HAL_I2CEx_ConfigDigitalFilter>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80008ba:	f000 fdfd 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000198 	.word	0x20000198
 80008c8:	40005800 	.word	0x40005800
 80008cc:	30909dec 	.word	0x30909dec

080008d0 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80008d6:	f107 0308 	add.w	r3, r7, #8
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
 80008e6:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 80008e8:	463b      	mov	r3, r7
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80008f0:	4b30      	ldr	r3, [pc, #192]	; (80009b4 <MX_OCTOSPI1_Init+0xe4>)
 80008f2:	4a31      	ldr	r2, [pc, #196]	; (80009b8 <MX_OCTOSPI1_Init+0xe8>)
 80008f4:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80008f6:	4b2f      	ldr	r3, [pc, #188]	; (80009b4 <MX_OCTOSPI1_Init+0xe4>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80008fc:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <MX_OCTOSPI1_Init+0xe4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000902:	4b2c      	ldr	r3, [pc, #176]	; (80009b4 <MX_OCTOSPI1_Init+0xe4>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000908:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <MX_OCTOSPI1_Init+0xe4>)
 800090a:	2220      	movs	r2, #32
 800090c:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 800090e:	4b29      	ldr	r3, [pc, #164]	; (80009b4 <MX_OCTOSPI1_Init+0xe4>)
 8000910:	2201      	movs	r2, #1
 8000912:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000914:	4b27      	ldr	r3, [pc, #156]	; (80009b4 <MX_OCTOSPI1_Init+0xe4>)
 8000916:	2200      	movs	r2, #0
 8000918:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800091a:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <MX_OCTOSPI1_Init+0xe4>)
 800091c:	2200      	movs	r2, #0
 800091e:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000920:	4b24      	ldr	r3, [pc, #144]	; (80009b4 <MX_OCTOSPI1_Init+0xe4>)
 8000922:	2200      	movs	r2, #0
 8000924:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000926:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <MX_OCTOSPI1_Init+0xe4>)
 8000928:	2201      	movs	r2, #1
 800092a:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800092c:	4b21      	ldr	r3, [pc, #132]	; (80009b4 <MX_OCTOSPI1_Init+0xe4>)
 800092e:	2200      	movs	r2, #0
 8000930:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000932:	4b20      	ldr	r3, [pc, #128]	; (80009b4 <MX_OCTOSPI1_Init+0xe4>)
 8000934:	2200      	movs	r2, #0
 8000936:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <MX_OCTOSPI1_Init+0xe4>)
 800093a:	2200      	movs	r2, #0
 800093c:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <MX_OCTOSPI1_Init+0xe4>)
 8000940:	2208      	movs	r2, #8
 8000942:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <MX_OCTOSPI1_Init+0xe4>)
 8000946:	2200      	movs	r2, #0
 8000948:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 0;
 800094a:	4b1a      	ldr	r3, [pc, #104]	; (80009b4 <MX_OCTOSPI1_Init+0xe4>)
 800094c:	2200      	movs	r2, #0
 800094e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000950:	4818      	ldr	r0, [pc, #96]	; (80009b4 <MX_OCTOSPI1_Init+0xe4>)
 8000952:	f002 fe57 	bl	8003604 <HAL_OSPI_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_OCTOSPI1_Init+0x90>
  {
    Error_Handler();
 800095c:	f000 fdac 	bl	80014b8 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000960:	2301      	movs	r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 1;
 8000964:	2301      	movs	r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 1;
 8000968:	2301      	movs	r3, #1
 800096a:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 800096c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000970:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_OCTOSPI1_Init+0xec>)
 8000974:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000976:	f107 0308 	add.w	r3, r7, #8
 800097a:	f241 3288 	movw	r2, #5000	; 0x1388
 800097e:	4619      	mov	r1, r3
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <MX_OCTOSPI1_Init+0xe4>)
 8000982:	f002 ff7f 	bl	8003884 <HAL_OSPIM_Config>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_OCTOSPI1_Init+0xc0>
  {
    Error_Handler();
 800098c:	f000 fd94 	bl	80014b8 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8000998:	463b      	mov	r3, r7
 800099a:	4619      	mov	r1, r3
 800099c:	4805      	ldr	r0, [pc, #20]	; (80009b4 <MX_OCTOSPI1_Init+0xe4>)
 800099e:	f003 fd5d 	bl	800445c <HAL_OSPI_DLYB_SetConfig>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_OCTOSPI1_Init+0xdc>
  {
    Error_Handler();
 80009a8:	f000 fd86 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80009ac:	bf00      	nop
 80009ae:	3720      	adds	r7, #32
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200001e4 	.word	0x200001e4
 80009b8:	420d1400 	.word	0x420d1400
 80009bc:	01000001 	.word	0x01000001

080009c0 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b088      	sub	sp, #32
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80009c6:	f107 0308 	add.w	r3, r7, #8
 80009ca:	2200      	movs	r2, #0
 80009cc:	601a      	str	r2, [r3, #0]
 80009ce:	605a      	str	r2, [r3, #4]
 80009d0:	609a      	str	r2, [r3, #8]
 80009d2:	60da      	str	r2, [r3, #12]
 80009d4:	611a      	str	r2, [r3, #16]
 80009d6:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 80009d8:	463b      	mov	r3, r7
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 80009e0:	4b31      	ldr	r3, [pc, #196]	; (8000aa8 <MX_OCTOSPI2_Init+0xe8>)
 80009e2:	4a32      	ldr	r2, [pc, #200]	; (8000aac <MX_OCTOSPI2_Init+0xec>)
 80009e4:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 4;
 80009e6:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <MX_OCTOSPI2_Init+0xe8>)
 80009e8:	2204      	movs	r2, #4
 80009ea:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80009ec:	4b2e      	ldr	r3, [pc, #184]	; (8000aa8 <MX_OCTOSPI2_Init+0xe8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80009f2:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <MX_OCTOSPI2_Init+0xe8>)
 80009f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80009f8:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 26;
 80009fa:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <MX_OCTOSPI2_Init+0xe8>)
 80009fc:	221a      	movs	r2, #26
 80009fe:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 2;
 8000a00:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <MX_OCTOSPI2_Init+0xe8>)
 8000a02:	2202      	movs	r2, #2
 8000a04:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000a06:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <MX_OCTOSPI2_Init+0xe8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000a0c:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <MX_OCTOSPI2_Init+0xe8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000a12:	4b25      	ldr	r3, [pc, #148]	; (8000aa8 <MX_OCTOSPI2_Init+0xe8>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 4;
 8000a18:	4b23      	ldr	r3, [pc, #140]	; (8000aa8 <MX_OCTOSPI2_Init+0xe8>)
 8000a1a:	2204      	movs	r2, #4
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000a1e:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <MX_OCTOSPI2_Init+0xe8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8000a24:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <MX_OCTOSPI2_Init+0xe8>)
 8000a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8000a2c:	4b1e      	ldr	r3, [pc, #120]	; (8000aa8 <MX_OCTOSPI2_Init+0xe8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	631a      	str	r2, [r3, #48]	; 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8000a32:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <MX_OCTOSPI2_Init+0xe8>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	635a      	str	r2, [r3, #52]	; 0x34
  hospi2.Init.MaxTran = 0;
 8000a38:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_OCTOSPI2_Init+0xe8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	639a      	str	r2, [r3, #56]	; 0x38
  hospi2.Init.Refresh = 0;
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_OCTOSPI2_Init+0xe8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000a44:	4818      	ldr	r0, [pc, #96]	; (8000aa8 <MX_OCTOSPI2_Init+0xe8>)
 8000a46:	f002 fddd 	bl	8003604 <HAL_OSPI_Init>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_OCTOSPI2_Init+0x94>
  {
    Error_Handler();
 8000a50:	f000 fd32 	bl	80014b8 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 2;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_OCTOSPI2_Init+0xf0>)
 8000a62:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000a64:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_OCTOSPI2_Init+0xf4>)
 8000a66:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a70:	4619      	mov	r1, r3
 8000a72:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <MX_OCTOSPI2_Init+0xe8>)
 8000a74:	f002 ff06 	bl	8003884 <HAL_OSPIM_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <MX_OCTOSPI2_Init+0xc2>
  {
    Error_Handler();
 8000a7e:	f000 fd1b 	bl	80014b8 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8000a8a:	463b      	mov	r3, r7
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <MX_OCTOSPI2_Init+0xe8>)
 8000a90:	f003 fce4 	bl	800445c <HAL_OSPI_DLYB_SetConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_OCTOSPI2_Init+0xde>
  {
    Error_Handler();
 8000a9a:	f000 fd0d 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	3720      	adds	r7, #32
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	20000240 	.word	0x20000240
 8000aac:	420d2400 	.word	0x420d2400
 8000ab0:	00010002 	.word	0x00010002
 8000ab4:	01000002 	.word	0x01000002

08000ab8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ac8:	4b30      	ldr	r3, [pc, #192]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000aca:	4a31      	ldr	r2, [pc, #196]	; (8000b90 <MX_SPI2_Init+0xd8>)
 8000acc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ace:	4b2f      	ldr	r3, [pc, #188]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000ad0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000ad4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ad6:	4b2d      	ldr	r3, [pc, #180]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000adc:	4b2b      	ldr	r3, [pc, #172]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000ade:	2203      	movs	r2, #3
 8000ae0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ae2:	4b2a      	ldr	r3, [pc, #168]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ae8:	4b28      	ldr	r3, [pc, #160]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000aee:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000af0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000af4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000af6:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000afc:	4b23      	ldr	r3, [pc, #140]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b02:	4b22      	ldr	r3, [pc, #136]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b08:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000b10:	2207      	movs	r2, #7
 8000b12:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000b14:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000b16:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b1a:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000b22:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000b28:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000b2e:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000b34:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000b52:	480e      	ldr	r0, [pc, #56]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000b54:	f007 fdfa 	bl	800874c <HAL_SPI_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 8000b5e:	f000 fcab 	bl	80014b8 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000b66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b6a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	4619      	mov	r1, r3
 8000b74:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_SPI2_Init+0xd4>)
 8000b76:	f007 fefc 	bl	8008972 <HAL_SPIEx_SetConfigAutonomousMode>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 8000b80:	f000 fc9a 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	2000029c 	.word	0x2000029c
 8000b90:	40003800 	.word	0x40003800

08000b94 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b98:	4b22      	ldr	r3, [pc, #136]	; (8000c24 <MX_UART4_Init+0x90>)
 8000b9a:	4a23      	ldr	r2, [pc, #140]	; (8000c28 <MX_UART4_Init+0x94>)
 8000b9c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b9e:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <MX_UART4_Init+0x90>)
 8000ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba6:	4b1f      	ldr	r3, [pc, #124]	; (8000c24 <MX_UART4_Init+0x90>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000bac:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <MX_UART4_Init+0x90>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000bb2:	4b1c      	ldr	r3, [pc, #112]	; (8000c24 <MX_UART4_Init+0x90>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <MX_UART4_Init+0x90>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b19      	ldr	r3, [pc, #100]	; (8000c24 <MX_UART4_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <MX_UART4_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bca:	4b16      	ldr	r3, [pc, #88]	; (8000c24 <MX_UART4_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <MX_UART4_Init+0x90>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bd6:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <MX_UART4_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000bdc:	4811      	ldr	r0, [pc, #68]	; (8000c24 <MX_UART4_Init+0x90>)
 8000bde:	f007 ff09 	bl	80089f4 <HAL_UART_Init>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000be8:	f000 fc66 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bec:	2100      	movs	r1, #0
 8000bee:	480d      	ldr	r0, [pc, #52]	; (8000c24 <MX_UART4_Init+0x90>)
 8000bf0:	f008 fae0 	bl	80091b4 <HAL_UARTEx_SetTxFifoThreshold>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000bfa:	f000 fc5d 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4808      	ldr	r0, [pc, #32]	; (8000c24 <MX_UART4_Init+0x90>)
 8000c02:	f008 fb15 	bl	8009230 <HAL_UARTEx_SetRxFifoThreshold>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000c0c:	f000 fc54 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000c10:	4804      	ldr	r0, [pc, #16]	; (8000c24 <MX_UART4_Init+0x90>)
 8000c12:	f008 fa96 	bl	8009142 <HAL_UARTEx_DisableFifoMode>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000c1c:	f000 fc4c 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	2000032c 	.word	0x2000032c
 8000c28:	40004c00 	.word	0x40004c00

08000c2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c30:	4b22      	ldr	r3, [pc, #136]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c32:	4a23      	ldr	r2, [pc, #140]	; (8000cc0 <MX_USART1_UART_Init+0x94>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c36:	4b21      	ldr	r3, [pc, #132]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c62:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c68:	4b14      	ldr	r3, [pc, #80]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c74:	4811      	ldr	r0, [pc, #68]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c76:	f007 febd 	bl	80089f4 <HAL_UART_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c80:	f000 fc1a 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c84:	2100      	movs	r1, #0
 8000c86:	480d      	ldr	r0, [pc, #52]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c88:	f008 fa94 	bl	80091b4 <HAL_UARTEx_SetTxFifoThreshold>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c92:	f000 fc11 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c96:	2100      	movs	r1, #0
 8000c98:	4808      	ldr	r0, [pc, #32]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c9a:	f008 fac9 	bl	8009230 <HAL_UARTEx_SetRxFifoThreshold>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ca4:	f000 fc08 	bl	80014b8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ca8:	4804      	ldr	r0, [pc, #16]	; (8000cbc <MX_USART1_UART_Init+0x90>)
 8000caa:	f008 fa4a 	bl	8009142 <HAL_UARTEx_DisableFifoMode>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000cb4:	f000 fc00 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200003bc 	.word	0x200003bc
 8000cc0:	40013800 	.word	0x40013800

08000cc4 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cca:	463b      	mov	r3, r7
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
 8000cd8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000cda:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000cde:	f7ff fc75 	bl	80005cc <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	f7ff fc56 	bl	8000594 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000ce8:	2002      	movs	r0, #2
 8000cea:	f7ff fc53 	bl	8000594 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PA15 (JTDI)   ------> UCPD1_CC1
  PB15   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cf2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000cf4:	2303      	movs	r3, #3
 8000cf6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4809      	ldr	r0, [pc, #36]	; (8000d28 <MX_UCPD1_Init+0x64>)
 8000d02:	f008 fc8b 	bl	800961c <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d0a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d10:	2300      	movs	r3, #0
 8000d12:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	463b      	mov	r3, r7
 8000d16:	4619      	mov	r1, r3
 8000d18:	4804      	ldr	r0, [pc, #16]	; (8000d2c <MX_UCPD1_Init+0x68>)
 8000d1a:	f008 fc7f 	bl	800961c <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	42020000 	.word	0x42020000
 8000d2c:	42020400 	.word	0x42020400

08000d30 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000d36:	4a13      	ldr	r2, [pc, #76]	; (8000d84 <MX_USB_OTG_FS_PCD_Init+0x54>)
 8000d38:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000d3a:	4b11      	ldr	r3, [pc, #68]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000d3c:	2206      	movs	r2, #6
 8000d3e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000d42:	2202      	movs	r2, #2
 8000d44:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000d46:	4b0e      	ldr	r3, [pc, #56]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000d52:	4b0b      	ldr	r3, [pc, #44]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000d5e:	4b08      	ldr	r3, [pc, #32]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000d6a:	4805      	ldr	r0, [pc, #20]	; (8000d80 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000d6c:	f003 fbbe 	bl	80044ec <HAL_PCD_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 8000d76:	f000 fb9f 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	2000044c 	.word	0x2000044c
 8000d84:	42040000 	.word	0x42040000

08000d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b08e      	sub	sp, #56	; 0x38
 8000d8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
 8000d96:	605a      	str	r2, [r3, #4]
 8000d98:	609a      	str	r2, [r3, #8]
 8000d9a:	60da      	str	r2, [r3, #12]
 8000d9c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d9e:	4ba3      	ldr	r3, [pc, #652]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000da4:	4aa1      	ldr	r2, [pc, #644]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000daa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000dae:	4b9f      	ldr	r3, [pc, #636]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000db8:	623b      	str	r3, [r7, #32]
 8000dba:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dbc:	4b9b      	ldr	r3, [pc, #620]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dc2:	4a9a      	ldr	r2, [pc, #616]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000dcc:	4b97      	ldr	r3, [pc, #604]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000dce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dd2:	f003 0304 	and.w	r3, r3, #4
 8000dd6:	61fb      	str	r3, [r7, #28]
 8000dd8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	4b94      	ldr	r3, [pc, #592]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000ddc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000de0:	4a92      	ldr	r2, [pc, #584]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000dea:	4b90      	ldr	r3, [pc, #576]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	61bb      	str	r3, [r7, #24]
 8000df6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000df8:	4b8c      	ldr	r3, [pc, #560]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000dfe:	4a8b      	ldr	r2, [pc, #556]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e04:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e08:	4b88      	ldr	r3, [pc, #544]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000e0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e16:	4b85      	ldr	r3, [pc, #532]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e1c:	4a83      	ldr	r2, [pc, #524]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000e1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e26:	4b81      	ldr	r3, [pc, #516]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000e28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e34:	4b7d      	ldr	r3, [pc, #500]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e3a:	4a7c      	ldr	r2, [pc, #496]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000e3c:	f043 0302 	orr.w	r3, r3, #2
 8000e40:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e44:	4b79      	ldr	r3, [pc, #484]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000e46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e52:	4b76      	ldr	r3, [pc, #472]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e58:	4a74      	ldr	r2, [pc, #464]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000e5a:	f043 0308 	orr.w	r3, r3, #8
 8000e5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e62:	4b72      	ldr	r3, [pc, #456]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e68:	f003 0308 	and.w	r3, r3, #8
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e70:	4b6e      	ldr	r3, [pc, #440]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000e72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e76:	4a6d      	ldr	r2, [pc, #436]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000e78:	f043 0310 	orr.w	r3, r3, #16
 8000e7c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e80:	4b6a      	ldr	r3, [pc, #424]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000e82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e86:	f003 0310 	and.w	r3, r3, #16
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e8e:	4b67      	ldr	r3, [pc, #412]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000e90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000e94:	4a65      	ldr	r2, [pc, #404]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000e96:	f043 0320 	orr.w	r3, r3, #32
 8000e9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8000e9e:	4b63      	ldr	r3, [pc, #396]	; (800102c <MX_GPIO_Init+0x2a4>)
 8000ea0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ea4:	f003 0320 	and.w	r3, r3, #32
 8000ea8:	603b      	str	r3, [r7, #0]
 8000eaa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2120      	movs	r1, #32
 8000eb0:	485f      	ldr	r0, [pc, #380]	; (8001030 <MX_GPIO_Init+0x2a8>)
 8000eb2:	f001 fd4f 	bl	8002954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	21c2      	movs	r1, #194	; 0xc2
 8000eba:	485e      	ldr	r0, [pc, #376]	; (8001034 <MX_GPIO_Init+0x2ac>)
 8000ebc:	f001 fd4a 	bl	8002954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WRLS_WKUP_B_GPIO_Port, WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2140      	movs	r1, #64	; 0x40
 8000ec4:	485c      	ldr	r0, [pc, #368]	; (8001038 <MX_GPIO_Init+0x2b0>)
 8000ec6:	f001 fd45 	bl	8002954 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin, GPIO_PIN_RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8000ed0:	485a      	ldr	r0, [pc, #360]	; (800103c <MX_GPIO_Init+0x2b4>)
 8000ed2:	f001 fd3f 	bl	8002954 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WRLS_FLOW_Pin Mems_VLX_GPIO_Pin Mems_INT_LPS22HH_Pin */
  GPIO_InitStruct.Pin = WRLS_FLOW_Pin|Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 8000ed6:	f248 0324 	movw	r3, #32804	; 0x8024
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ee4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4853      	ldr	r0, [pc, #332]	; (8001038 <MX_GPIO_Init+0x2b0>)
 8000eec:	f001 fb5a 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3_BOOT0_Pin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 8000ef0:	2308      	movs	r3, #8
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 8000efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f00:	4619      	mov	r1, r3
 8000f02:	484c      	ldr	r0, [pc, #304]	; (8001034 <MX_GPIO_Init+0x2ac>)
 8000f04:	f001 fb4e 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_PWR_Pin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 8000f08:	2320      	movs	r3, #32
 8000f0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4844      	ldr	r0, [pc, #272]	; (8001030 <MX_GPIO_Init+0x2a8>)
 8000f20:	f001 fb40 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Button_Pin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8000f24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f36:	4619      	mov	r1, r3
 8000f38:	4841      	ldr	r0, [pc, #260]	; (8001040 <MX_GPIO_Init+0x2b8>)
 8000f3a:	f001 fb33 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin Mems_VL53_xshut_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin;
 8000f3e:	23c2      	movs	r3, #194	; 0xc2
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f42:	2301      	movs	r3, #1
 8000f44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f52:	4619      	mov	r1, r3
 8000f54:	4837      	ldr	r0, [pc, #220]	; (8001034 <MX_GPIO_Init+0x2ac>)
 8000f56:	f001 fb25 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CCK1_Pin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 8000f5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f60:	2302      	movs	r3, #2
 8000f62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8000f6c:	2306      	movs	r3, #6
 8000f6e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 8000f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f74:	4619      	mov	r1, r3
 8000f76:	4831      	ldr	r0, [pc, #196]	; (800103c <MX_GPIO_Init+0x2b4>)
 8000f78:	f001 fb14 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : WRLS_WKUP_B_Pin */
  GPIO_InitStruct.Pin = WRLS_WKUP_B_Pin;
 8000f7c:	2340      	movs	r3, #64	; 0x40
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WRLS_WKUP_B_GPIO_Port, &GPIO_InitStruct);
 8000f8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f90:	4619      	mov	r1, r3
 8000f92:	4829      	ldr	r0, [pc, #164]	; (8001038 <MX_GPIO_Init+0x2b0>)
 8000f94:	f001 fb06 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_NOTIFY_Pin Mems_INT_IIS2MDC_Pin USB_IANA_Pin Mems_INT_IIS2MDCD9_Pin */
  GPIO_InitStruct.Pin = WRLS_NOTIFY_Pin|Mems_INT_IIS2MDC_Pin|USB_IANA_Pin|Mems_INT_IIS2MDCD9_Pin;
 8000f98:	f44f 43cc 	mov.w	r3, #26112	; 0x6600
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000faa:	4619      	mov	r1, r3
 8000fac:	4825      	ldr	r0, [pc, #148]	; (8001044 <MX_GPIO_Init+0x2bc>)
 8000fae:	f001 faf9 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_UCPD_FLT_Pin Mems_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin|Mems_ISM330DLC_INT1_Pin;
 8000fb2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000fb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	4820      	ldr	r0, [pc, #128]	; (8001048 <MX_GPIO_Init+0x2c0>)
 8000fc8:	f001 faec 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 8000fcc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8000fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4816      	ldr	r0, [pc, #88]	; (800103c <MX_GPIO_Init+0x2b4>)
 8000fe2:	f001 fadf 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mems_STSAFE_RESET_Pin WRLS_WKUP_W_Pin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin;
 8000fe6:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fec:	2301      	movs	r3, #1
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	480f      	ldr	r0, [pc, #60]	; (800103c <MX_GPIO_Init+0x2b4>)
 8001000:	f001 fad0 	bl	80025a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_SDIN0_Pin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 8001004:	2302      	movs	r3, #2
 8001006:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001008:	2302      	movs	r3, #2
 800100a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100c:	2300      	movs	r3, #0
 800100e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001010:	2300      	movs	r3, #0
 8001012:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8001014:	2306      	movs	r3, #6
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800101c:	4619      	mov	r1, r3
 800101e:	4804      	ldr	r0, [pc, #16]	; (8001030 <MX_GPIO_Init+0x2a8>)
 8001020:	f001 fac0 	bl	80025a4 <HAL_GPIO_Init>

}
 8001024:	bf00      	nop
 8001026:	3738      	adds	r7, #56	; 0x38
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	46020c00 	.word	0x46020c00
 8001030:	42020400 	.word	0x42020400
 8001034:	42021c00 	.word	0x42021c00
 8001038:	42021800 	.word	0x42021800
 800103c:	42021400 	.word	0x42021400
 8001040:	42020800 	.word	0x42020800
 8001044:	42020c00 	.word	0x42020c00
 8001048:	42021000 	.word	0x42021000

0800104c <read_temp>:

/* USER CODE BEGIN 4 */
static void read_temp(I2C_HandleTypeDef *hi2c, int16_t *value) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	; 0x38
 8001050:	af04      	add	r7, sp, #16
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
	int16_t T0_degC, T1_degC;
	uint8_t t0_degC_x8, t1_degC_x8;
	uint8_t buffer[4], tmp;

	//get t0_degC from 0x32
	ret = HAL_I2C_Mem_Read(hi2c, hts221_read_addr, 0x32, 1, &t0_degC_x8, 1, 100);
 8001056:	23bf      	movs	r3, #191	; 0xbf
 8001058:	b299      	uxth	r1, r3
 800105a:	2364      	movs	r3, #100	; 0x64
 800105c:	9302      	str	r3, [sp, #8]
 800105e:	2301      	movs	r3, #1
 8001060:	9301      	str	r3, [sp, #4]
 8001062:	f107 0317 	add.w	r3, r7, #23
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	2301      	movs	r3, #1
 800106a:	2232      	movs	r2, #50	; 0x32
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f001 fd19 	bl	8002aa4 <HAL_I2C_Mem_Read>
 8001072:	4603      	mov	r3, r0
 8001074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (ret != HAL_OK) {
 8001078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800107c:	2b00      	cmp	r3, #0
 800107e:	d003      	beq.n	8001088 <read_temp+0x3c>
		printf("HAL_I2C_Mem_Read failed");
 8001080:	488e      	ldr	r0, [pc, #568]	; (80012bc <read_temp+0x270>)
 8001082:	f008 fe3b 	bl	8009cfc <iprintf>
		return;
 8001086:	e116      	b.n	80012b6 <read_temp+0x26a>
	}
	//get t1_degC from 0x33
	ret = HAL_I2C_Mem_Read(hi2c, hts221_read_addr, 0x33, 1, &t1_degC_x8, 1, 100);
 8001088:	23bf      	movs	r3, #191	; 0xbf
 800108a:	b299      	uxth	r1, r3
 800108c:	2364      	movs	r3, #100	; 0x64
 800108e:	9302      	str	r3, [sp, #8]
 8001090:	2301      	movs	r3, #1
 8001092:	9301      	str	r3, [sp, #4]
 8001094:	f107 0316 	add.w	r3, r7, #22
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2301      	movs	r3, #1
 800109c:	2233      	movs	r2, #51	; 0x33
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f001 fd00 	bl	8002aa4 <HAL_I2C_Mem_Read>
 80010a4:	4603      	mov	r3, r0
 80010a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (ret != HAL_OK) {
 80010aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <read_temp+0x6e>
		printf("HAL_I2C_Mem_Read failed");
 80010b2:	4882      	ldr	r0, [pc, #520]	; (80012bc <read_temp+0x270>)
 80010b4:	f008 fe22 	bl	8009cfc <iprintf>
		return;
 80010b8:	e0fd      	b.n	80012b6 <read_temp+0x26a>
	}

	//MSB of T1_degC and t0_degC
	ret = HAL_I2C_Mem_Read(hi2c, hts221_read_addr, 0x35, 1, &tmp, 1, 100);
 80010ba:	23bf      	movs	r3, #191	; 0xbf
 80010bc:	b299      	uxth	r1, r3
 80010be:	2364      	movs	r3, #100	; 0x64
 80010c0:	9302      	str	r3, [sp, #8]
 80010c2:	2301      	movs	r3, #1
 80010c4:	9301      	str	r3, [sp, #4]
 80010c6:	f107 030f 	add.w	r3, r7, #15
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2301      	movs	r3, #1
 80010ce:	2235      	movs	r2, #53	; 0x35
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f001 fce7 	bl	8002aa4 <HAL_I2C_Mem_Read>
 80010d6:	4603      	mov	r3, r0
 80010d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (ret != HAL_OK) {
 80010dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <read_temp+0xa0>
		printf("HAL_I2C_Mem_Read failed");
 80010e4:	4875      	ldr	r0, [pc, #468]	; (80012bc <read_temp+0x270>)
 80010e6:	f008 fe09 	bl	8009cfc <iprintf>
		return;
 80010ea:	e0e4      	b.n	80012b6 <read_temp+0x26a>
	}

	//calculate actual values of t0_degC and t1_degC using MSB and LSB
	//lowest two bits are MSB of t0_degc, then next two bits are MSB of t1_degC
	t0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t) t0_degC_x8);
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	7dfb      	ldrb	r3, [r7, #23]
 80010fa:	b21b      	sxth	r3, r3
 80010fc:	4313      	orrs	r3, r2
 80010fe:	84bb      	strh	r3, [r7, #36]	; 0x24
	t1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t) t1_degC_x8);
 8001100:	7bfb      	ldrb	r3, [r7, #15]
 8001102:	019b      	lsls	r3, r3, #6
 8001104:	b21b      	sxth	r3, r3
 8001106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800110a:	b21a      	sxth	r2, r3
 800110c:	7dbb      	ldrb	r3, [r7, #22]
 800110e:	b21b      	sxth	r3, r3
 8001110:	4313      	orrs	r3, r2
 8001112:	847b      	strh	r3, [r7, #34]	; 0x22
	//have to divide by 8
	T0_degC = t0_degC_x8_u16 >> 3;
 8001114:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001118:	10db      	asrs	r3, r3, #3
 800111a:	843b      	strh	r3, [r7, #32]
	T1_degC = t1_degC_x8_u16 >> 3;
 800111c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001120:	10db      	asrs	r3, r3, #3
 8001122:	83fb      	strh	r3, [r7, #30]

	//read from 0x3C and 0x3D The value of T0_OUT
	ret = HAL_I2C_Mem_Read(hi2c, hts221_read_addr, 0x3C, 1, &buffer[0], 1, 100);
 8001124:	23bf      	movs	r3, #191	; 0xbf
 8001126:	b299      	uxth	r1, r3
 8001128:	2364      	movs	r3, #100	; 0x64
 800112a:	9302      	str	r3, [sp, #8]
 800112c:	2301      	movs	r3, #1
 800112e:	9301      	str	r3, [sp, #4]
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2301      	movs	r3, #1
 8001138:	223c      	movs	r2, #60	; 0x3c
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f001 fcb2 	bl	8002aa4 <HAL_I2C_Mem_Read>
 8001140:	4603      	mov	r3, r0
 8001142:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (ret != HAL_OK) {
 8001146:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <read_temp+0x10a>
		printf("HAL_I2C_Mem_Read failed");
 800114e:	485b      	ldr	r0, [pc, #364]	; (80012bc <read_temp+0x270>)
 8001150:	f008 fdd4 	bl	8009cfc <iprintf>
		return;
 8001154:	e0af      	b.n	80012b6 <read_temp+0x26a>
	}

	ret = HAL_I2C_Mem_Read(hi2c, hts221_read_addr, 0x3D, 1, &buffer[1], 1, 100);
 8001156:	23bf      	movs	r3, #191	; 0xbf
 8001158:	b299      	uxth	r1, r3
 800115a:	2364      	movs	r3, #100	; 0x64
 800115c:	9302      	str	r3, [sp, #8]
 800115e:	2301      	movs	r3, #1
 8001160:	9301      	str	r3, [sp, #4]
 8001162:	f107 0310 	add.w	r3, r7, #16
 8001166:	3301      	adds	r3, #1
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2301      	movs	r3, #1
 800116c:	223d      	movs	r2, #61	; 0x3d
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f001 fc98 	bl	8002aa4 <HAL_I2C_Mem_Read>
 8001174:	4603      	mov	r3, r0
 8001176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (ret != HAL_OK) {
 800117a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <read_temp+0x13e>
		printf("HAL_I2C_Mem_Read failed");
 8001182:	484e      	ldr	r0, [pc, #312]	; (80012bc <read_temp+0x270>)
 8001184:	f008 fdba 	bl	8009cfc <iprintf>
		return;
 8001188:	e095      	b.n	80012b6 <read_temp+0x26a>
	}

	T0_out = (((uint16_t) buffer[1]) << 8) | (uint16_t) buffer[0];
 800118a:	7c7b      	ldrb	r3, [r7, #17]
 800118c:	021b      	lsls	r3, r3, #8
 800118e:	b21a      	sxth	r2, r3
 8001190:	7c3b      	ldrb	r3, [r7, #16]
 8001192:	b21b      	sxth	r3, r3
 8001194:	4313      	orrs	r3, r2
 8001196:	83bb      	strh	r3, [r7, #28]

	//read from 0x3E and 0x3F The value of T1_OUT
	ret = HAL_I2C_Mem_Read(hi2c, hts221_read_addr, 0x3E, 1, &buffer[0], 1, 100);
 8001198:	23bf      	movs	r3, #191	; 0xbf
 800119a:	b299      	uxth	r1, r3
 800119c:	2364      	movs	r3, #100	; 0x64
 800119e:	9302      	str	r3, [sp, #8]
 80011a0:	2301      	movs	r3, #1
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	f107 0310 	add.w	r3, r7, #16
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2301      	movs	r3, #1
 80011ac:	223e      	movs	r2, #62	; 0x3e
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f001 fc78 	bl	8002aa4 <HAL_I2C_Mem_Read>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (ret != HAL_OK) {
 80011ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d003      	beq.n	80011ca <read_temp+0x17e>
		printf("HAL_I2C_Mem_Read failed");
 80011c2:	483e      	ldr	r0, [pc, #248]	; (80012bc <read_temp+0x270>)
 80011c4:	f008 fd9a 	bl	8009cfc <iprintf>
		return;
 80011c8:	e075      	b.n	80012b6 <read_temp+0x26a>
	}

	ret = HAL_I2C_Mem_Read(hi2c, hts221_read_addr, 0x3F, 1, &buffer[1], 1, 100);
 80011ca:	23bf      	movs	r3, #191	; 0xbf
 80011cc:	b299      	uxth	r1, r3
 80011ce:	2364      	movs	r3, #100	; 0x64
 80011d0:	9302      	str	r3, [sp, #8]
 80011d2:	2301      	movs	r3, #1
 80011d4:	9301      	str	r3, [sp, #4]
 80011d6:	f107 0310 	add.w	r3, r7, #16
 80011da:	3301      	adds	r3, #1
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2301      	movs	r3, #1
 80011e0:	223f      	movs	r2, #63	; 0x3f
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f001 fc5e 	bl	8002aa4 <HAL_I2C_Mem_Read>
 80011e8:	4603      	mov	r3, r0
 80011ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (ret != HAL_OK) {
 80011ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d003      	beq.n	80011fe <read_temp+0x1b2>
		printf("HAL_I2C_Mem_Read failed");
 80011f6:	4831      	ldr	r0, [pc, #196]	; (80012bc <read_temp+0x270>)
 80011f8:	f008 fd80 	bl	8009cfc <iprintf>
		return;
 80011fc:	e05b      	b.n	80012b6 <read_temp+0x26a>
	}

	T1_out = (((uint16_t) buffer[1]) << 8) | (uint16_t) buffer[0];
 80011fe:	7c7b      	ldrb	r3, [r7, #17]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	b21a      	sxth	r2, r3
 8001204:	7c3b      	ldrb	r3, [r7, #16]
 8001206:	b21b      	sxth	r3, r3
 8001208:	4313      	orrs	r3, r2
 800120a:	837b      	strh	r3, [r7, #26]

	//read value of T_out from registers 0x2A and 0x2B
	ret = HAL_I2C_Mem_Read(hi2c, hts221_read_addr, 0x2A, 1, &buffer[0], 1, 100);
 800120c:	23bf      	movs	r3, #191	; 0xbf
 800120e:	b299      	uxth	r1, r3
 8001210:	2364      	movs	r3, #100	; 0x64
 8001212:	9302      	str	r3, [sp, #8]
 8001214:	2301      	movs	r3, #1
 8001216:	9301      	str	r3, [sp, #4]
 8001218:	f107 0310 	add.w	r3, r7, #16
 800121c:	9300      	str	r3, [sp, #0]
 800121e:	2301      	movs	r3, #1
 8001220:	222a      	movs	r2, #42	; 0x2a
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f001 fc3e 	bl	8002aa4 <HAL_I2C_Mem_Read>
 8001228:	4603      	mov	r3, r0
 800122a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (ret != HAL_OK) {
 800122e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <read_temp+0x1f2>
		printf("HAL_I2C_Mem_Read failed");
 8001236:	4821      	ldr	r0, [pc, #132]	; (80012bc <read_temp+0x270>)
 8001238:	f008 fd60 	bl	8009cfc <iprintf>
		return;
 800123c:	e03b      	b.n	80012b6 <read_temp+0x26a>
	}

	ret = HAL_I2C_Mem_Read(hi2c, hts221_read_addr, 0x2B, 1, &buffer[1], 1, 100);
 800123e:	23bf      	movs	r3, #191	; 0xbf
 8001240:	b299      	uxth	r1, r3
 8001242:	2364      	movs	r3, #100	; 0x64
 8001244:	9302      	str	r3, [sp, #8]
 8001246:	2301      	movs	r3, #1
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	f107 0310 	add.w	r3, r7, #16
 800124e:	3301      	adds	r3, #1
 8001250:	9300      	str	r3, [sp, #0]
 8001252:	2301      	movs	r3, #1
 8001254:	222b      	movs	r2, #43	; 0x2b
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f001 fc24 	bl	8002aa4 <HAL_I2C_Mem_Read>
 800125c:	4603      	mov	r3, r0
 800125e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (ret != HAL_OK) {
 8001262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <read_temp+0x226>
		printf("HAL_I2C_Mem_Read failed");
 800126a:	4814      	ldr	r0, [pc, #80]	; (80012bc <read_temp+0x270>)
 800126c:	f008 fd46 	bl	8009cfc <iprintf>
		return;
 8001270:	e021      	b.n	80012b6 <read_temp+0x26a>
	}

	T_out = (((uint16_t) buffer[1]) << 8) | (uint16_t) buffer[0];
 8001272:	7c7b      	ldrb	r3, [r7, #17]
 8001274:	021b      	lsls	r3, r3, #8
 8001276:	b21a      	sxth	r2, r3
 8001278:	7c3b      	ldrb	r3, [r7, #16]
 800127a:	b21b      	sxth	r3, r3
 800127c:	4313      	orrs	r3, r2
 800127e:	833b      	strh	r3, [r7, #24]

	//computing the actual temperature value using linear interpolation formula
	//@source: https://www.st.com/resource/en/technical_note/tn1218-interpreting-humidity-and-temperature-readings-in-the-hts221-digital-humidity-sensor-stmicroelectronics.pdf
	*value = ((T1_degC - T0_degC * (T_out - T0_out))/(T1_out - T0_out)) + T0_degC;
 8001280:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001284:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001288:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 800128c:	f9b7 101c 	ldrsh.w	r1, [r7, #28]
 8001290:	1a41      	subs	r1, r0, r1
 8001292:	fb01 f303 	mul.w	r3, r1, r3
 8001296:	1ad2      	subs	r2, r2, r3
 8001298:	f9b7 101a 	ldrsh.w	r1, [r7, #26]
 800129c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80012a0:	1acb      	subs	r3, r1, r3
 80012a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	8c3b      	ldrh	r3, [r7, #32]
 80012aa:	4413      	add	r3, r2
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	b21a      	sxth	r2, r3
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	801a      	strh	r2, [r3, #0]
	return;
 80012b4:	bf00      	nop
}
 80012b6:	3728      	adds	r7, #40	; 0x28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	0800ac4c 	.word	0x0800ac4c

080012c0 <read_humidity>:

static void read_humidity(I2C_HandleTypeDef *hi2c, int16_t *value){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af04      	add	r7, sp, #16
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	int16_t H0_T0_OUT;
	int16_t H1_T0_OUT;
	int16_t H_OUT;

	//reading h0_rh from 0x30
	ret = HAL_I2C_Mem_Read(hi2c, hts221_read_addr, 0x30, 1, &buffer[0], 1, 100);
 80012ca:	23bf      	movs	r3, #191	; 0xbf
 80012cc:	b299      	uxth	r1, r3
 80012ce:	2364      	movs	r3, #100	; 0x64
 80012d0:	9302      	str	r3, [sp, #8]
 80012d2:	2301      	movs	r3, #1
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	f107 0308 	add.w	r3, r7, #8
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	2301      	movs	r3, #1
 80012de:	2230      	movs	r2, #48	; 0x30
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f001 fbdf 	bl	8002aa4 <HAL_I2C_Mem_Read>
 80012e6:	4603      	mov	r3, r0
 80012e8:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK) {
 80012ea:	7dfb      	ldrb	r3, [r7, #23]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <read_humidity+0x38>
		printf("HAL_I2C_Mem_Read failed");
 80012f0:	4870      	ldr	r0, [pc, #448]	; (80014b4 <read_humidity+0x1f4>)
 80012f2:	f008 fd03 	bl	8009cfc <iprintf>
		return;
 80012f6:	e0da      	b.n	80014ae <read_humidity+0x1ee>
	}
	//reading h1_rh from 0x31
	ret = HAL_I2C_Mem_Read(hi2c, hts221_read_addr, 0x31, 1, &buffer[1], 1, 100);
 80012f8:	23bf      	movs	r3, #191	; 0xbf
 80012fa:	b299      	uxth	r1, r3
 80012fc:	2364      	movs	r3, #100	; 0x64
 80012fe:	9302      	str	r3, [sp, #8]
 8001300:	2301      	movs	r3, #1
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	f107 0308 	add.w	r3, r7, #8
 8001308:	3301      	adds	r3, #1
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2301      	movs	r3, #1
 800130e:	2231      	movs	r2, #49	; 0x31
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f001 fbc7 	bl	8002aa4 <HAL_I2C_Mem_Read>
 8001316:	4603      	mov	r3, r0
 8001318:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK) {
 800131a:	7dfb      	ldrb	r3, [r7, #23]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d003      	beq.n	8001328 <read_humidity+0x68>
		printf("HAL_I2C_Mem_Read failed");
 8001320:	4864      	ldr	r0, [pc, #400]	; (80014b4 <read_humidity+0x1f4>)
 8001322:	f008 fceb 	bl	8009cfc <iprintf>
		return;
 8001326:	e0c2      	b.n	80014ae <read_humidity+0x1ee>
	}
	//computing H0_rh_x2
	H0_rh = buffer[0] >> 1;
 8001328:	7a3b      	ldrb	r3, [r7, #8]
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	b2db      	uxtb	r3, r3
 800132e:	82bb      	strh	r3, [r7, #20]
	H1_rh = buffer[1] >> 1;
 8001330:	7a7b      	ldrb	r3, [r7, #9]
 8001332:	085b      	lsrs	r3, r3, #1
 8001334:	b2db      	uxtb	r3, r3
 8001336:	827b      	strh	r3, [r7, #18]

	//reading H0_T0_out from 0x36 and 0x37
	ret = HAL_I2C_Mem_Read(hi2c, hts221_read_addr, 0x36, 1, &buffer[0], 1, 100);
 8001338:	23bf      	movs	r3, #191	; 0xbf
 800133a:	b299      	uxth	r1, r3
 800133c:	2364      	movs	r3, #100	; 0x64
 800133e:	9302      	str	r3, [sp, #8]
 8001340:	2301      	movs	r3, #1
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	f107 0308 	add.w	r3, r7, #8
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2301      	movs	r3, #1
 800134c:	2236      	movs	r2, #54	; 0x36
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f001 fba8 	bl	8002aa4 <HAL_I2C_Mem_Read>
 8001354:	4603      	mov	r3, r0
 8001356:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK) {
 8001358:	7dfb      	ldrb	r3, [r7, #23]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <read_humidity+0xa6>
		printf("HAL_I2C_Mem_Read failed");
 800135e:	4855      	ldr	r0, [pc, #340]	; (80014b4 <read_humidity+0x1f4>)
 8001360:	f008 fccc 	bl	8009cfc <iprintf>
		return;
 8001364:	e0a3      	b.n	80014ae <read_humidity+0x1ee>
	}
	//reading h0_rh_x2 high byte from 0x31
	ret = HAL_I2C_Mem_Read(hi2c, hts221_read_addr, 0x37, 1, &buffer[1], 1, 100);
 8001366:	23bf      	movs	r3, #191	; 0xbf
 8001368:	b299      	uxth	r1, r3
 800136a:	2364      	movs	r3, #100	; 0x64
 800136c:	9302      	str	r3, [sp, #8]
 800136e:	2301      	movs	r3, #1
 8001370:	9301      	str	r3, [sp, #4]
 8001372:	f107 0308 	add.w	r3, r7, #8
 8001376:	3301      	adds	r3, #1
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	2237      	movs	r2, #55	; 0x37
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f001 fb90 	bl	8002aa4 <HAL_I2C_Mem_Read>
 8001384:	4603      	mov	r3, r0
 8001386:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK) {
 8001388:	7dfb      	ldrb	r3, [r7, #23]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d003      	beq.n	8001396 <read_humidity+0xd6>
		printf("HAL_I2C_Mem_Read failed");
 800138e:	4849      	ldr	r0, [pc, #292]	; (80014b4 <read_humidity+0x1f4>)
 8001390:	f008 fcb4 	bl	8009cfc <iprintf>
		return;
 8001394:	e08b      	b.n	80014ae <read_humidity+0x1ee>
	}

	H0_T0_OUT = (((uint16_t) buffer[1]) << 8) | ((uint16_t) buffer[0]);
 8001396:	7a7b      	ldrb	r3, [r7, #9]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	b21a      	sxth	r2, r3
 800139c:	7a3b      	ldrb	r3, [r7, #8]
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	823b      	strh	r3, [r7, #16]

	//reading H0_T0_out from 0x3A and 0x3B
	ret = HAL_I2C_Mem_Read(hi2c, hts221_read_addr, 0x3A, 1, &buffer[0], 1, 100);
 80013a4:	23bf      	movs	r3, #191	; 0xbf
 80013a6:	b299      	uxth	r1, r3
 80013a8:	2364      	movs	r3, #100	; 0x64
 80013aa:	9302      	str	r3, [sp, #8]
 80013ac:	2301      	movs	r3, #1
 80013ae:	9301      	str	r3, [sp, #4]
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	2301      	movs	r3, #1
 80013b8:	223a      	movs	r2, #58	; 0x3a
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f001 fb72 	bl	8002aa4 <HAL_I2C_Mem_Read>
 80013c0:	4603      	mov	r3, r0
 80013c2:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK) {
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <read_humidity+0x112>
		printf("HAL_I2C_Mem_Read failed");
 80013ca:	483a      	ldr	r0, [pc, #232]	; (80014b4 <read_humidity+0x1f4>)
 80013cc:	f008 fc96 	bl	8009cfc <iprintf>
		return;
 80013d0:	e06d      	b.n	80014ae <read_humidity+0x1ee>
	}
	//reading h0_rh_x2 high byte from 0x31
	ret = HAL_I2C_Mem_Read(hi2c, hts221_read_addr, 0x3B, 1, &buffer[1], 1, 100);
 80013d2:	23bf      	movs	r3, #191	; 0xbf
 80013d4:	b299      	uxth	r1, r3
 80013d6:	2364      	movs	r3, #100	; 0x64
 80013d8:	9302      	str	r3, [sp, #8]
 80013da:	2301      	movs	r3, #1
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	3301      	adds	r3, #1
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2301      	movs	r3, #1
 80013e8:	223b      	movs	r2, #59	; 0x3b
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f001 fb5a 	bl	8002aa4 <HAL_I2C_Mem_Read>
 80013f0:	4603      	mov	r3, r0
 80013f2:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK) {
 80013f4:	7dfb      	ldrb	r3, [r7, #23]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <read_humidity+0x142>
		printf("HAL_I2C_Mem_Read failed");
 80013fa:	482e      	ldr	r0, [pc, #184]	; (80014b4 <read_humidity+0x1f4>)
 80013fc:	f008 fc7e 	bl	8009cfc <iprintf>
		return;
 8001400:	e055      	b.n	80014ae <read_humidity+0x1ee>
	}

	H1_T0_OUT = (((uint16_t) buffer[1]) << 8) | ((uint16_t) buffer[0]);
 8001402:	7a7b      	ldrb	r3, [r7, #9]
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	b21a      	sxth	r2, r3
 8001408:	7a3b      	ldrb	r3, [r7, #8]
 800140a:	b21b      	sxth	r3, r3
 800140c:	4313      	orrs	r3, r2
 800140e:	81fb      	strh	r3, [r7, #14]

	//raw humidity values into H_OUT from 0x28 0x29
	ret = HAL_I2C_Mem_Read(hi2c, hts221_read_addr, 0x28, 1, &buffer[0], 1, 100);
 8001410:	23bf      	movs	r3, #191	; 0xbf
 8001412:	b299      	uxth	r1, r3
 8001414:	2364      	movs	r3, #100	; 0x64
 8001416:	9302      	str	r3, [sp, #8]
 8001418:	2301      	movs	r3, #1
 800141a:	9301      	str	r3, [sp, #4]
 800141c:	f107 0308 	add.w	r3, r7, #8
 8001420:	9300      	str	r3, [sp, #0]
 8001422:	2301      	movs	r3, #1
 8001424:	2228      	movs	r2, #40	; 0x28
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f001 fb3c 	bl	8002aa4 <HAL_I2C_Mem_Read>
 800142c:	4603      	mov	r3, r0
 800142e:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK) {
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <read_humidity+0x17e>
		printf("HAL_I2C_Mem_Read failed");
 8001436:	481f      	ldr	r0, [pc, #124]	; (80014b4 <read_humidity+0x1f4>)
 8001438:	f008 fc60 	bl	8009cfc <iprintf>
		return;
 800143c:	e037      	b.n	80014ae <read_humidity+0x1ee>
	}
	//reading h0_rh_x2 high byte from 0x31
	ret = HAL_I2C_Mem_Read(hi2c, hts221_read_addr, 0x29, 1, &buffer[1], 1, 100);
 800143e:	23bf      	movs	r3, #191	; 0xbf
 8001440:	b299      	uxth	r1, r3
 8001442:	2364      	movs	r3, #100	; 0x64
 8001444:	9302      	str	r3, [sp, #8]
 8001446:	2301      	movs	r3, #1
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	f107 0308 	add.w	r3, r7, #8
 800144e:	3301      	adds	r3, #1
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2301      	movs	r3, #1
 8001454:	2229      	movs	r2, #41	; 0x29
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f001 fb24 	bl	8002aa4 <HAL_I2C_Mem_Read>
 800145c:	4603      	mov	r3, r0
 800145e:	75fb      	strb	r3, [r7, #23]
	if (ret != HAL_OK) {
 8001460:	7dfb      	ldrb	r3, [r7, #23]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d003      	beq.n	800146e <read_humidity+0x1ae>
		printf("HAL_I2C_Mem_Read failed");
 8001466:	4813      	ldr	r0, [pc, #76]	; (80014b4 <read_humidity+0x1f4>)
 8001468:	f008 fc48 	bl	8009cfc <iprintf>
		return;
 800146c:	e01f      	b.n	80014ae <read_humidity+0x1ee>
	}

	H_OUT = (((uint16_t) buffer[1]) << 8) | ((uint16_t) buffer[0]);
 800146e:	7a7b      	ldrb	r3, [r7, #9]
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	b21a      	sxth	r2, r3
 8001474:	7a3b      	ldrb	r3, [r7, #8]
 8001476:	b21b      	sxth	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	81bb      	strh	r3, [r7, #12]

	*value = ((H1_rh - H0_rh)*(H_OUT - H0_T0_OUT))/(H1_T0_OUT - H0_T0_OUT) + H0_rh;
 800147c:	8a7a      	ldrh	r2, [r7, #18]
 800147e:	8abb      	ldrh	r3, [r7, #20]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001486:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800148a:	1a8a      	subs	r2, r1, r2
 800148c:	fb03 f202 	mul.w	r2, r3, r2
 8001490:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001494:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001498:	1acb      	subs	r3, r1, r3
 800149a:	fb92 f3f3 	sdiv	r3, r2, r3
 800149e:	b29a      	uxth	r2, r3
 80014a0:	8abb      	ldrh	r3, [r7, #20]
 80014a2:	4413      	add	r3, r2
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	b21a      	sxth	r2, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	801a      	strh	r2, [r3, #0]
	return;
 80014ac:	bf00      	nop





}
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	0800ac4c 	.word	0x0800ac4c

080014b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014bc:	b672      	cpsid	i
}
 80014be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c0:	e7fe      	b.n	80014c0 <Error_Handler+0x8>
	...

080014c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <HAL_MspInit+0x30>)
 80014cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014d0:	4a08      	ldr	r2, [pc, #32]	; (80014f4 <HAL_MspInit+0x30>)
 80014d2:	f043 0304 	orr.w	r3, r3, #4
 80014d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80014da:	4b06      	ldr	r3, [pc, #24]	; (80014f4 <HAL_MspInit+0x30>)
 80014dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014e0:	f003 0304 	and.w	r3, r3, #4
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	46020c00 	.word	0x46020c00

080014f8 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b0bc      	sub	sp, #240	; 0xf0
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001500:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]
 800150a:	609a      	str	r2, [r3, #8]
 800150c:	60da      	str	r2, [r3, #12]
 800150e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001510:	f107 0310 	add.w	r3, r7, #16
 8001514:	22c8      	movs	r2, #200	; 0xc8
 8001516:	2100      	movs	r1, #0
 8001518:	4618      	mov	r0, r3
 800151a:	f008 fbe7 	bl	8009cec <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a27      	ldr	r2, [pc, #156]	; (80015c0 <HAL_MDF_MspInit+0xc8>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d146      	bne.n	80015b6 <HAL_MDF_MspInit+0xbe>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 8001528:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 8001534:	2300      	movs	r3, #0
 8001536:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800153a:	f107 0310 	add.w	r3, r7, #16
 800153e:	4618      	mov	r0, r3
 8001540:	f004 fcba 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_MDF_MspInit+0x56>
    {
      Error_Handler();
 800154a:	f7ff ffb5 	bl	80014b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 800154e:	4b1d      	ldr	r3, [pc, #116]	; (80015c4 <HAL_MDF_MspInit+0xcc>)
 8001550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001554:	4a1b      	ldr	r2, [pc, #108]	; (80015c4 <HAL_MDF_MspInit+0xcc>)
 8001556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800155a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_MDF_MspInit+0xcc>)
 8001560:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800156c:	4b15      	ldr	r3, [pc, #84]	; (80015c4 <HAL_MDF_MspInit+0xcc>)
 800156e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001572:	4a14      	ldr	r2, [pc, #80]	; (80015c4 <HAL_MDF_MspInit+0xcc>)
 8001574:	f043 0310 	orr.w	r3, r3, #16
 8001578:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800157c:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <HAL_MDF_MspInit+0xcc>)
 800157e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001582:	f003 0310 	and.w	r3, r3, #16
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	68bb      	ldr	r3, [r7, #8]
    /**ADF1 GPIO Configuration
    PE10     ------> ADF1_SDI0
    PE9     ------> ADF1_CCK0
    */
    GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 800158a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800158e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001592:	2302      	movs	r3, #2
 8001594:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 80015a4:	2303      	movs	r3, #3
 80015a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015aa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <HAL_MDF_MspInit+0xd0>)
 80015b2:	f000 fff7 	bl	80025a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 80015b6:	bf00      	nop
 80015b8:	37f0      	adds	r7, #240	; 0xf0
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	46024080 	.word	0x46024080
 80015c4:	46020c00 	.word	0x46020c00
 80015c8:	42021000 	.word	0x42021000

080015cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b0be      	sub	sp, #248	; 0xf8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e4:	f107 0318 	add.w	r3, r7, #24
 80015e8:	22c8      	movs	r2, #200	; 0xc8
 80015ea:	2100      	movs	r1, #0
 80015ec:	4618      	mov	r0, r3
 80015ee:	f008 fb7d 	bl	8009cec <memset>
  if(hi2c->Instance==I2C1)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a4d      	ldr	r2, [pc, #308]	; (800172c <HAL_I2C_MspInit+0x160>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d147      	bne.n	800168c <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015fc:	f04f 0240 	mov.w	r2, #64	; 0x40
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800160e:	f107 0318 	add.w	r3, r7, #24
 8001612:	4618      	mov	r0, r3
 8001614:	f004 fc50 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800161e:	f7ff ff4b 	bl	80014b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	4b43      	ldr	r3, [pc, #268]	; (8001730 <HAL_I2C_MspInit+0x164>)
 8001624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001628:	4a41      	ldr	r2, [pc, #260]	; (8001730 <HAL_I2C_MspInit+0x164>)
 800162a:	f043 0302 	orr.w	r3, r3, #2
 800162e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001632:	4b3f      	ldr	r3, [pc, #252]	; (8001730 <HAL_I2C_MspInit+0x164>)
 8001634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8001640:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001644:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001648:	2312      	movs	r3, #18
 800164a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800165a:	2304      	movs	r3, #4
 800165c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001660:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001664:	4619      	mov	r1, r3
 8001666:	4833      	ldr	r0, [pc, #204]	; (8001734 <HAL_I2C_MspInit+0x168>)
 8001668:	f000 ff9c 	bl	80025a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800166c:	4b30      	ldr	r3, [pc, #192]	; (8001730 <HAL_I2C_MspInit+0x164>)
 800166e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001672:	4a2f      	ldr	r2, [pc, #188]	; (8001730 <HAL_I2C_MspInit+0x164>)
 8001674:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001678:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800167c:	4b2c      	ldr	r3, [pc, #176]	; (8001730 <HAL_I2C_MspInit+0x164>)
 800167e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800168a:	e04a      	b.n	8001722 <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a29      	ldr	r2, [pc, #164]	; (8001738 <HAL_I2C_MspInit+0x16c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d145      	bne.n	8001722 <HAL_I2C_MspInit+0x156>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001696:	f04f 0280 	mov.w	r2, #128	; 0x80
 800169a:	f04f 0300 	mov.w	r3, #0
 800169e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a8:	f107 0318 	add.w	r3, r7, #24
 80016ac:	4618      	mov	r0, r3
 80016ae:	f004 fc03 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80016b8:	f7ff fefe 	bl	80014b8 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80016bc:	4b1c      	ldr	r3, [pc, #112]	; (8001730 <HAL_I2C_MspInit+0x164>)
 80016be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016c2:	4a1b      	ldr	r2, [pc, #108]	; (8001730 <HAL_I2C_MspInit+0x164>)
 80016c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <HAL_I2C_MspInit+0x164>)
 80016ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016d6:	60fb      	str	r3, [r7, #12]
 80016d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016da:	2330      	movs	r3, #48	; 0x30
 80016dc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e0:	2312      	movs	r3, #18
 80016e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	2300      	movs	r3, #0
 80016ee:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016f2:	2304      	movs	r3, #4
 80016f4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016f8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80016fc:	4619      	mov	r1, r3
 80016fe:	480f      	ldr	r0, [pc, #60]	; (800173c <HAL_I2C_MspInit+0x170>)
 8001700:	f000 ff50 	bl	80025a4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_I2C_MspInit+0x164>)
 8001706:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800170a:	4a09      	ldr	r2, [pc, #36]	; (8001730 <HAL_I2C_MspInit+0x164>)
 800170c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001710:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_I2C_MspInit+0x164>)
 8001716:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800171a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	68bb      	ldr	r3, [r7, #8]
}
 8001722:	bf00      	nop
 8001724:	37f8      	adds	r7, #248	; 0xf8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40005400 	.word	0x40005400
 8001730:	46020c00 	.word	0x46020c00
 8001734:	42020400 	.word	0x42020400
 8001738:	40005800 	.word	0x40005800
 800173c:	42021c00 	.word	0x42021c00

08001740 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b0c6      	sub	sp, #280	; 0x118
 8001744:	af00      	add	r7, sp, #0
 8001746:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800174a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800174e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001760:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001764:	22c8      	movs	r2, #200	; 0xc8
 8001766:	2100      	movs	r1, #0
 8001768:	4618      	mov	r0, r3
 800176a:	f008 fabf 	bl	8009cec <memset>
  if(hospi->Instance==OCTOSPI1)
 800176e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001772:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a96      	ldr	r2, [pc, #600]	; (80019d4 <HAL_OSPI_MspInit+0x294>)
 800177c:	4293      	cmp	r3, r2
 800177e:	f040 813b 	bne.w	80019f8 <HAL_OSPI_MspInit+0x2b8>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001782:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001786:	f04f 0300 	mov.w	r3, #0
 800178a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800178e:	2300      	movs	r3, #0
 8001790:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001794:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001798:	4618      	mov	r0, r3
 800179a:	f004 fb8d 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 80017a4:	f7ff fe88 	bl	80014b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80017a8:	4b8b      	ldr	r3, [pc, #556]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ae:	4a8a      	ldr	r2, [pc, #552]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 80017b0:	f043 0310 	orr.w	r3, r3, #16
 80017b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017b8:	4b87      	ldr	r3, [pc, #540]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 80017ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017be:	f003 0310 	and.w	r3, r3, #16
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
 80017c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80017c6:	4b84      	ldr	r3, [pc, #528]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 80017c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017cc:	4a82      	ldr	r2, [pc, #520]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 80017ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017d6:	4b80      	ldr	r3, [pc, #512]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 80017d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017e0:	633b      	str	r3, [r7, #48]	; 0x30
 80017e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017e4:	4b7c      	ldr	r3, [pc, #496]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 80017e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017ea:	4a7b      	ldr	r2, [pc, #492]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 80017ec:	f043 0310 	orr.w	r3, r3, #16
 80017f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80017f4:	4b78      	ldr	r3, [pc, #480]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 80017f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80017fa:	f003 0310 	and.w	r3, r3, #16
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001802:	4b75      	ldr	r3, [pc, #468]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 8001804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001808:	4a73      	ldr	r2, [pc, #460]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 800180a:	f043 0308 	orr.w	r3, r3, #8
 800180e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001812:	4b71      	ldr	r3, [pc, #452]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 8001814:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001818:	f003 0308 	and.w	r3, r3, #8
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
 800181e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001820:	4b6d      	ldr	r3, [pc, #436]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 8001822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001826:	4a6c      	ldr	r2, [pc, #432]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 8001828:	f043 0320 	orr.w	r3, r3, #32
 800182c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001830:	4b69      	ldr	r3, [pc, #420]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 8001832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001836:	f003 0320 	and.w	r3, r3, #32
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800183e:	4b66      	ldr	r3, [pc, #408]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 8001840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001844:	4a64      	ldr	r2, [pc, #400]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 8001846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800184a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800184e:	4b62      	ldr	r3, [pc, #392]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 8001850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001858:	623b      	str	r3, [r7, #32]
 800185a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800185c:	4b5e      	ldr	r3, [pc, #376]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 800185e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001862:	4a5d      	ldr	r2, [pc, #372]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 8001864:	f043 0304 	orr.w	r3, r3, #4
 8001868:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800186c:	4b5a      	ldr	r3, [pc, #360]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 800186e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001872:	f003 0304 	and.w	r3, r3, #4
 8001876:	61fb      	str	r3, [r7, #28]
 8001878:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	4b57      	ldr	r3, [pc, #348]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 800187c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001880:	4a55      	ldr	r2, [pc, #340]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 8001882:	f043 0302 	orr.w	r3, r3, #2
 8001886:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800188a:	4b53      	ldr	r3, [pc, #332]	; (80019d8 <HAL_OSPI_MspInit+0x298>)
 800188c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001890:	f003 0202 	and.w	r2, r3, #2
 8001894:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001898:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80018a2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80018a6:	681b      	ldr	r3, [r3, #0]
    PF6     ------> OCTOSPIM_P1_IO3
    PC3     ------> OCTOSPIM_P1_IO6
    PB10     ------> OCTOSPIM_P1_CLK
    PB11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 80018a8:	2301      	movs	r3, #1
 80018aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ba:	2303      	movs	r3, #3
 80018bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80018c0:	2303      	movs	r3, #3
 80018c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 80018c6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80018ca:	4619      	mov	r1, r3
 80018cc:	4843      	ldr	r0, [pc, #268]	; (80019dc <HAL_OSPI_MspInit+0x29c>)
 80018ce:	f000 fe69 	bl	80025a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 80018d2:	2308      	movs	r3, #8
 80018d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80018ea:	2303      	movs	r3, #3
 80018ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80018f4:	4619      	mov	r1, r3
 80018f6:	483a      	ldr	r0, [pc, #232]	; (80019e0 <HAL_OSPI_MspInit+0x2a0>)
 80018f8:	f000 fe54 	bl	80025a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190e:	2303      	movs	r3, #3
 8001910:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001914:	230a      	movs	r3, #10
 8001916:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 800191a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800191e:	4619      	mov	r1, r3
 8001920:	4830      	ldr	r0, [pc, #192]	; (80019e4 <HAL_OSPI_MspInit+0x2a4>)
 8001922:	f000 fe3f 	bl	80025a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 8001926:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800192a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192e:	2302      	movs	r3, #2
 8001930:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001940:	230a      	movs	r3, #10
 8001942:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001946:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800194a:	4619      	mov	r1, r3
 800194c:	4826      	ldr	r0, [pc, #152]	; (80019e8 <HAL_OSPI_MspInit+0x2a8>)
 800194e:	f000 fe29 	bl	80025a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 8001952:	2304      	movs	r3, #4
 8001954:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001958:	2302      	movs	r3, #2
 800195a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001964:	2303      	movs	r3, #3
 8001966:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800196a:	2303      	movs	r3, #3
 800196c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 8001970:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001974:	4619      	mov	r1, r3
 8001976:	481d      	ldr	r0, [pc, #116]	; (80019ec <HAL_OSPI_MspInit+0x2ac>)
 8001978:	f000 fe14 	bl	80025a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 800197c:	2308      	movs	r3, #8
 800197e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001982:	2302      	movs	r3, #2
 8001984:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001994:	230a      	movs	r3, #10
 8001996:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 800199a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800199e:	4619      	mov	r1, r3
 80019a0:	4813      	ldr	r0, [pc, #76]	; (80019f0 <HAL_OSPI_MspInit+0x2b0>)
 80019a2:	f000 fdff 	bl	80025a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 80019a6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ae:	2302      	movs	r3, #2
 80019b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80019c0:	230a      	movs	r3, #10
 80019c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80019ca:	4619      	mov	r1, r3
 80019cc:	4809      	ldr	r0, [pc, #36]	; (80019f4 <HAL_OSPI_MspInit+0x2b4>)
 80019ce:	f000 fde9 	bl	80025a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 80019d2:	e0cb      	b.n	8001b6c <HAL_OSPI_MspInit+0x42c>
 80019d4:	420d1400 	.word	0x420d1400
 80019d8:	46020c00 	.word	0x46020c00
 80019dc:	42022000 	.word	0x42022000
 80019e0:	42021000 	.word	0x42021000
 80019e4:	42020c00 	.word	0x42020c00
 80019e8:	42021400 	.word	0x42021400
 80019ec:	42021c00 	.word	0x42021c00
 80019f0:	42020800 	.word	0x42020800
 80019f4:	42020400 	.word	0x42020400
  else if(hospi->Instance==OCTOSPI2)
 80019f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80019fc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a5c      	ldr	r2, [pc, #368]	; (8001b78 <HAL_OSPI_MspInit+0x438>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	f040 80b0 	bne.w	8001b6c <HAL_OSPI_MspInit+0x42c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001a0c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001a22:	4618      	mov	r0, r3
 8001a24:	f004 fa48 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <HAL_OSPI_MspInit+0x2f2>
      Error_Handler();
 8001a2e:	f7ff fd43 	bl	80014b8 <Error_Handler>
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8001a32:	4b52      	ldr	r3, [pc, #328]	; (8001b7c <HAL_OSPI_MspInit+0x43c>)
 8001a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a38:	4a50      	ldr	r2, [pc, #320]	; (8001b7c <HAL_OSPI_MspInit+0x43c>)
 8001a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a42:	4b4e      	ldr	r3, [pc, #312]	; (8001b7c <HAL_OSPI_MspInit+0x43c>)
 8001a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a48:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001a4c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a5e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001a60:	4b46      	ldr	r3, [pc, #280]	; (8001b7c <HAL_OSPI_MspInit+0x43c>)
 8001a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a66:	4a45      	ldr	r2, [pc, #276]	; (8001b7c <HAL_OSPI_MspInit+0x43c>)
 8001a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a6c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a70:	4b42      	ldr	r3, [pc, #264]	; (8001b7c <HAL_OSPI_MspInit+0x43c>)
 8001a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a76:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001a7a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001a88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001a8c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a8e:	4b3b      	ldr	r3, [pc, #236]	; (8001b7c <HAL_OSPI_MspInit+0x43c>)
 8001a90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a94:	4a39      	ldr	r2, [pc, #228]	; (8001b7c <HAL_OSPI_MspInit+0x43c>)
 8001a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a9e:	4b37      	ldr	r3, [pc, #220]	; (8001b7c <HAL_OSPI_MspInit+0x43c>)
 8001aa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aa4:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8001aa8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001aac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ab6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001aba:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001abc:	4b2f      	ldr	r3, [pc, #188]	; (8001b7c <HAL_OSPI_MspInit+0x43c>)
 8001abe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ac2:	4a2e      	ldr	r2, [pc, #184]	; (8001b7c <HAL_OSPI_MspInit+0x43c>)
 8001ac4:	f043 0320 	orr.w	r3, r3, #32
 8001ac8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001acc:	4b2b      	ldr	r3, [pc, #172]	; (8001b7c <HAL_OSPI_MspInit+0x43c>)
 8001ace:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ad2:	f003 0220 	and.w	r2, r3, #32
 8001ad6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ada:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ae4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001ae8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 8001aea:	2320      	movs	r3, #32
 8001aec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001afc:	2303      	movs	r3, #3
 8001afe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8001b02:	2305      	movs	r3, #5
 8001b04:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 8001b08:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	481c      	ldr	r0, [pc, #112]	; (8001b80 <HAL_OSPI_MspInit+0x440>)
 8001b10:	f000 fd48 	bl	80025a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 8001b14:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001b18:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8001b2e:	2305      	movs	r3, #5
 8001b30:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b34:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4812      	ldr	r0, [pc, #72]	; (8001b84 <HAL_OSPI_MspInit+0x444>)
 8001b3c:	f000 fd32 	bl	80025a4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 8001b40:	f241 031f 	movw	r3, #4127	; 0x101f
 8001b44:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b54:	2303      	movs	r3, #3
 8001b56:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8001b5a:	2305      	movs	r3, #5
 8001b5c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b60:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001b64:	4619      	mov	r1, r3
 8001b66:	4808      	ldr	r0, [pc, #32]	; (8001b88 <HAL_OSPI_MspInit+0x448>)
 8001b68:	f000 fd1c 	bl	80025a4 <HAL_GPIO_Init>
}
 8001b6c:	bf00      	nop
 8001b6e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	420d2400 	.word	0x420d2400
 8001b7c:	46020c00 	.word	0x46020c00
 8001b80:	42022000 	.word	0x42022000
 8001b84:	42021c00 	.word	0x42021c00
 8001b88:	42021400 	.word	0x42021400

08001b8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b0be      	sub	sp, #248	; 0xf8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b94:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ba4:	f107 0318 	add.w	r3, r7, #24
 8001ba8:	22c8      	movs	r2, #200	; 0xc8
 8001baa:	2100      	movs	r1, #0
 8001bac:	4618      	mov	r0, r3
 8001bae:	f008 f89d 	bl	8009cec <memset>
  if(hspi->Instance==SPI2)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a39      	ldr	r2, [pc, #228]	; (8001c9c <HAL_SPI_MspInit+0x110>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d16b      	bne.n	8001c94 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001bbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bc0:	f04f 0300 	mov.w	r3, #0
 8001bc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8001bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bd0:	f107 0318 	add.w	r3, r7, #24
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f004 f96f 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001be0:	f7ff fc6a 	bl	80014b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001be4:	4b2e      	ldr	r3, [pc, #184]	; (8001ca0 <HAL_SPI_MspInit+0x114>)
 8001be6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001bea:	4a2d      	ldr	r2, [pc, #180]	; (8001ca0 <HAL_SPI_MspInit+0x114>)
 8001bec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bf0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001bf4:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <HAL_SPI_MspInit+0x114>)
 8001bf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c02:	4b27      	ldr	r3, [pc, #156]	; (8001ca0 <HAL_SPI_MspInit+0x114>)
 8001c04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c08:	4a25      	ldr	r2, [pc, #148]	; (8001ca0 <HAL_SPI_MspInit+0x114>)
 8001c0a:	f043 0308 	orr.w	r3, r3, #8
 8001c0e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c12:	4b23      	ldr	r3, [pc, #140]	; (8001ca0 <HAL_SPI_MspInit+0x114>)
 8001c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c18:	f003 0308 	and.w	r3, r3, #8
 8001c1c:	613b      	str	r3, [r7, #16]
 8001c1e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c20:	4b1f      	ldr	r3, [pc, #124]	; (8001ca0 <HAL_SPI_MspInit+0x114>)
 8001c22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c26:	4a1e      	ldr	r2, [pc, #120]	; (8001ca0 <HAL_SPI_MspInit+0x114>)
 8001c28:	f043 0302 	orr.w	r3, r3, #2
 8001c2c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c30:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <HAL_SPI_MspInit+0x114>)
 8001c32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	60fb      	str	r3, [r7, #12]
 8001c3c:	68fb      	ldr	r3, [r7, #12]
    PD4     ------> SPI2_MOSI
    PD3     ------> SPI2_MISO
    PD1     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_1;
 8001c3e:	231a      	movs	r3, #26
 8001c40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c56:	2305      	movs	r3, #5
 8001c58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c5c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c60:	4619      	mov	r1, r3
 8001c62:	4810      	ldr	r0, [pc, #64]	; (8001ca4 <HAL_SPI_MspInit+0x118>)
 8001c64:	f000 fc9e 	bl	80025a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c70:	2302      	movs	r3, #2
 8001c72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c82:	2305      	movs	r3, #5
 8001c84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c88:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4806      	ldr	r0, [pc, #24]	; (8001ca8 <HAL_SPI_MspInit+0x11c>)
 8001c90:	f000 fc88 	bl	80025a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001c94:	bf00      	nop
 8001c96:	37f8      	adds	r7, #248	; 0xf8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40003800 	.word	0x40003800
 8001ca0:	46020c00 	.word	0x46020c00
 8001ca4:	42020c00 	.word	0x42020c00
 8001ca8:	42020400 	.word	0x42020400

08001cac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b0be      	sub	sp, #248	; 0xf8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cc4:	f107 0318 	add.w	r3, r7, #24
 8001cc8:	22c8      	movs	r2, #200	; 0xc8
 8001cca:	2100      	movs	r1, #0
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f008 f80d 	bl	8009cec <memset>
  if(huart->Instance==UART4)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a4c      	ldr	r2, [pc, #304]	; (8001e08 <HAL_UART_MspInit+0x15c>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d146      	bne.n	8001d6a <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001cdc:	f04f 0208 	mov.w	r2, #8
 8001ce0:	f04f 0300 	mov.w	r3, #0
 8001ce4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cec:	f107 0318 	add.w	r3, r7, #24
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f004 f8e1 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001cfc:	f7ff fbdc 	bl	80014b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001d00:	4b42      	ldr	r3, [pc, #264]	; (8001e0c <HAL_UART_MspInit+0x160>)
 8001d02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d06:	4a41      	ldr	r2, [pc, #260]	; (8001e0c <HAL_UART_MspInit+0x160>)
 8001d08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001d0c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001d10:	4b3e      	ldr	r3, [pc, #248]	; (8001e0c <HAL_UART_MspInit+0x160>)
 8001d12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001d16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1e:	4b3b      	ldr	r3, [pc, #236]	; (8001e0c <HAL_UART_MspInit+0x160>)
 8001d20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d24:	4a39      	ldr	r2, [pc, #228]	; (8001e0c <HAL_UART_MspInit+0x160>)
 8001d26:	f043 0304 	orr.w	r3, r3, #4
 8001d2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d2e:	4b37      	ldr	r3, [pc, #220]	; (8001e0c <HAL_UART_MspInit+0x160>)
 8001d30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 8001d3c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001d56:	2308      	movs	r3, #8
 8001d58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d5c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d60:	4619      	mov	r1, r3
 8001d62:	482b      	ldr	r0, [pc, #172]	; (8001e10 <HAL_UART_MspInit+0x164>)
 8001d64:	f000 fc1e 	bl	80025a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001d68:	e04a      	b.n	8001e00 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART1)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a29      	ldr	r2, [pc, #164]	; (8001e14 <HAL_UART_MspInit+0x168>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d145      	bne.n	8001e00 <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001d74:	f04f 0201 	mov.w	r2, #1
 8001d78:	f04f 0300 	mov.w	r3, #0
 8001d7c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001d80:	2300      	movs	r3, #0
 8001d82:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d84:	f107 0318 	add.w	r3, r7, #24
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f004 f895 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8001d94:	f7ff fb90 	bl	80014b8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d98:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <HAL_UART_MspInit+0x160>)
 8001d9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001d9e:	4a1b      	ldr	r2, [pc, #108]	; (8001e0c <HAL_UART_MspInit+0x160>)
 8001da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001da8:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <HAL_UART_MspInit+0x160>)
 8001daa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db6:	4b15      	ldr	r3, [pc, #84]	; (8001e0c <HAL_UART_MspInit+0x160>)
 8001db8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dbc:	4a13      	ldr	r2, [pc, #76]	; (8001e0c <HAL_UART_MspInit+0x160>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <HAL_UART_MspInit+0x160>)
 8001dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	60bb      	str	r3, [r7, #8]
 8001dd2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8001dd4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001dd8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ddc:	2302      	movs	r3, #2
 8001dde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de8:	2300      	movs	r3, #0
 8001dea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dee:	2307      	movs	r3, #7
 8001df0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4807      	ldr	r0, [pc, #28]	; (8001e18 <HAL_UART_MspInit+0x16c>)
 8001dfc:	f000 fbd2 	bl	80025a4 <HAL_GPIO_Init>
}
 8001e00:	bf00      	nop
 8001e02:	37f8      	adds	r7, #248	; 0xf8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	40004c00 	.word	0x40004c00
 8001e0c:	46020c00 	.word	0x46020c00
 8001e10:	42020800 	.word	0x42020800
 8001e14:	40013800 	.word	0x40013800
 8001e18:	42020000 	.word	0x42020000

08001e1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b0be      	sub	sp, #248	; 0xf8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e24:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001e28:	2200      	movs	r2, #0
 8001e2a:	601a      	str	r2, [r3, #0]
 8001e2c:	605a      	str	r2, [r3, #4]
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	60da      	str	r2, [r3, #12]
 8001e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e34:	f107 0318 	add.w	r3, r7, #24
 8001e38:	22c8      	movs	r2, #200	; 0xc8
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f007 ff55 	bl	8009cec <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a38      	ldr	r2, [pc, #224]	; (8001f28 <HAL_PCD_MspInit+0x10c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d169      	bne.n	8001f20 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001e4c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e50:	f04f 0300 	mov.w	r3, #0
 8001e54:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e5e:	f107 0318 	add.w	r3, r7, #24
 8001e62:	4618      	mov	r0, r3
 8001e64:	f004 f828 	bl	8005eb8 <HAL_RCCEx_PeriphCLKConfig>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001e6e:	f7ff fb23 	bl	80014b8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e72:	4b2e      	ldr	r3, [pc, #184]	; (8001f2c <HAL_PCD_MspInit+0x110>)
 8001e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e78:	4a2c      	ldr	r2, [pc, #176]	; (8001f2c <HAL_PCD_MspInit+0x110>)
 8001e7a:	f043 0301 	orr.w	r3, r3, #1
 8001e7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e82:	4b2a      	ldr	r3, [pc, #168]	; (8001f2c <HAL_PCD_MspInit+0x110>)
 8001e84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 8001e90:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001e94:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001eaa:	230a      	movs	r3, #10
 8001eac:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	481e      	ldr	r0, [pc, #120]	; (8001f30 <HAL_PCD_MspInit+0x114>)
 8001eb8:	f000 fb74 	bl	80025a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001ebc:	4b1b      	ldr	r3, [pc, #108]	; (8001f2c <HAL_PCD_MspInit+0x110>)
 8001ebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ec2:	4a1a      	ldr	r2, [pc, #104]	; (8001f2c <HAL_PCD_MspInit+0x110>)
 8001ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ecc:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <HAL_PCD_MspInit+0x110>)
 8001ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eda:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <HAL_PCD_MspInit+0x110>)
 8001edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d119      	bne.n	8001f1c <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee8:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <HAL_PCD_MspInit+0x110>)
 8001eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eee:	4a0f      	ldr	r2, [pc, #60]	; (8001f2c <HAL_PCD_MspInit+0x110>)
 8001ef0:	f043 0304 	orr.w	r3, r3, #4
 8001ef4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <HAL_PCD_MspInit+0x110>)
 8001efa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efe:	f003 0304 	and.w	r3, r3, #4
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001f06:	f002 fd0b 	bl	8004920 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f0a:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <HAL_PCD_MspInit+0x110>)
 8001f0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f10:	4a06      	ldr	r2, [pc, #24]	; (8001f2c <HAL_PCD_MspInit+0x110>)
 8001f12:	f023 0304 	bic.w	r3, r3, #4
 8001f16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001f1a:	e001      	b.n	8001f20 <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 8001f1c:	f002 fd00 	bl	8004920 <HAL_PWREx_EnableVddUSB>
}
 8001f20:	bf00      	nop
 8001f22:	37f8      	adds	r7, #248	; 0xf8
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	42040000 	.word	0x42040000
 8001f2c:	46020c00 	.word	0x46020c00
 8001f30:	42020000 	.word	0x42020000

08001f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f38:	e7fe      	b.n	8001f38 <NMI_Handler+0x4>

08001f3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f3e:	e7fe      	b.n	8001f3e <HardFault_Handler+0x4>

08001f40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <MemManage_Handler+0x4>

08001f46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f4a:	e7fe      	b.n	8001f4a <BusFault_Handler+0x4>

08001f4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <UsageFault_Handler+0x4>

08001f52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f80:	f000 f96c 	bl	800225c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f84:	bf00      	nop
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
 8001f98:	e00a      	b.n	8001fb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f9a:	e000      	b.n	8001f9e <_read+0x16>
 8001f9c:	bf00      	nop
 8001f9e:	4601      	mov	r1, r0
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	60ba      	str	r2, [r7, #8]
 8001fa6:	b2ca      	uxtb	r2, r1
 8001fa8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	3301      	adds	r3, #1
 8001fae:	617b      	str	r3, [r7, #20]
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	dbf0      	blt.n	8001f9a <_read+0x12>
	}

return len;
 8001fb8:	687b      	ldr	r3, [r7, #4]
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	60f8      	str	r0, [r7, #12]
 8001fca:	60b9      	str	r1, [r7, #8]
 8001fcc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	617b      	str	r3, [r7, #20]
 8001fd2:	e009      	b.n	8001fe8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	1c5a      	adds	r2, r3, #1
 8001fd8:	60ba      	str	r2, [r7, #8]
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	e000      	b.n	8001fe2 <_write+0x20>
 8001fe0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	dbf1      	blt.n	8001fd4 <_write+0x12>
	}
	return len;
 8001ff0:	687b      	ldr	r3, [r7, #4]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3718      	adds	r7, #24
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}

08001ffa <_close>:

int _close(int file)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	b083      	sub	sp, #12
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	6078      	str	r0, [r7, #4]
	return -1;
 8002002:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002006:	4618      	mov	r0, r3
 8002008:	370c      	adds	r7, #12
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002012:	b480      	push	{r7}
 8002014:	b083      	sub	sp, #12
 8002016:	af00      	add	r7, sp, #0
 8002018:	6078      	str	r0, [r7, #4]
 800201a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002022:	605a      	str	r2, [r3, #4]
	return 0;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <_isatty>:

int _isatty(int file)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
	return 1;
 800203a:	2301      	movs	r3, #1
}
 800203c:	4618      	mov	r0, r3
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	607a      	str	r2, [r7, #4]
	return 0;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3714      	adds	r7, #20
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800206c:	4a14      	ldr	r2, [pc, #80]	; (80020c0 <_sbrk+0x5c>)
 800206e:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <_sbrk+0x60>)
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <_sbrk+0x64>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d102      	bne.n	8002086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002080:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <_sbrk+0x64>)
 8002082:	4a12      	ldr	r2, [pc, #72]	; (80020cc <_sbrk+0x68>)
 8002084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <_sbrk+0x64>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	429a      	cmp	r2, r3
 8002092:	d207      	bcs.n	80020a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002094:	f007 fe00 	bl	8009c98 <__errno>
 8002098:	4603      	mov	r3, r0
 800209a:	220c      	movs	r2, #12
 800209c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800209e:	f04f 33ff 	mov.w	r3, #4294967295
 80020a2:	e009      	b.n	80020b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <_sbrk+0x64>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020aa:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <_sbrk+0x64>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	4a05      	ldr	r2, [pc, #20]	; (80020c8 <_sbrk+0x64>)
 80020b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020b6:	68fb      	ldr	r3, [r7, #12]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	200c0000 	.word	0x200c0000
 80020c4:	00000400 	.word	0x00000400
 80020c8:	20000958 	.word	0x20000958
 80020cc:	20000998 	.word	0x20000998

080020d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020d4:	4b18      	ldr	r3, [pc, #96]	; (8002138 <SystemInit+0x68>)
 80020d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020da:	4a17      	ldr	r2, [pc, #92]	; (8002138 <SystemInit+0x68>)
 80020dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 80020e4:	4b15      	ldr	r3, [pc, #84]	; (800213c <SystemInit+0x6c>)
 80020e6:	2201      	movs	r2, #1
 80020e8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 80020ea:	4b14      	ldr	r3, [pc, #80]	; (800213c <SystemInit+0x6c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <SystemInit+0x6c>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 80020f6:	4b11      	ldr	r3, [pc, #68]	; (800213c <SystemInit+0x6c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 80020fc:	4b0f      	ldr	r3, [pc, #60]	; (800213c <SystemInit+0x6c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a0e      	ldr	r2, [pc, #56]	; (800213c <SystemInit+0x6c>)
 8002102:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002106:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800210a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <SystemInit+0x6c>)
 800210e:	2200      	movs	r2, #0
 8002110:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002112:	4b0a      	ldr	r3, [pc, #40]	; (800213c <SystemInit+0x6c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a09      	ldr	r2, [pc, #36]	; (800213c <SystemInit+0x6c>)
 8002118:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800211c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <SystemInit+0x6c>)
 8002120:	2200      	movs	r2, #0
 8002122:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002124:	4b04      	ldr	r3, [pc, #16]	; (8002138 <SystemInit+0x68>)
 8002126:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800212a:	609a      	str	r2, [r3, #8]
  #endif
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	e000ed00 	.word	0xe000ed00
 800213c:	46020c00 	.word	0x46020c00

08002140 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002140:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002178 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002144:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002146:	e003      	b.n	8002150 <LoopCopyDataInit>

08002148 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002148:	4b0c      	ldr	r3, [pc, #48]	; (800217c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800214a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800214c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800214e:	3104      	adds	r1, #4

08002150 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002150:	480b      	ldr	r0, [pc, #44]	; (8002180 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002152:	4b0c      	ldr	r3, [pc, #48]	; (8002184 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002154:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002156:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002158:	d3f6      	bcc.n	8002148 <CopyDataInit>
	ldr	r2, =_sbss
 800215a:	4a0b      	ldr	r2, [pc, #44]	; (8002188 <LoopForever+0x12>)
	b	LoopFillZerobss
 800215c:	e002      	b.n	8002164 <LoopFillZerobss>

0800215e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800215e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002160:	f842 3b04 	str.w	r3, [r2], #4

08002164 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002164:	4b09      	ldr	r3, [pc, #36]	; (800218c <LoopForever+0x16>)
	cmp	r2, r3
 8002166:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002168:	d3f9      	bcc.n	800215e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800216a:	f7ff ffb1 	bl	80020d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800216e:	f007 fd99 	bl	8009ca4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002172:	f7fe fa47 	bl	8000604 <main>

08002176 <LoopForever>:

LoopForever:
    b LoopForever
 8002176:	e7fe      	b.n	8002176 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002178:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800217c:	0800ae0c 	.word	0x0800ae0c
	ldr	r0, =_sdata
 8002180:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002184:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8002188:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 800218c:	20000994 	.word	0x20000994

08002190 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002190:	e7fe      	b.n	8002190 <ADC1_IRQHandler>
	...

08002194 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002198:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <HAL_Init+0x4c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a10      	ldr	r2, [pc, #64]	; (80021e0 <HAL_Init+0x4c>)
 800219e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021a4:	2003      	movs	r0, #3
 80021a6:	f000 f94f 	bl	8002448 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80021aa:	f003 fca1 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 80021ae:	4602      	mov	r2, r0
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <HAL_Init+0x50>)
 80021b2:	6a1b      	ldr	r3, [r3, #32]
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	490b      	ldr	r1, [pc, #44]	; (80021e8 <HAL_Init+0x54>)
 80021ba:	5ccb      	ldrb	r3, [r1, r3]
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
 80021c0:	4a0a      	ldr	r2, [pc, #40]	; (80021ec <HAL_Init+0x58>)
 80021c2:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021c4:	200f      	movs	r0, #15
 80021c6:	f000 f813 	bl	80021f0 <HAL_InitTick>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 80021d0:	2301      	movs	r3, #1
 80021d2:	e002      	b.n	80021da <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80021d4:	f7ff f976 	bl	80014c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	40022000 	.word	0x40022000
 80021e4:	46020c00 	.word	0x46020c00
 80021e8:	0800ac64 	.word	0x0800ac64
 80021ec:	20000000 	.word	0x20000000

080021f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 80021f8:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_InitTick+0x60>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e021      	b.n	8002248 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <HAL_InitTick+0x64>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_InitTick+0x60>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002212:	fbb3 f3f1 	udiv	r3, r3, r1
 8002216:	fbb2 f3f3 	udiv	r3, r2, r3
 800221a:	4618      	mov	r0, r3
 800221c:	f000 f939 	bl	8002492 <HAL_SYSTICK_Config>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e00e      	b.n	8002248 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b0f      	cmp	r3, #15
 800222e:	d80a      	bhi.n	8002246 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002230:	2200      	movs	r2, #0
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	f04f 30ff 	mov.w	r0, #4294967295
 8002238:	f000 f911 	bl	800245e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800223c:	4a06      	ldr	r2, [pc, #24]	; (8002258 <HAL_InitTick+0x68>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
 8002244:	e000      	b.n	8002248 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
}
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	20000008 	.word	0x20000008
 8002254:	20000000 	.word	0x20000000
 8002258:	20000004 	.word	0x20000004

0800225c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_IncTick+0x20>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_IncTick+0x24>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4413      	add	r3, r2
 800226c:	4a04      	ldr	r2, [pc, #16]	; (8002280 <HAL_IncTick+0x24>)
 800226e:	6013      	str	r3, [r2, #0]
}
 8002270:	bf00      	nop
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	20000008 	.word	0x20000008
 8002280:	2000095c 	.word	0x2000095c

08002284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return uwTick;
 8002288:	4b03      	ldr	r3, [pc, #12]	; (8002298 <HAL_GetTick+0x14>)
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	2000095c 	.word	0x2000095c

0800229c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a4:	f7ff ffee 	bl	8002284 <HAL_GetTick>
 80022a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b4:	d005      	beq.n	80022c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022b6:	4b0a      	ldr	r3, [pc, #40]	; (80022e0 <HAL_Delay+0x44>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	461a      	mov	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4413      	add	r3, r2
 80022c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022c2:	bf00      	nop
 80022c4:	f7ff ffde 	bl	8002284 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	68fa      	ldr	r2, [r7, #12]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d8f7      	bhi.n	80022c4 <HAL_Delay+0x28>
  {
  }
}
 80022d4:	bf00      	nop
 80022d6:	bf00      	nop
 80022d8:	3710      	adds	r7, #16
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000008 	.word	0x20000008

080022e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f003 0307 	and.w	r3, r3, #7
 80022f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <__NVIC_SetPriorityGrouping+0x44>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002300:	4013      	ands	r3, r2
 8002302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800230c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002316:	4a04      	ldr	r2, [pc, #16]	; (8002328 <__NVIC_SetPriorityGrouping+0x44>)
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	60d3      	str	r3, [r2, #12]
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002330:	4b04      	ldr	r3, [pc, #16]	; (8002344 <__NVIC_GetPriorityGrouping+0x18>)
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	0a1b      	lsrs	r3, r3, #8
 8002336:	f003 0307 	and.w	r3, r3, #7
}
 800233a:	4618      	mov	r0, r3
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	e000ed00 	.word	0xe000ed00

08002348 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	6039      	str	r1, [r7, #0]
 8002352:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002354:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002358:	2b00      	cmp	r3, #0
 800235a:	db0a      	blt.n	8002372 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2da      	uxtb	r2, r3
 8002360:	490c      	ldr	r1, [pc, #48]	; (8002394 <__NVIC_SetPriority+0x4c>)
 8002362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002366:	0112      	lsls	r2, r2, #4
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	440b      	add	r3, r1
 800236c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002370:	e00a      	b.n	8002388 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4908      	ldr	r1, [pc, #32]	; (8002398 <__NVIC_SetPriority+0x50>)
 8002378:	79fb      	ldrb	r3, [r7, #7]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	3b04      	subs	r3, #4
 8002380:	0112      	lsls	r2, r2, #4
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	440b      	add	r3, r1
 8002386:	761a      	strb	r2, [r3, #24]
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000e100 	.word	0xe000e100
 8002398:	e000ed00 	.word	0xe000ed00

0800239c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800239c:	b480      	push	{r7}
 800239e:	b089      	sub	sp, #36	; 0x24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	f1c3 0307 	rsb	r3, r3, #7
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	bf28      	it	cs
 80023ba:	2304      	movcs	r3, #4
 80023bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	3304      	adds	r3, #4
 80023c2:	2b06      	cmp	r3, #6
 80023c4:	d902      	bls.n	80023cc <NVIC_EncodePriority+0x30>
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	3b03      	subs	r3, #3
 80023ca:	e000      	b.n	80023ce <NVIC_EncodePriority+0x32>
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023d0:	f04f 32ff 	mov.w	r2, #4294967295
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	401a      	ands	r2, r3
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023e4:	f04f 31ff 	mov.w	r1, #4294967295
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	fa01 f303 	lsl.w	r3, r1, r3
 80023ee:	43d9      	mvns	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f4:	4313      	orrs	r3, r2
         );
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	; 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3b01      	subs	r3, #1
 8002410:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002414:	d301      	bcc.n	800241a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002416:	2301      	movs	r3, #1
 8002418:	e00f      	b.n	800243a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800241a:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <SysTick_Config+0x40>)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	3b01      	subs	r3, #1
 8002420:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002422:	210f      	movs	r1, #15
 8002424:	f04f 30ff 	mov.w	r0, #4294967295
 8002428:	f7ff ff8e 	bl	8002348 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800242c:	4b05      	ldr	r3, [pc, #20]	; (8002444 <SysTick_Config+0x40>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002432:	4b04      	ldr	r3, [pc, #16]	; (8002444 <SysTick_Config+0x40>)
 8002434:	2207      	movs	r2, #7
 8002436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	e000e010 	.word	0xe000e010

08002448 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002450:	6878      	ldr	r0, [r7, #4]
 8002452:	f7ff ff47 	bl	80022e4 <__NVIC_SetPriorityGrouping>
}
 8002456:	bf00      	nop
 8002458:	3708      	adds	r7, #8
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}

0800245e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800245e:	b580      	push	{r7, lr}
 8002460:	b086      	sub	sp, #24
 8002462:	af00      	add	r7, sp, #0
 8002464:	4603      	mov	r3, r0
 8002466:	60b9      	str	r1, [r7, #8]
 8002468:	607a      	str	r2, [r7, #4]
 800246a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800246c:	f7ff ff5e 	bl	800232c <__NVIC_GetPriorityGrouping>
 8002470:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	6978      	ldr	r0, [r7, #20]
 8002478:	f7ff ff90 	bl	800239c <NVIC_EncodePriority>
 800247c:	4602      	mov	r2, r0
 800247e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002482:	4611      	mov	r1, r2
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff ff5f 	bl	8002348 <__NVIC_SetPriority>
}
 800248a:	bf00      	nop
 800248c:	3718      	adds	r7, #24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}

08002492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002492:	b580      	push	{r7, lr}
 8002494:	b082      	sub	sp, #8
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f7ff ffb2 	bl	8002404 <SysTick_Config>
 80024a0:	4603      	mov	r3, r0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b084      	sub	sp, #16
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80024b2:	f7ff fee7 	bl	8002284 <HAL_GetTick>
 80024b6:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e06b      	b.n	800259a <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d008      	beq.n	80024e0 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2220      	movs	r2, #32
 80024d2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e05c      	b.n	800259a <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	695a      	ldr	r2, [r3, #20]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f042 0204 	orr.w	r2, r2, #4
 80024ee:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2205      	movs	r2, #5
 80024f4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 80024f8:	e020      	b.n	800253c <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 80024fa:	f7ff fec3 	bl	8002284 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	2b05      	cmp	r3, #5
 8002506:	d919      	bls.n	800253c <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250c:	f043 0210 	orr.w	r2, r3, #16
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2203      	movs	r2, #3
 8002518:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002524:	2b00      	cmp	r3, #0
 8002526:	d003      	beq.n	8002530 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800252c:	2201      	movs	r2, #1
 800252e:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e02e      	b.n	800259a <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d0d7      	beq.n	80024fa <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	695a      	ldr	r2, [r3, #20]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f042 0202 	orr.w	r2, r2, #2
 8002558:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2204      	movs	r2, #4
 800255e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800256a:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257c:	2b00      	cmp	r3, #0
 800257e:	d007      	beq.n	8002590 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002584:	2201      	movs	r2, #1
 8002586:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2200      	movs	r2, #0
 800258e:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
	...

080025a4 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b089      	sub	sp, #36	; 0x24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80025ae:	2300      	movs	r3, #0
 80025b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80025b6:	e1ba      	b.n	800292e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	2101      	movs	r1, #1
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	fa01 f303 	lsl.w	r3, r1, r3
 80025c4:	4013      	ands	r3, r2
 80025c6:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 81aa 	beq.w	8002928 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	4a55      	ldr	r2, [pc, #340]	; (800272c <HAL_GPIO_Init+0x188>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d15d      	bne.n	8002698 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80025e2:	2201      	movs	r2, #1
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69fa      	ldr	r2, [r7, #28]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f003 0201 	and.w	r2, r3, #1
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69fa      	ldr	r2, [r7, #28]
 8002602:	4313      	orrs	r3, r2
 8002604:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800260c:	4a48      	ldr	r2, [pc, #288]	; (8002730 <HAL_GPIO_Init+0x18c>)
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002614:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002616:	4a46      	ldr	r2, [pc, #280]	; (8002730 <HAL_GPIO_Init+0x18c>)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	00db      	lsls	r3, r3, #3
 800261c:	4413      	add	r3, r2
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	08da      	lsrs	r2, r3, #3
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	3208      	adds	r2, #8
 800262a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800262e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	220f      	movs	r2, #15
 800263a:	fa02 f303 	lsl.w	r3, r2, r3
 800263e:	43db      	mvns	r3, r3
 8002640:	69fa      	ldr	r2, [r7, #28]
 8002642:	4013      	ands	r3, r2
 8002644:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	220b      	movs	r2, #11
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	4313      	orrs	r3, r2
 8002658:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	08da      	lsrs	r2, r3, #3
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	3208      	adds	r2, #8
 8002662:	69f9      	ldr	r1, [r7, #28]
 8002664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	2203      	movs	r2, #3
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	43db      	mvns	r3, r3
 800267a:	69fa      	ldr	r2, [r7, #28]
 800267c:	4013      	ands	r3, r2
 800267e:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	2202      	movs	r2, #2
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	69fa      	ldr	r2, [r7, #28]
 800268c:	4313      	orrs	r3, r2
 800268e:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	69fa      	ldr	r2, [r7, #28]
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	e067      	b.n	8002768 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d003      	beq.n	80026a8 <HAL_GPIO_Init+0x104>
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b12      	cmp	r3, #18
 80026a6:	d145      	bne.n	8002734 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	08da      	lsrs	r2, r3, #3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3208      	adds	r2, #8
 80026b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	220f      	movs	r2, #15
 80026c0:	fa02 f303 	lsl.w	r3, r2, r3
 80026c4:	43db      	mvns	r3, r3
 80026c6:	69fa      	ldr	r2, [r7, #28]
 80026c8:	4013      	ands	r3, r2
 80026ca:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f003 020f 	and.w	r2, r3, #15
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	f003 0307 	and.w	r3, r3, #7
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	69fa      	ldr	r2, [r7, #28]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	08da      	lsrs	r2, r3, #3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	3208      	adds	r2, #8
 80026ee:	69f9      	ldr	r1, [r7, #28]
 80026f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	2203      	movs	r2, #3
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	43db      	mvns	r3, r3
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	4013      	ands	r3, r2
 800270a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f003 0203 	and.w	r2, r3, #3
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	4313      	orrs	r3, r2
 8002720:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	69fa      	ldr	r2, [r7, #28]
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	e01e      	b.n	8002768 <HAL_GPIO_Init+0x1c4>
 800272a:	bf00      	nop
 800272c:	46020000 	.word	0x46020000
 8002730:	0800acbc 	.word	0x0800acbc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	2203      	movs	r2, #3
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	4013      	ands	r3, r2
 800274a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 0203 	and.w	r2, r3, #3
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	4313      	orrs	r3, r2
 8002760:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d00b      	beq.n	8002788 <HAL_GPIO_Init+0x1e4>
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d007      	beq.n	8002788 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800277c:	2b11      	cmp	r3, #17
 800277e:	d003      	beq.n	8002788 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	2b12      	cmp	r3, #18
 8002786:	d130      	bne.n	80027ea <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69fa      	ldr	r2, [r7, #28]
 800279c:	4013      	ands	r3, r2
 800279e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	69fa      	ldr	r2, [r7, #28]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	69fa      	ldr	r2, [r7, #28]
 80027b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80027be:	2201      	movs	r2, #1
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69fa      	ldr	r2, [r7, #28]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	091b      	lsrs	r3, r3, #4
 80027d4:	f003 0201 	and.w	r2, r3, #1
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	69fa      	ldr	r2, [r7, #28]
 80027e8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	2b03      	cmp	r3, #3
 80027f0:	d017      	beq.n	8002822 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	2203      	movs	r2, #3
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	43db      	mvns	r3, r3
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	4013      	ands	r3, r2
 8002808:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	689a      	ldr	r2, [r3, #8]
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	fa02 f303 	lsl.w	r3, r2, r3
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	4313      	orrs	r3, r2
 800281a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	69fa      	ldr	r2, [r7, #28]
 8002820:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d07c      	beq.n	8002928 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800282e:	4a47      	ldr	r2, [pc, #284]	; (800294c <HAL_GPIO_Init+0x3a8>)
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	089b      	lsrs	r3, r3, #2
 8002834:	3318      	adds	r3, #24
 8002836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800283a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	220f      	movs	r2, #15
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	69fa      	ldr	r2, [r7, #28]
 800284e:	4013      	ands	r3, r2
 8002850:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	0a9a      	lsrs	r2, r3, #10
 8002856:	4b3e      	ldr	r3, [pc, #248]	; (8002950 <HAL_GPIO_Init+0x3ac>)
 8002858:	4013      	ands	r3, r2
 800285a:	697a      	ldr	r2, [r7, #20]
 800285c:	f002 0203 	and.w	r2, r2, #3
 8002860:	00d2      	lsls	r2, r2, #3
 8002862:	4093      	lsls	r3, r2
 8002864:	69fa      	ldr	r2, [r7, #28]
 8002866:	4313      	orrs	r3, r2
 8002868:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800286a:	4938      	ldr	r1, [pc, #224]	; (800294c <HAL_GPIO_Init+0x3a8>)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	089b      	lsrs	r3, r3, #2
 8002870:	3318      	adds	r3, #24
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002878:	4b34      	ldr	r3, [pc, #208]	; (800294c <HAL_GPIO_Init+0x3a8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	43db      	mvns	r3, r3
 8002882:	69fa      	ldr	r2, [r7, #28]
 8002884:	4013      	ands	r3, r2
 8002886:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8002894:	69fa      	ldr	r2, [r7, #28]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	4313      	orrs	r3, r2
 800289a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800289c:	4a2b      	ldr	r2, [pc, #172]	; (800294c <HAL_GPIO_Init+0x3a8>)
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80028a2:	4b2a      	ldr	r3, [pc, #168]	; (800294c <HAL_GPIO_Init+0x3a8>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	4013      	ands	r3, r2
 80028b0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80028be:	69fa      	ldr	r2, [r7, #28]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80028c6:	4a21      	ldr	r2, [pc, #132]	; (800294c <HAL_GPIO_Init+0x3a8>)
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80028cc:	4b1f      	ldr	r3, [pc, #124]	; (800294c <HAL_GPIO_Init+0x3a8>)
 80028ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028d2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	43db      	mvns	r3, r3
 80028d8:	69fa      	ldr	r2, [r7, #28]
 80028da:	4013      	ands	r3, r2
 80028dc:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d003      	beq.n	80028f2 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80028ea:	69fa      	ldr	r2, [r7, #28]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80028f2:	4a16      	ldr	r2, [pc, #88]	; (800294c <HAL_GPIO_Init+0x3a8>)
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80028fa:	4b14      	ldr	r3, [pc, #80]	; (800294c <HAL_GPIO_Init+0x3a8>)
 80028fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002900:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	43db      	mvns	r3, r3
 8002906:	69fa      	ldr	r2, [r7, #28]
 8002908:	4013      	ands	r3, r2
 800290a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002918:	69fa      	ldr	r2, [r7, #28]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4313      	orrs	r3, r2
 800291e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002920:	4a0a      	ldr	r2, [pc, #40]	; (800294c <HAL_GPIO_Init+0x3a8>)
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	3301      	adds	r3, #1
 800292c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	fa22 f303 	lsr.w	r3, r2, r3
 8002938:	2b00      	cmp	r3, #0
 800293a:	f47f ae3d 	bne.w	80025b8 <HAL_GPIO_Init+0x14>
  }
}
 800293e:	bf00      	nop
 8002940:	bf00      	nop
 8002942:	3724      	adds	r7, #36	; 0x24
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	46022000 	.word	0x46022000
 8002950:	002f7f7f 	.word	0x002f7f7f

08002954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	807b      	strh	r3, [r7, #2]
 8002960:	4613      	mov	r3, r2
 8002962:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002964:	787b      	ldrb	r3, [r7, #1]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800296a:	887a      	ldrh	r2, [r7, #2]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002970:	e002      	b.n	8002978 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002972:	887a      	ldrh	r2, [r7, #2]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002978:	bf00      	nop
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e081      	b.n	8002a9a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7fe fe0e 	bl	80015cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2224      	movs	r2, #36	; 0x24
 80029b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f022 0201 	bic.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d107      	bne.n	80029fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	e006      	b.n	8002a0c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689a      	ldr	r2, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002a0a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d104      	bne.n	8002a1e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a1c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6812      	ldr	r2, [r2, #0]
 8002a28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a30:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a40:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69d9      	ldr	r1, [r3, #28]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a1a      	ldr	r2, [r3, #32]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f042 0201 	orr.w	r2, r2, #1
 8002a7a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2220      	movs	r2, #32
 8002a86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
	...

08002aa4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af02      	add	r7, sp, #8
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	4608      	mov	r0, r1
 8002aae:	4611      	mov	r1, r2
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	817b      	strh	r3, [r7, #10]
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	813b      	strh	r3, [r7, #8]
 8002aba:	4613      	mov	r3, r2
 8002abc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	f040 80fd 	bne.w	8002cc6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d002      	beq.n	8002ad8 <HAL_I2C_Mem_Read+0x34>
 8002ad2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d105      	bne.n	8002ae4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ade:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0f1      	b.n	8002cc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d101      	bne.n	8002af2 <HAL_I2C_Mem_Read+0x4e>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e0ea      	b.n	8002cc8 <HAL_I2C_Mem_Read+0x224>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2201      	movs	r2, #1
 8002af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002afa:	f7ff fbc3 	bl	8002284 <HAL_GetTick>
 8002afe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	2319      	movs	r3, #25
 8002b06:	2201      	movs	r2, #1
 8002b08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f95b 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0d5      	b.n	8002cc8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2222      	movs	r2, #34	; 0x22
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2240      	movs	r2, #64	; 0x40
 8002b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a3a      	ldr	r2, [r7, #32]
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b44:	88f8      	ldrh	r0, [r7, #6]
 8002b46:	893a      	ldrh	r2, [r7, #8]
 8002b48:	8979      	ldrh	r1, [r7, #10]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	9301      	str	r3, [sp, #4]
 8002b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b50:	9300      	str	r3, [sp, #0]
 8002b52:	4603      	mov	r3, r0
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	f000 f8bf 	bl	8002cd8 <I2C_RequestMemoryRead>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d005      	beq.n	8002b6c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e0ad      	b.n	8002cc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2bff      	cmp	r3, #255	; 0xff
 8002b74:	d90e      	bls.n	8002b94 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	22ff      	movs	r2, #255	; 0xff
 8002b7a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	8979      	ldrh	r1, [r7, #10]
 8002b84:	4b52      	ldr	r3, [pc, #328]	; (8002cd0 <HAL_I2C_Mem_Read+0x22c>)
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b8c:	68f8      	ldr	r0, [r7, #12]
 8002b8e:	f000 fac3 	bl	8003118 <I2C_TransferConfig>
 8002b92:	e00f      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b98:	b29a      	uxth	r2, r3
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	8979      	ldrh	r1, [r7, #10]
 8002ba6:	4b4a      	ldr	r3, [pc, #296]	; (8002cd0 <HAL_I2C_Mem_Read+0x22c>)
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bae:	68f8      	ldr	r0, [r7, #12]
 8002bb0:	f000 fab2 	bl	8003118 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bba:	2200      	movs	r2, #0
 8002bbc:	2104      	movs	r1, #4
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f000 f902 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d001      	beq.n	8002bce <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e07c      	b.n	8002cc8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d034      	beq.n	8002c74 <HAL_I2C_Mem_Read+0x1d0>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d130      	bne.n	8002c74 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c18:	2200      	movs	r2, #0
 8002c1a:	2180      	movs	r1, #128	; 0x80
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 f8d3 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e04d      	b.n	8002cc8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2bff      	cmp	r3, #255	; 0xff
 8002c34:	d90e      	bls.n	8002c54 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	22ff      	movs	r2, #255	; 0xff
 8002c3a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c40:	b2da      	uxtb	r2, r3
 8002c42:	8979      	ldrh	r1, [r7, #10]
 8002c44:	2300      	movs	r3, #0
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002c4c:	68f8      	ldr	r0, [r7, #12]
 8002c4e:	f000 fa63 	bl	8003118 <I2C_TransferConfig>
 8002c52:	e00f      	b.n	8002c74 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c62:	b2da      	uxtb	r2, r3
 8002c64:	8979      	ldrh	r1, [r7, #10]
 8002c66:	2300      	movs	r3, #0
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 fa52 	bl	8003118 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29b      	uxth	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d19a      	bne.n	8002bb4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 f920 	bl	8002ec8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e01a      	b.n	8002cc8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2220      	movs	r2, #32
 8002c98:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6859      	ldr	r1, [r3, #4]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	; (8002cd4 <HAL_I2C_Mem_Read+0x230>)
 8002ca6:	400b      	ands	r3, r1
 8002ca8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2220      	movs	r2, #32
 8002cae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e000      	b.n	8002cc8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002cc6:	2302      	movs	r3, #2
  }
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	80002400 	.word	0x80002400
 8002cd4:	fe00e800 	.word	0xfe00e800

08002cd8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af02      	add	r7, sp, #8
 8002cde:	60f8      	str	r0, [r7, #12]
 8002ce0:	4608      	mov	r0, r1
 8002ce2:	4611      	mov	r1, r2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	817b      	strh	r3, [r7, #10]
 8002cea:	460b      	mov	r3, r1
 8002cec:	813b      	strh	r3, [r7, #8]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	8979      	ldrh	r1, [r7, #10]
 8002cf8:	4b20      	ldr	r3, [pc, #128]	; (8002d7c <I2C_RequestMemoryRead+0xa4>)
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 fa0a 	bl	8003118 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d04:	69fa      	ldr	r2, [r7, #28]
 8002d06:	69b9      	ldr	r1, [r7, #24]
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f89d 	bl	8002e48 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e02c      	b.n	8002d72 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d18:	88fb      	ldrh	r3, [r7, #6]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d105      	bne.n	8002d2a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d1e:	893b      	ldrh	r3, [r7, #8]
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	629a      	str	r2, [r3, #40]	; 0x28
 8002d28:	e015      	b.n	8002d56 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d2a:	893b      	ldrh	r3, [r7, #8]
 8002d2c:	0a1b      	lsrs	r3, r3, #8
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	69b9      	ldr	r1, [r7, #24]
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f883 	bl	8002e48 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e012      	b.n	8002d72 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d4c:	893b      	ldrh	r3, [r7, #8]
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	2140      	movs	r1, #64	; 0x40
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f000 f831 	bl	8002dc8 <I2C_WaitOnFlagUntilTimeout>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d001      	beq.n	8002d70 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	80002000 	.word	0x80002000

08002d80 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d103      	bne.n	8002d9e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d007      	beq.n	8002dbc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0201 	orr.w	r2, r2, #1
 8002dba:	619a      	str	r2, [r3, #24]
  }
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dd8:	e022      	b.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de0:	d01e      	beq.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002de2:	f7ff fa4f 	bl	8002284 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d302      	bcc.n	8002df8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d113      	bne.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfc:	f043 0220 	orr.w	r2, r3, #32
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e00f      	b.n	8002e40 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699a      	ldr	r2, [r3, #24]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	bf0c      	ite	eq
 8002e30:	2301      	moveq	r3, #1
 8002e32:	2300      	movne	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d0cd      	beq.n	8002dda <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e3e:	2300      	movs	r3, #0
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e54:	e02c      	b.n	8002eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	68b9      	ldr	r1, [r7, #8]
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 f870 	bl	8002f40 <I2C_IsErrorOccurred>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d001      	beq.n	8002e6a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e02a      	b.n	8002ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e70:	d01e      	beq.n	8002eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e72:	f7ff fa07 	bl	8002284 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d302      	bcc.n	8002e88 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d113      	bne.n	8002eb0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8c:	f043 0220 	orr.w	r2, r3, #32
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2220      	movs	r2, #32
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e007      	b.n	8002ec0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	699b      	ldr	r3, [r3, #24]
 8002eb6:	f003 0302 	and.w	r3, r3, #2
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d1cb      	bne.n	8002e56 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b084      	sub	sp, #16
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ed4:	e028      	b.n	8002f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	68b9      	ldr	r1, [r7, #8]
 8002eda:	68f8      	ldr	r0, [r7, #12]
 8002edc:	f000 f830 	bl	8002f40 <I2C_IsErrorOccurred>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e026      	b.n	8002f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eea:	f7ff f9cb 	bl	8002284 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d302      	bcc.n	8002f00 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d113      	bne.n	8002f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f04:	f043 0220 	orr.w	r2, r3, #32
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e007      	b.n	8002f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d1cf      	bne.n	8002ed6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	; 0x28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d075      	beq.n	8003058 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2210      	movs	r2, #16
 8002f72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f74:	e056      	b.n	8003024 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d052      	beq.n	8003024 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f7e:	f7ff f981 	bl	8002284 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d302      	bcc.n	8002f94 <I2C_IsErrorOccurred+0x54>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d147      	bne.n	8003024 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fa6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fb6:	d12e      	bne.n	8003016 <I2C_IsErrorOccurred+0xd6>
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fbe:	d02a      	beq.n	8003016 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002fc0:	7cfb      	ldrb	r3, [r7, #19]
 8002fc2:	2b20      	cmp	r3, #32
 8002fc4:	d027      	beq.n	8003016 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002fd4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002fd6:	f7ff f955 	bl	8002284 <HAL_GetTick>
 8002fda:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fdc:	e01b      	b.n	8003016 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fde:	f7ff f951 	bl	8002284 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b19      	cmp	r3, #25
 8002fea:	d914      	bls.n	8003016 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff0:	f043 0220 	orr.w	r2, r3, #32
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	f003 0320 	and.w	r3, r3, #32
 8003020:	2b20      	cmp	r3, #32
 8003022:	d1dc      	bne.n	8002fde <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f003 0320 	and.w	r3, r3, #32
 800302e:	2b20      	cmp	r3, #32
 8003030:	d003      	beq.n	800303a <I2C_IsErrorOccurred+0xfa>
 8003032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003036:	2b00      	cmp	r3, #0
 8003038:	d09d      	beq.n	8002f76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800303a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800303e:	2b00      	cmp	r3, #0
 8003040:	d103      	bne.n	800304a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2220      	movs	r2, #32
 8003048:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800304a:	6a3b      	ldr	r3, [r7, #32]
 800304c:	f043 0304 	orr.w	r3, r3, #4
 8003050:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00b      	beq.n	8003082 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f44f 7280 	mov.w	r2, #256	; 0x100
 800307a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00b      	beq.n	80030a4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	f043 0308 	orr.w	r3, r3, #8
 8003092:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800309c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00b      	beq.n	80030c6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	f043 0302 	orr.w	r3, r3, #2
 80030b4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80030c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d01c      	beq.n	8003108 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f7ff fe56 	bl	8002d80 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6859      	ldr	r1, [r3, #4]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <I2C_IsErrorOccurred+0x1d4>)
 80030e0:	400b      	ands	r3, r1
 80030e2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	431a      	orrs	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2220      	movs	r2, #32
 80030f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800310c:	4618      	mov	r0, r3
 800310e:	3728      	adds	r7, #40	; 0x28
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}
 8003114:	fe00e800 	.word	0xfe00e800

08003118 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003118:	b480      	push	{r7}
 800311a:	b087      	sub	sp, #28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	607b      	str	r3, [r7, #4]
 8003122:	460b      	mov	r3, r1
 8003124:	817b      	strh	r3, [r7, #10]
 8003126:	4613      	mov	r3, r2
 8003128:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800312a:	897b      	ldrh	r3, [r7, #10]
 800312c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003130:	7a7b      	ldrb	r3, [r7, #9]
 8003132:	041b      	lsls	r3, r3, #16
 8003134:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003138:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	4313      	orrs	r3, r2
 8003142:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003146:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	0d5b      	lsrs	r3, r3, #21
 8003152:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003156:	4b08      	ldr	r3, [pc, #32]	; (8003178 <I2C_TransferConfig+0x60>)
 8003158:	430b      	orrs	r3, r1
 800315a:	43db      	mvns	r3, r3
 800315c:	ea02 0103 	and.w	r1, r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800316a:	bf00      	nop
 800316c:	371c      	adds	r7, #28
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	03ff63ff 	.word	0x03ff63ff

0800317c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b20      	cmp	r3, #32
 8003190:	d138      	bne.n	8003204 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800319c:	2302      	movs	r3, #2
 800319e:	e032      	b.n	8003206 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2224      	movs	r2, #36	; 0x24
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0201 	bic.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6819      	ldr	r1, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003200:	2300      	movs	r3, #0
 8003202:	e000      	b.n	8003206 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003204:	2302      	movs	r3, #2
  }
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003212:	b480      	push	{r7}
 8003214:	b085      	sub	sp, #20
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003222:	b2db      	uxtb	r3, r3
 8003224:	2b20      	cmp	r3, #32
 8003226:	d139      	bne.n	800329c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800322e:	2b01      	cmp	r3, #1
 8003230:	d101      	bne.n	8003236 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003232:	2302      	movs	r3, #2
 8003234:	e033      	b.n	800329e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2201      	movs	r2, #1
 800323a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2224      	movs	r2, #36	; 0x24
 8003242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0201 	bic.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003264:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	021b      	lsls	r3, r3, #8
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	4313      	orrs	r3, r2
 800326e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f042 0201 	orr.w	r2, r2, #1
 8003286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2220      	movs	r2, #32
 800328c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	e000      	b.n	800329e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800329c:	2302      	movs	r3, #2
  }
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
	...

080032ac <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d102      	bne.n	80032c4 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
 80032c2:	e141      	b.n	8003548 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 f947 	bl	800355c <MDF_GetHandleNumberFromInstance>
 80032ce:	4603      	mov	r3, r0
 80032d0:	4a86      	ldr	r2, [pc, #536]	; (80034ec <HAL_MDF_Init+0x240>)
 80032d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	73fb      	strb	r3, [r7, #15]
 80032de:	e133      	b.n	8003548 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7fe f909 	bl	80014f8 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 80032e6:	4b82      	ldr	r3, [pc, #520]	; (80034f0 <HAL_MDF_Init+0x244>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d11d      	bne.n	800332a <HAL_MDF_Init+0x7e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a80      	ldr	r2, [pc, #512]	; (80034f4 <HAL_MDF_Init+0x248>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d023      	beq.n	8003340 <HAL_MDF_Init+0x94>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a7e      	ldr	r2, [pc, #504]	; (80034f8 <HAL_MDF_Init+0x24c>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d01e      	beq.n	8003340 <HAL_MDF_Init+0x94>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a7d      	ldr	r2, [pc, #500]	; (80034fc <HAL_MDF_Init+0x250>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d019      	beq.n	8003340 <HAL_MDF_Init+0x94>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a7b      	ldr	r2, [pc, #492]	; (8003500 <HAL_MDF_Init+0x254>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d014      	beq.n	8003340 <HAL_MDF_Init+0x94>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a7a      	ldr	r2, [pc, #488]	; (8003504 <HAL_MDF_Init+0x258>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00f      	beq.n	8003340 <HAL_MDF_Init+0x94>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a78      	ldr	r2, [pc, #480]	; (8003508 <HAL_MDF_Init+0x25c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00a      	beq.n	8003340 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 800332a:	4b78      	ldr	r3, [pc, #480]	; (800350c <HAL_MDF_Init+0x260>)
 800332c:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 800332e:	2b00      	cmp	r3, #0
 8003330:	f040 8090 	bne.w	8003454 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a75      	ldr	r2, [pc, #468]	; (8003510 <HAL_MDF_Init+0x264>)
 800333a:	4293      	cmp	r3, r2
 800333c:	f040 808a 	bne.w	8003454 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a72      	ldr	r2, [pc, #456]	; (8003510 <HAL_MDF_Init+0x264>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d101      	bne.n	800334e <HAL_MDF_Init+0xa2>
 800334a:	4b72      	ldr	r3, [pc, #456]	; (8003514 <HAL_MDF_Init+0x268>)
 800334c:	e000      	b.n	8003350 <HAL_MDF_Init+0xa4>
 800334e:	4b72      	ldr	r3, [pc, #456]	; (8003518 <HAL_MDF_Init+0x26c>)
 8003350:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	da02      	bge.n	8003360 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	73fb      	strb	r3, [r7, #15]
 800335e:	e079      	b.n	8003454 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a63      	ldr	r2, [pc, #396]	; (80034f4 <HAL_MDF_Init+0x248>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d018      	beq.n	800339c <HAL_MDF_Init+0xf0>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a62      	ldr	r2, [pc, #392]	; (80034f8 <HAL_MDF_Init+0x24c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d013      	beq.n	800339c <HAL_MDF_Init+0xf0>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a60      	ldr	r2, [pc, #384]	; (80034fc <HAL_MDF_Init+0x250>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d00e      	beq.n	800339c <HAL_MDF_Init+0xf0>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a5f      	ldr	r2, [pc, #380]	; (8003500 <HAL_MDF_Init+0x254>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d009      	beq.n	800339c <HAL_MDF_Init+0xf0>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a5d      	ldr	r2, [pc, #372]	; (8003504 <HAL_MDF_Init+0x258>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d004      	beq.n	800339c <HAL_MDF_Init+0xf0>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a5c      	ldr	r2, [pc, #368]	; (8003508 <HAL_MDF_Init+0x25c>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d10d      	bne.n	80033b8 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	431a      	orrs	r2, r3
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2200      	movs	r2, #0
 80033bc:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	061b      	lsls	r3, r3, #24
 80033ca:	431a      	orrs	r2, r3
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	7b1b      	ldrb	r3, [r3, #12]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d137      	bne.n	8003448 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	695b      	ldr	r3, [r3, #20]
 80033e0:	3b01      	subs	r3, #1
 80033e2:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 80033e8:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 80033f0:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 80033f2:	431a      	orrs	r2, r3
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	7e1b      	ldrb	r3, [r3, #24]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d123      	bne.n	8003448 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a3b      	ldr	r2, [pc, #236]	; (80034f4 <HAL_MDF_Init+0x248>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d012      	beq.n	8003430 <HAL_MDF_Init+0x184>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a3a      	ldr	r2, [pc, #232]	; (80034f8 <HAL_MDF_Init+0x24c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00d      	beq.n	8003430 <HAL_MDF_Init+0x184>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a38      	ldr	r2, [pc, #224]	; (80034fc <HAL_MDF_Init+0x250>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d008      	beq.n	8003430 <HAL_MDF_Init+0x184>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a37      	ldr	r2, [pc, #220]	; (8003500 <HAL_MDF_Init+0x254>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d003      	beq.n	8003430 <HAL_MDF_Init+0x184>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a35      	ldr	r2, [pc, #212]	; (8003504 <HAL_MDF_Init+0x258>)
 800342e:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	685a      	ldr	r2, [r3, #4]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 800343c:	430b      	orrs	r3, r1
 800343e:	4313      	orrs	r3, r2
 8003440:	f043 0210 	orr.w	r2, r3, #16
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f043 0201 	orr.w	r2, r3, #1
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8003454:	7bfb      	ldrb	r3, [r7, #15]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d128      	bne.n	80034ac <HAL_MDF_Init+0x200>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003460:	2b01      	cmp	r3, #1
 8003462:	d123      	bne.n	80034ac <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	da02      	bge.n	8003474 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	73fb      	strb	r3, [r7, #15]
 8003472:	e01b      	b.n	80034ac <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	6819      	ldr	r1, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003486:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 800348c:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003492:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d14a      	bne.n	8003548 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 021f 	bic.w	r2, r2, #31
 80034c0:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6859      	ldr	r1, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a0d      	ldr	r2, [pc, #52]	; (8003510 <HAL_MDF_Init+0x264>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d11e      	bne.n	800351c <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 80034de:	4b0b      	ldr	r3, [pc, #44]	; (800350c <HAL_MDF_Init+0x260>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3301      	adds	r3, #1
 80034e4:	4a09      	ldr	r2, [pc, #36]	; (800350c <HAL_MDF_Init+0x260>)
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	e01d      	b.n	8003526 <HAL_MDF_Init+0x27a>
 80034ea:	bf00      	nop
 80034ec:	20000968 	.word	0x20000968
 80034f0:	20000960 	.word	0x20000960
 80034f4:	40025080 	.word	0x40025080
 80034f8:	40025100 	.word	0x40025100
 80034fc:	40025180 	.word	0x40025180
 8003500:	40025200 	.word	0x40025200
 8003504:	40025280 	.word	0x40025280
 8003508:	40025300 	.word	0x40025300
 800350c:	20000964 	.word	0x20000964
 8003510:	46024080 	.word	0x46024080
 8003514:	46024000 	.word	0x46024000
 8003518:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 800351c:	4b0d      	ldr	r3, [pc, #52]	; (8003554 <HAL_MDF_Init+0x2a8>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	3301      	adds	r3, #1
 8003522:	4a0c      	ldr	r2, [pc, #48]	; (8003554 <HAL_MDF_Init+0x2a8>)
 8003524:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f000 f816 	bl	800355c <MDF_GetHandleNumberFromInstance>
 8003530:	4602      	mov	r2, r0
 8003532:	4909      	ldr	r1, [pc, #36]	; (8003558 <HAL_MDF_Init+0x2ac>)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	641a      	str	r2, [r3, #64]	; 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8003548:	7bfb      	ldrb	r3, [r7, #15]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20000960 	.word	0x20000960
 8003558:	20000968 	.word	0x20000968

0800355c <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4a19      	ldr	r2, [pc, #100]	; (80035cc <MDF_GetHandleNumberFromInstance+0x70>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d102      	bne.n	8003572 <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	60fb      	str	r3, [r7, #12]
 8003570:	e024      	b.n	80035bc <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a16      	ldr	r2, [pc, #88]	; (80035d0 <MDF_GetHandleNumberFromInstance+0x74>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d102      	bne.n	8003580 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 800357a:	2301      	movs	r3, #1
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	e01d      	b.n	80035bc <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter2)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a14      	ldr	r2, [pc, #80]	; (80035d4 <MDF_GetHandleNumberFromInstance+0x78>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d102      	bne.n	800358e <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 8003588:	2302      	movs	r3, #2
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	e016      	b.n	80035bc <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a11      	ldr	r2, [pc, #68]	; (80035d8 <MDF_GetHandleNumberFromInstance+0x7c>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d102      	bne.n	800359c <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 8003596:	2303      	movs	r3, #3
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	e00f      	b.n	80035bc <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a0f      	ldr	r2, [pc, #60]	; (80035dc <MDF_GetHandleNumberFromInstance+0x80>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d102      	bne.n	80035aa <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 80035a4:	2304      	movs	r3, #4
 80035a6:	60fb      	str	r3, [r7, #12]
 80035a8:	e008      	b.n	80035bc <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a0c      	ldr	r2, [pc, #48]	; (80035e0 <MDF_GetHandleNumberFromInstance+0x84>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d102      	bne.n	80035b8 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 80035b2:	2305      	movs	r3, #5
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	e001      	b.n	80035bc <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 80035b8:	2306      	movs	r3, #6
 80035ba:	60fb      	str	r3, [r7, #12]
  }

  return handle_number;
 80035bc:	68fb      	ldr	r3, [r7, #12]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	40025080 	.word	0x40025080
 80035d0:	40025100 	.word	0x40025100
 80035d4:	40025180 	.word	0x40025180
 80035d8:	40025200 	.word	0x40025200
 80035dc:	40025280 	.word	0x40025280
 80035e0:	40025300 	.word	0x40025300

080035e4 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f043 0201 	orr.w	r2, r3, #1
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	601a      	str	r2, [r3, #0]
}
 80035f8:	bf00      	nop
 80035fa:	370c      	adds	r7, #12
 80035fc:	46bd      	mov	sp, r7
 80035fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003602:	4770      	bx	lr

08003604 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af02      	add	r7, sp, #8
 800360a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800360c:	2300      	movs	r3, #0
 800360e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003610:	f7fe fe38 	bl	8002284 <HAL_GetTick>
 8003614:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d102      	bne.n	8003622 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
 8003620:	e0a5      	b.n	800376e <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800362c:	2b00      	cmp	r3, #0
 800362e:	f040 809e 	bne.w	800376e <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7fe f884 	bl	8001740 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003638:	f241 3188 	movw	r1, #5000	; 0x1388
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f912 	bl	8003866 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689a      	ldr	r2, [r3, #8]
 8003648:	4b4b      	ldr	r3, [pc, #300]	; (8003778 <HAL_OSPI_Init+0x174>)
 800364a:	4013      	ands	r3, r2
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68d1      	ldr	r1, [r2, #12]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6912      	ldr	r2, [r2, #16]
 8003654:	3a01      	subs	r2, #1
 8003656:	0412      	lsls	r2, r2, #16
 8003658:	4311      	orrs	r1, r2
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6952      	ldr	r2, [r2, #20]
 800365e:	3a01      	subs	r2, #1
 8003660:	0212      	lsls	r2, r2, #8
 8003662:	4311      	orrs	r1, r2
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003668:	4311      	orrs	r1, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	69d2      	ldr	r2, [r2, #28]
 800366e:	4311      	orrs	r1, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6812      	ldr	r2, [r2, #0]
 8003674:	430b      	orrs	r3, r1
 8003676:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68db      	ldr	r3, [r3, #12]
 800367e:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1a      	ldr	r2, [r3, #32]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80036a8:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	3b01      	subs	r3, #1
 80036ba:	021a      	lsls	r2, r3, #8
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c8:	9300      	str	r3, [sp, #0]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	2200      	movs	r2, #0
 80036ce:	2120      	movs	r1, #32
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fdc9 	bl	8004268 <OSPI_WaitFlagStateUntilTimeout>
 80036d6:	4603      	mov	r3, r0
 80036d8:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d146      	bne.n	800376e <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	1e5a      	subs	r2, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689a      	ldr	r2, [r3, #8]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003716:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0201 	orr.w	r2, r2, #1
 800373c:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d107      	bne.n	8003756 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689a      	ldr	r2, [r3, #8]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0202 	orr.w	r2, r2, #2
 8003754:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800375e:	d103      	bne.n	8003768 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	651a      	str	r2, [r3, #80]	; 0x50
 8003766:	e002      	b.n	800376e <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 800376e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003770:	4618      	mov	r0, r3
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	f8e0c0f4 	.word	0xf8e0c0f4

0800377c <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b088      	sub	sp, #32
 8003780:	af02      	add	r7, sp, #8
 8003782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003784:	2300      	movs	r3, #0
 8003786:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8003788:	f7fe fd7c 	bl	8002284 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003792:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	d104      	bne.n	80037a8 <HAL_OSPI_Abort+0x2c>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f003 0304 	and.w	r3, r3, #4
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d052      	beq.n	800384e <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0304 	and.w	r3, r3, #4
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d014      	beq.n	80037e0 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0204 	bic.w	r2, r2, #4
 80037c4:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fe fe6d 	bl	80024aa <HAL_DMA_Abort>
 80037d0:	4603      	mov	r3, r0
 80037d2:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 80037d4:	7dfb      	ldrb	r3, [r7, #23]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d002      	beq.n	80037e0 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2204      	movs	r2, #4
 80037de:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	f003 0320 	and.w	r3, r3, #32
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d02b      	beq.n	8003846 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0202 	orr.w	r2, r2, #2
 80037fc:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2201      	movs	r2, #1
 8003808:	2102      	movs	r1, #2
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fd2c 	bl	8004268 <OSPI_WaitFlagStateUntilTimeout>
 8003810:	4603      	mov	r3, r0
 8003812:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8003814:	7dfb      	ldrb	r3, [r7, #23]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d11f      	bne.n	800385a <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2202      	movs	r2, #2
 8003820:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	2200      	movs	r2, #0
 800382c:	2120      	movs	r1, #32
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 fd1a 	bl	8004268 <OSPI_WaitFlagStateUntilTimeout>
 8003834:	4603      	mov	r3, r0
 8003836:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003838:	7dfb      	ldrb	r3, [r7, #23]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10d      	bne.n	800385a <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2202      	movs	r2, #2
 8003842:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003844:	e009      	b.n	800385a <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2202      	movs	r2, #2
 800384a:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800384c:	e005      	b.n	800385a <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2210      	movs	r2, #16
 8003856:	655a      	str	r2, [r3, #84]	; 0x54
 8003858:	e000      	b.n	800385c <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 800385a:	bf00      	nop
  }

  /* Return function status */
  return status;
 800385c:	7dfb      	ldrb	r3, [r7, #23]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3718      	adds	r7, #24
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003866:	b480      	push	{r7}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b094      	sub	sp, #80	; 0x50
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003896:	2300      	movs	r3, #0
 8003898:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a9d      	ldr	r2, [pc, #628]	; (8003b18 <HAL_OSPIM_Config+0x294>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d105      	bne.n	80038b2 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80038a6:	2300      	movs	r3, #0
 80038a8:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 80038b0:	e004      	b.n	80038bc <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80038b2:	2301      	movs	r3, #1
 80038b4:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80038bc:	2300      	movs	r3, #0
 80038be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80038c2:	e01d      	b.n	8003900 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 80038c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80038c8:	3301      	adds	r3, #1
 80038ca:	b2d8      	uxtb	r0, r3
 80038cc:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80038d0:	f107 0114 	add.w	r1, r7, #20
 80038d4:	4613      	mov	r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	4413      	add	r3, r2
 80038da:	00db      	lsls	r3, r3, #3
 80038dc:	440b      	add	r3, r1
 80038de:	4619      	mov	r1, r3
 80038e0:	f000 fd02 	bl	80042e8 <OSPIM_GetConfig>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d005      	beq.n	80038f6 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2208      	movs	r2, #8
 80038f4:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80038f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80038fa:	3301      	adds	r3, #1
 80038fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003900:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003904:	2b01      	cmp	r3, #1
 8003906:	d9dd      	bls.n	80038c4 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8003908:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800390c:	2b00      	cmp	r3, #0
 800390e:	f040 849e 	bne.w	800424e <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003912:	4b81      	ldr	r3, [pc, #516]	; (8003b18 <HAL_OSPIM_Config+0x294>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00b      	beq.n	8003936 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800391e:	4b7e      	ldr	r3, [pc, #504]	; (8003b18 <HAL_OSPIM_Config+0x294>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a7d      	ldr	r2, [pc, #500]	; (8003b18 <HAL_OSPIM_Config+0x294>)
 8003924:	f023 0301 	bic.w	r3, r3, #1
 8003928:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800392a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003936:	4b79      	ldr	r3, [pc, #484]	; (8003b1c <HAL_OSPIM_Config+0x298>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00b      	beq.n	800395a <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003942:	4b76      	ldr	r3, [pc, #472]	; (8003b1c <HAL_OSPIM_Config+0x298>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a75      	ldr	r2, [pc, #468]	; (8003b1c <HAL_OSPIM_Config+0x298>)
 8003948:	f023 0301 	bic.w	r3, r3, #1
 800394c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800394e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003952:	f043 0302 	orr.w	r3, r3, #2
 8003956:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 800395a:	4971      	ldr	r1, [pc, #452]	; (8003b20 <HAL_OSPIM_Config+0x29c>)
 800395c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800395e:	4613      	mov	r3, r2
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	4413      	add	r3, r2
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	3350      	adds	r3, #80	; 0x50
 8003968:	443b      	add	r3, r7
 800396a:	3b34      	subs	r3, #52	; 0x34
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	3b01      	subs	r3, #1
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	6859      	ldr	r1, [r3, #4]
 8003976:	486a      	ldr	r0, [pc, #424]	; (8003b20 <HAL_OSPIM_Config+0x29c>)
 8003978:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800397a:	4613      	mov	r3, r2
 800397c:	005b      	lsls	r3, r3, #1
 800397e:	4413      	add	r3, r2
 8003980:	00db      	lsls	r3, r3, #3
 8003982:	3350      	adds	r3, #80	; 0x50
 8003984:	443b      	add	r3, r7
 8003986:	3b34      	subs	r3, #52	; 0x34
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3b01      	subs	r3, #1
 800398c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4403      	add	r3, r0
 8003994:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8003996:	4b62      	ldr	r3, [pc, #392]	; (8003b20 <HAL_OSPIM_Config+0x29c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 80c0 	beq.w	8003b24 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80039a4:	4b5e      	ldr	r3, [pc, #376]	; (8003b20 <HAL_OSPIM_Config+0x29c>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a5d      	ldr	r2, [pc, #372]	; (8003b20 <HAL_OSPIM_Config+0x29c>)
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80039b0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	f040 8162 	bne.w	8003c7e <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 80039ba:	4959      	ldr	r1, [pc, #356]	; (8003b20 <HAL_OSPIM_Config+0x29c>)
 80039bc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80039c0:	4613      	mov	r3, r2
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	4413      	add	r3, r2
 80039c6:	00db      	lsls	r3, r3, #3
 80039c8:	3350      	adds	r3, #80	; 0x50
 80039ca:	443b      	add	r3, r7
 80039cc:	3b3c      	subs	r3, #60	; 0x3c
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	6859      	ldr	r1, [r3, #4]
 80039d8:	4851      	ldr	r0, [pc, #324]	; (8003b20 <HAL_OSPIM_Config+0x29c>)
 80039da:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80039de:	4613      	mov	r3, r2
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	4413      	add	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	3350      	adds	r3, #80	; 0x50
 80039e8:	443b      	add	r3, r7
 80039ea:	3b3c      	subs	r3, #60	; 0x3c
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	f041 0202 	orr.w	r2, r1, #2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4403      	add	r3, r0
 80039f8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80039fa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80039fe:	4613      	mov	r3, r2
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	4413      	add	r3, r2
 8003a04:	00db      	lsls	r3, r3, #3
 8003a06:	3350      	adds	r3, #80	; 0x50
 8003a08:	443b      	add	r3, r7
 8003a0a:	3b38      	subs	r3, #56	; 0x38
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d01f      	beq.n	8003a52 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8003a12:	4943      	ldr	r1, [pc, #268]	; (8003b20 <HAL_OSPIM_Config+0x29c>)
 8003a14:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003a18:	4613      	mov	r3, r2
 8003a1a:	005b      	lsls	r3, r3, #1
 8003a1c:	4413      	add	r3, r2
 8003a1e:	00db      	lsls	r3, r3, #3
 8003a20:	3350      	adds	r3, #80	; 0x50
 8003a22:	443b      	add	r3, r7
 8003a24:	3b38      	subs	r3, #56	; 0x38
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	483b      	ldr	r0, [pc, #236]	; (8003b20 <HAL_OSPIM_Config+0x29c>)
 8003a32:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003a36:	4613      	mov	r3, r2
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	4413      	add	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	3350      	adds	r3, #80	; 0x50
 8003a40:	443b      	add	r3, r7
 8003a42:	3b38      	subs	r3, #56	; 0x38
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3b01      	subs	r3, #1
 8003a48:	f041 0220 	orr.w	r2, r1, #32
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4403      	add	r3, r0
 8003a50:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003a52:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003a56:	4613      	mov	r3, r2
 8003a58:	005b      	lsls	r3, r3, #1
 8003a5a:	4413      	add	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	3350      	adds	r3, #80	; 0x50
 8003a60:	443b      	add	r3, r7
 8003a62:	3b30      	subs	r3, #48	; 0x30
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d023      	beq.n	8003ab2 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003a6a:	492d      	ldr	r1, [pc, #180]	; (8003b20 <HAL_OSPIM_Config+0x29c>)
 8003a6c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003a70:	4613      	mov	r3, r2
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	4413      	add	r3, r2
 8003a76:	00db      	lsls	r3, r3, #3
 8003a78:	3350      	adds	r3, #80	; 0x50
 8003a7a:	443b      	add	r3, r7
 8003a7c:	3b30      	subs	r3, #48	; 0x30
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3b01      	subs	r3, #1
 8003a82:	f003 0301 	and.w	r3, r3, #1
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	6859      	ldr	r1, [r3, #4]
 8003a8c:	4824      	ldr	r0, [pc, #144]	; (8003b20 <HAL_OSPIM_Config+0x29c>)
 8003a8e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003a92:	4613      	mov	r3, r2
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	4413      	add	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	3350      	adds	r3, #80	; 0x50
 8003a9c:	443b      	add	r3, r7
 8003a9e:	3b30      	subs	r3, #48	; 0x30
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4403      	add	r3, r0
 8003ab0:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003ab2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	4413      	add	r3, r2
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	3350      	adds	r3, #80	; 0x50
 8003ac0:	443b      	add	r3, r7
 8003ac2:	3b2c      	subs	r3, #44	; 0x2c
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 80d9 	beq.w	8003c7e <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003acc:	4914      	ldr	r1, [pc, #80]	; (8003b20 <HAL_OSPIM_Config+0x29c>)
 8003ace:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	005b      	lsls	r3, r3, #1
 8003ad6:	4413      	add	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	3350      	adds	r3, #80	; 0x50
 8003adc:	443b      	add	r3, r7
 8003ade:	3b2c      	subs	r3, #44	; 0x2c
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	6859      	ldr	r1, [r3, #4]
 8003aee:	480c      	ldr	r0, [pc, #48]	; (8003b20 <HAL_OSPIM_Config+0x29c>)
 8003af0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003af4:	4613      	mov	r3, r2
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	4413      	add	r3, r2
 8003afa:	00db      	lsls	r3, r3, #3
 8003afc:	3350      	adds	r3, #80	; 0x50
 8003afe:	443b      	add	r3, r7
 8003b00:	3b2c      	subs	r3, #44	; 0x2c
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	f003 0301 	and.w	r3, r3, #1
 8003b0a:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	4403      	add	r3, r0
 8003b12:	605a      	str	r2, [r3, #4]
 8003b14:	e0b3      	b.n	8003c7e <HAL_OSPIM_Config+0x3fa>
 8003b16:	bf00      	nop
 8003b18:	420d1400 	.word	0x420d1400
 8003b1c:	420d2400 	.word	0x420d2400
 8003b20:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8003b24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b26:	4613      	mov	r3, r2
 8003b28:	005b      	lsls	r3, r3, #1
 8003b2a:	4413      	add	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	3350      	adds	r3, #80	; 0x50
 8003b30:	443b      	add	r3, r7
 8003b32:	3b3c      	subs	r3, #60	; 0x3c
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 80a1 	beq.w	8003c7e <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003b3c:	4993      	ldr	r1, [pc, #588]	; (8003d8c <HAL_OSPIM_Config+0x508>)
 8003b3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b40:	4613      	mov	r3, r2
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	4413      	add	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	3350      	adds	r3, #80	; 0x50
 8003b4a:	443b      	add	r3, r7
 8003b4c:	3b3c      	subs	r3, #60	; 0x3c
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3b01      	subs	r3, #1
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	6859      	ldr	r1, [r3, #4]
 8003b58:	488c      	ldr	r0, [pc, #560]	; (8003d8c <HAL_OSPIM_Config+0x508>)
 8003b5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	4413      	add	r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	3350      	adds	r3, #80	; 0x50
 8003b66:	443b      	add	r3, r7
 8003b68:	3b3c      	subs	r3, #60	; 0x3c
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	f021 0201 	bic.w	r2, r1, #1
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4403      	add	r3, r0
 8003b76:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003b78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	4413      	add	r3, r2
 8003b80:	00db      	lsls	r3, r3, #3
 8003b82:	3350      	adds	r3, #80	; 0x50
 8003b84:	443b      	add	r3, r7
 8003b86:	3b38      	subs	r3, #56	; 0x38
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d01d      	beq.n	8003bca <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003b8e:	497f      	ldr	r1, [pc, #508]	; (8003d8c <HAL_OSPIM_Config+0x508>)
 8003b90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b92:	4613      	mov	r3, r2
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	4413      	add	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	3350      	adds	r3, #80	; 0x50
 8003b9c:	443b      	add	r3, r7
 8003b9e:	3b38      	subs	r3, #56	; 0x38
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	6859      	ldr	r1, [r3, #4]
 8003baa:	4878      	ldr	r0, [pc, #480]	; (8003d8c <HAL_OSPIM_Config+0x508>)
 8003bac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bae:	4613      	mov	r3, r2
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	4413      	add	r3, r2
 8003bb4:	00db      	lsls	r3, r3, #3
 8003bb6:	3350      	adds	r3, #80	; 0x50
 8003bb8:	443b      	add	r3, r7
 8003bba:	3b38      	subs	r3, #56	; 0x38
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	f021 0210 	bic.w	r2, r1, #16
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4403      	add	r3, r0
 8003bc8:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003bca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bcc:	4613      	mov	r3, r2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	3350      	adds	r3, #80	; 0x50
 8003bd6:	443b      	add	r3, r7
 8003bd8:	3b30      	subs	r3, #48	; 0x30
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d021      	beq.n	8003c24 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003be0:	496a      	ldr	r1, [pc, #424]	; (8003d8c <HAL_OSPIM_Config+0x508>)
 8003be2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	3350      	adds	r3, #80	; 0x50
 8003bee:	443b      	add	r3, r7
 8003bf0:	3b30      	subs	r3, #48	; 0x30
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	f003 0301 	and.w	r3, r3, #1
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	6859      	ldr	r1, [r3, #4]
 8003c00:	4862      	ldr	r0, [pc, #392]	; (8003d8c <HAL_OSPIM_Config+0x508>)
 8003c02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c04:	4613      	mov	r3, r2
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	4413      	add	r3, r2
 8003c0a:	00db      	lsls	r3, r3, #3
 8003c0c:	3350      	adds	r3, #80	; 0x50
 8003c0e:	443b      	add	r3, r7
 8003c10:	3b30      	subs	r3, #48	; 0x30
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4403      	add	r3, r0
 8003c22:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003c24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c26:	4613      	mov	r3, r2
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	4413      	add	r3, r2
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	3350      	adds	r3, #80	; 0x50
 8003c30:	443b      	add	r3, r7
 8003c32:	3b2c      	subs	r3, #44	; 0x2c
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d021      	beq.n	8003c7e <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003c3a:	4954      	ldr	r1, [pc, #336]	; (8003d8c <HAL_OSPIM_Config+0x508>)
 8003c3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c3e:	4613      	mov	r3, r2
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	4413      	add	r3, r2
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	3350      	adds	r3, #80	; 0x50
 8003c48:	443b      	add	r3, r7
 8003c4a:	3b2c      	subs	r3, #44	; 0x2c
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	6859      	ldr	r1, [r3, #4]
 8003c5a:	484c      	ldr	r0, [pc, #304]	; (8003d8c <HAL_OSPIM_Config+0x508>)
 8003c5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c5e:	4613      	mov	r3, r2
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	4413      	add	r3, r2
 8003c64:	00db      	lsls	r3, r3, #3
 8003c66:	3350      	adds	r3, #80	; 0x50
 8003c68:	443b      	add	r3, r7
 8003c6a:	3b2c      	subs	r3, #44	; 0x2c
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4403      	add	r3, r0
 8003c7c:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	6819      	ldr	r1, [r3, #0]
 8003c82:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003c86:	4613      	mov	r3, r2
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	4413      	add	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	3350      	adds	r3, #80	; 0x50
 8003c90:	443b      	add	r3, r7
 8003c92:	3b3c      	subs	r3, #60	; 0x3c
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4299      	cmp	r1, r3
 8003c98:	d038      	beq.n	8003d0c <HAL_OSPIM_Config+0x488>
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	6859      	ldr	r1, [r3, #4]
 8003c9e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	4413      	add	r3, r2
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	3350      	adds	r3, #80	; 0x50
 8003cac:	443b      	add	r3, r7
 8003cae:	3b38      	subs	r3, #56	; 0x38
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4299      	cmp	r1, r3
 8003cb4:	d02a      	beq.n	8003d0c <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	6899      	ldr	r1, [r3, #8]
 8003cba:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	4413      	add	r3, r2
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	3350      	adds	r3, #80	; 0x50
 8003cc8:	443b      	add	r3, r7
 8003cca:	3b34      	subs	r3, #52	; 0x34
 8003ccc:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003cce:	4299      	cmp	r1, r3
 8003cd0:	d01c      	beq.n	8003d0c <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	68d9      	ldr	r1, [r3, #12]
 8003cd6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003cda:	4613      	mov	r3, r2
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	4413      	add	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	3350      	adds	r3, #80	; 0x50
 8003ce4:	443b      	add	r3, r7
 8003ce6:	3b30      	subs	r3, #48	; 0x30
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4299      	cmp	r1, r3
 8003cec:	d00e      	beq.n	8003d0c <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	6919      	ldr	r1, [r3, #16]
 8003cf2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	4413      	add	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	3350      	adds	r3, #80	; 0x50
 8003d00:	443b      	add	r3, r7
 8003d02:	3b2c      	subs	r3, #44	; 0x2c
 8003d04:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003d06:	4299      	cmp	r1, r3
 8003d08:	f040 810e 	bne.w	8003f28 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	6819      	ldr	r1, [r3, #0]
 8003d10:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003d14:	4613      	mov	r3, r2
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	4413      	add	r3, r2
 8003d1a:	00db      	lsls	r3, r3, #3
 8003d1c:	3350      	adds	r3, #80	; 0x50
 8003d1e:	443b      	add	r3, r7
 8003d20:	3b3c      	subs	r3, #60	; 0x3c
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4299      	cmp	r1, r3
 8003d26:	d133      	bne.n	8003d90 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	6859      	ldr	r1, [r3, #4]
 8003d2c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003d30:	4613      	mov	r3, r2
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	4413      	add	r3, r2
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	3350      	adds	r3, #80	; 0x50
 8003d3a:	443b      	add	r3, r7
 8003d3c:	3b38      	subs	r3, #56	; 0x38
 8003d3e:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8003d40:	4299      	cmp	r1, r3
 8003d42:	d125      	bne.n	8003d90 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	68d9      	ldr	r1, [r3, #12]
 8003d48:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003d4c:	4613      	mov	r3, r2
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	4413      	add	r3, r2
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	3350      	adds	r3, #80	; 0x50
 8003d56:	443b      	add	r3, r7
 8003d58:	3b30      	subs	r3, #48	; 0x30
 8003d5a:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003d5c:	4299      	cmp	r1, r3
 8003d5e:	d117      	bne.n	8003d90 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	6919      	ldr	r1, [r3, #16]
 8003d64:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003d68:	4613      	mov	r3, r2
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	4413      	add	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	3350      	adds	r3, #80	; 0x50
 8003d72:	443b      	add	r3, r7
 8003d74:	3b2c      	subs	r3, #44	; 0x2c
 8003d76:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8003d78:	4299      	cmp	r1, r3
 8003d7a:	d109      	bne.n	8003d90 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8003d7c:	4b03      	ldr	r3, [pc, #12]	; (8003d8c <HAL_OSPIM_Config+0x508>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a02      	ldr	r2, [pc, #8]	; (8003d8c <HAL_OSPIM_Config+0x508>)
 8003d82:	f043 0301 	orr.w	r3, r3, #1
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	e0ce      	b.n	8003f28 <HAL_OSPIM_Config+0x6a4>
 8003d8a:	bf00      	nop
 8003d8c:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003d90:	49a4      	ldr	r1, [pc, #656]	; (8004024 <HAL_OSPIM_Config+0x7a0>)
 8003d92:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003d96:	4613      	mov	r3, r2
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	4413      	add	r3, r2
 8003d9c:	00db      	lsls	r3, r3, #3
 8003d9e:	3350      	adds	r3, #80	; 0x50
 8003da0:	443b      	add	r3, r7
 8003da2:	3b3c      	subs	r3, #60	; 0x3c
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	440b      	add	r3, r1
 8003dac:	6859      	ldr	r1, [r3, #4]
 8003dae:	489d      	ldr	r0, [pc, #628]	; (8004024 <HAL_OSPIM_Config+0x7a0>)
 8003db0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003db4:	4613      	mov	r3, r2
 8003db6:	005b      	lsls	r3, r3, #1
 8003db8:	4413      	add	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	3350      	adds	r3, #80	; 0x50
 8003dbe:	443b      	add	r3, r7
 8003dc0:	3b3c      	subs	r3, #60	; 0x3c
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	f021 0201 	bic.w	r2, r1, #1
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4403      	add	r3, r0
 8003dce:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003dd0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003dd4:	4613      	mov	r3, r2
 8003dd6:	005b      	lsls	r3, r3, #1
 8003dd8:	4413      	add	r3, r2
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	3350      	adds	r3, #80	; 0x50
 8003dde:	443b      	add	r3, r7
 8003de0:	3b38      	subs	r3, #56	; 0x38
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d01f      	beq.n	8003e28 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003de8:	498e      	ldr	r1, [pc, #568]	; (8004024 <HAL_OSPIM_Config+0x7a0>)
 8003dea:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003dee:	4613      	mov	r3, r2
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	4413      	add	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	3350      	adds	r3, #80	; 0x50
 8003df8:	443b      	add	r3, r7
 8003dfa:	3b38      	subs	r3, #56	; 0x38
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	6859      	ldr	r1, [r3, #4]
 8003e06:	4887      	ldr	r0, [pc, #540]	; (8004024 <HAL_OSPIM_Config+0x7a0>)
 8003e08:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	005b      	lsls	r3, r3, #1
 8003e10:	4413      	add	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	3350      	adds	r3, #80	; 0x50
 8003e16:	443b      	add	r3, r7
 8003e18:	3b38      	subs	r3, #56	; 0x38
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	f021 0210 	bic.w	r2, r1, #16
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4403      	add	r3, r0
 8003e26:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003e28:	497e      	ldr	r1, [pc, #504]	; (8004024 <HAL_OSPIM_Config+0x7a0>)
 8003e2a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e2e:	4613      	mov	r3, r2
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	4413      	add	r3, r2
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	3350      	adds	r3, #80	; 0x50
 8003e38:	443b      	add	r3, r7
 8003e3a:	3b34      	subs	r3, #52	; 0x34
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	3b01      	subs	r3, #1
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	6859      	ldr	r1, [r3, #4]
 8003e46:	4877      	ldr	r0, [pc, #476]	; (8004024 <HAL_OSPIM_Config+0x7a0>)
 8003e48:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	4413      	add	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	3350      	adds	r3, #80	; 0x50
 8003e56:	443b      	add	r3, r7
 8003e58:	3b34      	subs	r3, #52	; 0x34
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	4403      	add	r3, r0
 8003e66:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003e68:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	4413      	add	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	3350      	adds	r3, #80	; 0x50
 8003e76:	443b      	add	r3, r7
 8003e78:	3b30      	subs	r3, #48	; 0x30
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d023      	beq.n	8003ec8 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003e80:	4968      	ldr	r1, [pc, #416]	; (8004024 <HAL_OSPIM_Config+0x7a0>)
 8003e82:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e86:	4613      	mov	r3, r2
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	4413      	add	r3, r2
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	3350      	adds	r3, #80	; 0x50
 8003e90:	443b      	add	r3, r7
 8003e92:	3b30      	subs	r3, #48	; 0x30
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	6859      	ldr	r1, [r3, #4]
 8003ea2:	4860      	ldr	r0, [pc, #384]	; (8004024 <HAL_OSPIM_Config+0x7a0>)
 8003ea4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	005b      	lsls	r3, r3, #1
 8003eac:	4413      	add	r3, r2
 8003eae:	00db      	lsls	r3, r3, #3
 8003eb0:	3350      	adds	r3, #80	; 0x50
 8003eb2:	443b      	add	r3, r7
 8003eb4:	3b30      	subs	r3, #48	; 0x30
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	4403      	add	r3, r0
 8003ec6:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003ec8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003ecc:	4613      	mov	r3, r2
 8003ece:	005b      	lsls	r3, r3, #1
 8003ed0:	4413      	add	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	3350      	adds	r3, #80	; 0x50
 8003ed6:	443b      	add	r3, r7
 8003ed8:	3b2c      	subs	r3, #44	; 0x2c
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d023      	beq.n	8003f28 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003ee0:	4950      	ldr	r1, [pc, #320]	; (8004024 <HAL_OSPIM_Config+0x7a0>)
 8003ee2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	4413      	add	r3, r2
 8003eec:	00db      	lsls	r3, r3, #3
 8003eee:	3350      	adds	r3, #80	; 0x50
 8003ef0:	443b      	add	r3, r7
 8003ef2:	3b2c      	subs	r3, #44	; 0x2c
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	f003 0301 	and.w	r3, r3, #1
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	440b      	add	r3, r1
 8003f00:	6859      	ldr	r1, [r3, #4]
 8003f02:	4848      	ldr	r0, [pc, #288]	; (8004024 <HAL_OSPIM_Config+0x7a0>)
 8003f04:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003f08:	4613      	mov	r3, r2
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	4413      	add	r3, r2
 8003f0e:	00db      	lsls	r3, r3, #3
 8003f10:	3350      	adds	r3, #80	; 0x50
 8003f12:	443b      	add	r3, r7
 8003f14:	3b2c      	subs	r3, #44	; 0x2c
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4403      	add	r3, r0
 8003f26:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003f28:	4a3e      	ldr	r2, [pc, #248]	; (8004024 <HAL_OSPIM_Config+0x7a0>)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f3c:	025b      	lsls	r3, r3, #9
 8003f3e:	431a      	orrs	r2, r3
 8003f40:	4938      	ldr	r1, [pc, #224]	; (8004024 <HAL_OSPIM_Config+0x7a0>)
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	440b      	add	r3, r1
 8003f50:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	695b      	ldr	r3, [r3, #20]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d018      	beq.n	8003f8c <HAL_OSPIM_Config+0x708>
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f62:	d813      	bhi.n	8003f8c <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	1e5a      	subs	r2, r3, #1
 8003f6a:	4b2e      	ldr	r3, [pc, #184]	; (8004024 <HAL_OSPIM_Config+0x7a0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	0c1b      	lsrs	r3, r3, #16
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d90a      	bls.n	8003f8c <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8003f76:	4b2b      	ldr	r3, [pc, #172]	; (8004024 <HAL_OSPIM_Config+0x7a0>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	3b01      	subs	r3, #1
 8003f84:	041b      	lsls	r3, r3, #16
 8003f86:	4927      	ldr	r1, [pc, #156]	; (8004024 <HAL_OSPIM_Config+0x7a0>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8003f8c:	4b25      	ldr	r3, [pc, #148]	; (8004024 <HAL_OSPIM_Config+0x7a0>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 809a 	beq.w	80040ce <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8003f9a:	4a22      	ldr	r2, [pc, #136]	; (8004024 <HAL_OSPIM_Config+0x7a0>)
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f023 0203 	bic.w	r2, r3, #3
 8003fac:	491d      	ldr	r1, [pc, #116]	; (8004024 <HAL_OSPIM_Config+0x7a0>)
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	f042 0201 	orr.w	r2, r2, #1
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	440b      	add	r3, r1
 8003fbc:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d011      	beq.n	8003fea <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8003fc6:	4a17      	ldr	r2, [pc, #92]	; (8004024 <HAL_OSPIM_Config+0x7a0>)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	3b01      	subs	r3, #1
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fd8:	4912      	ldr	r1, [pc, #72]	; (8004024 <HAL_OSPIM_Config+0x7a0>)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	f042 0210 	orr.w	r2, r2, #16
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d018      	beq.n	8004028 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003ff6:	4a0b      	ldr	r2, [pc, #44]	; (8004024 <HAL_OSPIM_Config+0x7a0>)
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800400c:	4905      	ldr	r1, [pc, #20]	; (8004024 <HAL_OSPIM_Config+0x7a0>)
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	3b01      	subs	r3, #1
 8004014:	f003 0301 	and.w	r3, r3, #1
 8004018:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	605a      	str	r2, [r3, #4]
 8004022:	e01b      	b.n	800405c <HAL_OSPIM_Config+0x7d8>
 8004024:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d015      	beq.n	800405c <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004030:	4a8a      	ldr	r2, [pc, #552]	; (800425c <HAL_OSPIM_Config+0x9d8>)
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	3b01      	subs	r3, #1
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	4413      	add	r3, r2
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004046:	4985      	ldr	r1, [pc, #532]	; (800425c <HAL_OSPIM_Config+0x9d8>)
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	3b01      	subs	r3, #1
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d016      	beq.n	8004096 <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004068:	4a7c      	ldr	r2, [pc, #496]	; (800425c <HAL_OSPIM_Config+0x9d8>)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	3b01      	subs	r3, #1
 8004070:	f003 0301 	and.w	r3, r3, #1
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	4413      	add	r3, r2
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800407e:	4977      	ldr	r1, [pc, #476]	; (800425c <HAL_OSPIM_Config+0x9d8>)
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	3b01      	subs	r3, #1
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	605a      	str	r2, [r3, #4]
 8004094:	e0c3      	b.n	800421e <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	2b00      	cmp	r3, #0
 800409c:	f000 80bf 	beq.w	800421e <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80040a0:	4a6e      	ldr	r2, [pc, #440]	; (800425c <HAL_OSPIM_Config+0x9d8>)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	3b01      	subs	r3, #1
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	4413      	add	r3, r2
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80040b6:	4969      	ldr	r1, [pc, #420]	; (800425c <HAL_OSPIM_Config+0x9d8>)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	691b      	ldr	r3, [r3, #16]
 80040bc:	3b01      	subs	r3, #1
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	605a      	str	r2, [r3, #4]
 80040cc:	e0a7      	b.n	800421e <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80040ce:	4a63      	ldr	r2, [pc, #396]	; (800425c <HAL_OSPIM_Config+0x9d8>)
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3b01      	subs	r3, #1
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	4413      	add	r3, r2
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f023 0203 	bic.w	r2, r3, #3
 80040e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e2:	005b      	lsls	r3, r3, #1
 80040e4:	431a      	orrs	r2, r3
 80040e6:	495d      	ldr	r1, [pc, #372]	; (800425c <HAL_OSPIM_Config+0x9d8>)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	f042 0201 	orr.w	r2, r2, #1
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	440b      	add	r3, r1
 80040f6:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d014      	beq.n	800412a <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8004100:	4a56      	ldr	r2, [pc, #344]	; (800425c <HAL_OSPIM_Config+0x9d8>)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	3b01      	subs	r3, #1
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004112:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004114:	015b      	lsls	r3, r3, #5
 8004116:	431a      	orrs	r2, r3
 8004118:	4950      	ldr	r1, [pc, #320]	; (800425c <HAL_OSPIM_Config+0x9d8>)
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	3b01      	subs	r3, #1
 8004120:	f042 0210 	orr.w	r2, r2, #16
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	440b      	add	r3, r1
 8004128:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d019      	beq.n	800416a <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004136:	4a49      	ldr	r2, [pc, #292]	; (800425c <HAL_OSPIM_Config+0x9d8>)
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	3b01      	subs	r3, #1
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800414c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800414e:	049b      	lsls	r3, r3, #18
 8004150:	431a      	orrs	r2, r3
 8004152:	4942      	ldr	r1, [pc, #264]	; (800425c <HAL_OSPIM_Config+0x9d8>)
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	3b01      	subs	r3, #1
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	605a      	str	r2, [r3, #4]
 8004168:	e01c      	b.n	80041a4 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d018      	beq.n	80041a4 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004172:	4a3a      	ldr	r2, [pc, #232]	; (800425c <HAL_OSPIM_Config+0x9d8>)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	3b01      	subs	r3, #1
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004188:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800418a:	069b      	lsls	r3, r3, #26
 800418c:	431a      	orrs	r2, r3
 800418e:	4933      	ldr	r1, [pc, #204]	; (800425c <HAL_OSPIM_Config+0x9d8>)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	3b01      	subs	r3, #1
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d019      	beq.n	80041e4 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80041b0:	4a2a      	ldr	r2, [pc, #168]	; (800425c <HAL_OSPIM_Config+0x9d8>)
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	4413      	add	r3, r2
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80041c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041c8:	049b      	lsls	r3, r3, #18
 80041ca:	431a      	orrs	r2, r3
 80041cc:	4923      	ldr	r1, [pc, #140]	; (800425c <HAL_OSPIM_Config+0x9d8>)
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	3b01      	subs	r3, #1
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	605a      	str	r2, [r3, #4]
 80041e2:	e01c      	b.n	800421e <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d018      	beq.n	800421e <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80041ec:	4a1b      	ldr	r2, [pc, #108]	; (800425c <HAL_OSPIM_Config+0x9d8>)
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	691b      	ldr	r3, [r3, #16]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	f003 0301 	and.w	r3, r3, #1
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004202:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004204:	069b      	lsls	r3, r3, #26
 8004206:	431a      	orrs	r2, r3
 8004208:	4914      	ldr	r1, [pc, #80]	; (800425c <HAL_OSPIM_Config+0x9d8>)
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	3b01      	subs	r3, #1
 8004210:	f003 0301 	and.w	r3, r3, #1
 8004214:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800421e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004222:	f003 0301 	and.w	r3, r3, #1
 8004226:	2b00      	cmp	r3, #0
 8004228:	d005      	beq.n	8004236 <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800422a:	4b0d      	ldr	r3, [pc, #52]	; (8004260 <HAL_OSPIM_Config+0x9dc>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a0c      	ldr	r2, [pc, #48]	; (8004260 <HAL_OSPIM_Config+0x9dc>)
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004236:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800423a:	f003 0302 	and.w	r3, r3, #2
 800423e:	2b00      	cmp	r3, #0
 8004240:	d005      	beq.n	800424e <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8004242:	4b08      	ldr	r3, [pc, #32]	; (8004264 <HAL_OSPIM_Config+0x9e0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a07      	ldr	r2, [pc, #28]	; (8004264 <HAL_OSPIM_Config+0x9e0>)
 8004248:	f043 0301 	orr.w	r3, r3, #1
 800424c:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800424e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8004252:	4618      	mov	r0, r3
 8004254:	3750      	adds	r7, #80	; 0x50
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	420c4000 	.word	0x420c4000
 8004260:	420d1400 	.word	0x420d1400
 8004264:	420d2400 	.word	0x420d2400

08004268 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	603b      	str	r3, [r7, #0]
 8004274:	4613      	mov	r3, r2
 8004276:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004278:	e022      	b.n	80042c0 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004280:	d01e      	beq.n	80042c0 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004282:	f7fd ffff 	bl	8002284 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	429a      	cmp	r2, r3
 8004290:	d302      	bcc.n	8004298 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d113      	bne.n	80042c0 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6a1a      	ldr	r2, [r3, #32]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	401a      	ands	r2, r3
 80042a2:	79fb      	ldrb	r3, [r7, #7]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d00b      	beq.n	80042c0 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ae:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b4:	f043 0201 	orr.w	r2, r3, #1
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e00e      	b.n	80042de <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6a1a      	ldr	r2, [r3, #32]
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	4013      	ands	r3, r2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	bf14      	ite	ne
 80042ce:	2301      	movne	r3, #1
 80042d0:	2300      	moveq	r3, #0
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	79fb      	ldrb	r3, [r7, #7]
 80042d8:	429a      	cmp	r2, r3
 80042da:	d1ce      	bne.n	800427a <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
	...

080042e8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	6039      	str	r1, [r7, #0]
 80042f2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80042f4:	2300      	movs	r3, #0
 80042f6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80042f8:	2300      	movs	r3, #0
 80042fa:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d005      	beq.n	800430e <OSPIM_GetConfig+0x26>
 8004302:	79fb      	ldrb	r3, [r7, #7]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d802      	bhi.n	800430e <OSPIM_GetConfig+0x26>
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d102      	bne.n	8004314 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	75fb      	strb	r3, [r7, #23]
 8004312:	e098      	b.n	8004446 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	2200      	movs	r2, #0
 800431e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	2200      	movs	r2, #0
 8004324:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2200      	movs	r2, #0
 800432a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	2200      	movs	r2, #0
 8004330:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8004332:	79fb      	ldrb	r3, [r7, #7]
 8004334:	2b02      	cmp	r3, #2
 8004336:	d10b      	bne.n	8004350 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8004338:	4b46      	ldr	r3, [pc, #280]	; (8004454 <OSPIM_GetConfig+0x16c>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d102      	bne.n	800434a <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004344:	4b44      	ldr	r3, [pc, #272]	; (8004458 <OSPIM_GetConfig+0x170>)
 8004346:	613b      	str	r3, [r7, #16]
 8004348:	e002      	b.n	8004350 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 800434a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800434e:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004350:	2300      	movs	r3, #0
 8004352:	60fb      	str	r3, [r7, #12]
 8004354:	e074      	b.n	8004440 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8004356:	4a3f      	ldr	r2, [pc, #252]	; (8004454 <OSPIM_GetConfig+0x16c>)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	f003 0301 	and.w	r3, r3, #1
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00a      	beq.n	8004382 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	4053      	eors	r3, r2
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d103      	bne.n	8004382 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00a      	beq.n	80043a2 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800438c:	68ba      	ldr	r2, [r7, #8]
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	4053      	eors	r3, r2
 8004392:	f003 0320 	and.w	r3, r3, #32
 8004396:	2b00      	cmp	r3, #0
 8004398:	d103      	bne.n	80043a2 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4053      	eors	r3, r2
 80043b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d103      	bne.n	80043c2 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d018      	beq.n	80043fe <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	4053      	eors	r3, r2
 80043d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d111      	bne.n	80043fe <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d106      	bne.n	80043f2 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3301      	adds	r3, #1
 80043e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	60da      	str	r2, [r3, #12]
 80043f0:	e005      	b.n	80043fe <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	3301      	adds	r3, #1
 80043f6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d018      	beq.n	800443a <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4053      	eors	r3, r2
 800440e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d111      	bne.n	800443a <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441c:	2b00      	cmp	r3, #0
 800441e:	d106      	bne.n	800442e <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3301      	adds	r3, #1
 8004424:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	611a      	str	r2, [r3, #16]
 800442c:	e005      	b.n	800443a <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3301      	adds	r3, #1
 8004432:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	3301      	adds	r3, #1
 800443e:	60fb      	str	r3, [r7, #12]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d987      	bls.n	8004356 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8004446:	7dfb      	ldrb	r3, [r7, #23]
}
 8004448:	4618      	mov	r0, r3
 800444a:	371c      	adds	r7, #28
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	420c4000 	.word	0x420c4000
 8004458:	04040222 	.word	0x04040222

0800445c <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	689a      	ldr	r2, [r3, #8]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f042 0202 	orr.w	r2, r2, #2
 8004478:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2208      	movs	r2, #8
 800447e:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a15      	ldr	r2, [pc, #84]	; (80044dc <HAL_OSPI_DLYB_SetConfig+0x80>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d109      	bne.n	800449e <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 800448a:	4815      	ldr	r0, [pc, #84]	; (80044e0 <HAL_OSPI_DLYB_SetConfig+0x84>)
 800448c:	f7ff f8aa 	bl	80035e4 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8004490:	6839      	ldr	r1, [r7, #0]
 8004492:	4813      	ldr	r0, [pc, #76]	; (80044e0 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8004494:	f004 ff58 	bl	8009348 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8004498:	2300      	movs	r3, #0
 800449a:	73fb      	strb	r3, [r7, #15]
 800449c:	e00d      	b.n	80044ba <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

  else if (hospi->Instance == OCTOSPI2)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a10      	ldr	r2, [pc, #64]	; (80044e4 <HAL_OSPI_DLYB_SetConfig+0x88>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d108      	bne.n	80044ba <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 80044a8:	480f      	ldr	r0, [pc, #60]	; (80044e8 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 80044aa:	f7ff f89b 	bl	80035e4 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 80044ae:	6839      	ldr	r1, [r7, #0]
 80044b0:	480d      	ldr	r0, [pc, #52]	; (80044e8 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 80044b2:	f004 ff49 	bl	8009348 <LL_DLYB_SetDelay>
    status = HAL_OK;
 80044b6:	2300      	movs	r3, #0
 80044b8:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7ff f95e 	bl	800377c <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 0202 	bic.w	r2, r2, #2
 80044ce:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	420d1400 	.word	0x420d1400
 80044e0:	420cf000 	.word	0x420cf000
 80044e4:	420d2400 	.word	0x420d2400
 80044e8:	420cf400 	.word	0x420cf400

080044ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80044ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044ee:	b08f      	sub	sp, #60	; 0x3c
 80044f0:	af0a      	add	r7, sp, #40	; 0x28
 80044f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e116      	b.n	800472c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d106      	bne.n	800451e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7fd fc7f 	bl	8001e1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2203      	movs	r2, #3
 8004522:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800452e:	2b00      	cmp	r3, #0
 8004530:	d102      	bne.n	8004538 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4618      	mov	r0, r3
 800453e:	f005 f91f 	bl	8009780 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	687e      	ldr	r6, [r7, #4]
 800454a:	466d      	mov	r5, sp
 800454c:	f106 0410 	add.w	r4, r6, #16
 8004550:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004552:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004554:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004556:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004558:	e894 0003 	ldmia.w	r4, {r0, r1}
 800455c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004560:	1d33      	adds	r3, r6, #4
 8004562:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004564:	6838      	ldr	r0, [r7, #0]
 8004566:	f005 f8df 	bl	8009728 <USB_CoreInit>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e0d7      	b.n	800472c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2100      	movs	r1, #0
 8004582:	4618      	mov	r0, r3
 8004584:	f005 f90d 	bl	80097a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004588:	2300      	movs	r3, #0
 800458a:	73fb      	strb	r3, [r7, #15]
 800458c:	e04a      	b.n	8004624 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800458e:	7bfa      	ldrb	r2, [r7, #15]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	4413      	add	r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	333d      	adds	r3, #61	; 0x3d
 800459e:	2201      	movs	r2, #1
 80045a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80045a2:	7bfa      	ldrb	r2, [r7, #15]
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	4613      	mov	r3, r2
 80045a8:	00db      	lsls	r3, r3, #3
 80045aa:	4413      	add	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	440b      	add	r3, r1
 80045b0:	333c      	adds	r3, #60	; 0x3c
 80045b2:	7bfa      	ldrb	r2, [r7, #15]
 80045b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80045b6:	7bfa      	ldrb	r2, [r7, #15]
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	b298      	uxth	r0, r3
 80045bc:	6879      	ldr	r1, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	440b      	add	r3, r1
 80045c8:	3344      	adds	r3, #68	; 0x44
 80045ca:	4602      	mov	r2, r0
 80045cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80045ce:	7bfa      	ldrb	r2, [r7, #15]
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	4613      	mov	r3, r2
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	4413      	add	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	3340      	adds	r3, #64	; 0x40
 80045de:	2200      	movs	r2, #0
 80045e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80045e2:	7bfa      	ldrb	r2, [r7, #15]
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	4613      	mov	r3, r2
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	4413      	add	r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	3348      	adds	r3, #72	; 0x48
 80045f2:	2200      	movs	r2, #0
 80045f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80045f6:	7bfa      	ldrb	r2, [r7, #15]
 80045f8:	6879      	ldr	r1, [r7, #4]
 80045fa:	4613      	mov	r3, r2
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	440b      	add	r3, r1
 8004604:	334c      	adds	r3, #76	; 0x4c
 8004606:	2200      	movs	r2, #0
 8004608:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800460a:	7bfa      	ldrb	r2, [r7, #15]
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	4613      	mov	r3, r2
 8004610:	00db      	lsls	r3, r3, #3
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	440b      	add	r3, r1
 8004618:	3354      	adds	r3, #84	; 0x54
 800461a:	2200      	movs	r2, #0
 800461c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800461e:	7bfb      	ldrb	r3, [r7, #15]
 8004620:	3301      	adds	r3, #1
 8004622:	73fb      	strb	r3, [r7, #15]
 8004624:	7bfa      	ldrb	r2, [r7, #15]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	429a      	cmp	r2, r3
 800462c:	d3af      	bcc.n	800458e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800462e:	2300      	movs	r3, #0
 8004630:	73fb      	strb	r3, [r7, #15]
 8004632:	e044      	b.n	80046be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004634:	7bfa      	ldrb	r2, [r7, #15]
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004646:	2200      	movs	r2, #0
 8004648:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800464a:	7bfa      	ldrb	r2, [r7, #15]
 800464c:	6879      	ldr	r1, [r7, #4]
 800464e:	4613      	mov	r3, r2
 8004650:	00db      	lsls	r3, r3, #3
 8004652:	4413      	add	r3, r2
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	440b      	add	r3, r1
 8004658:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800465c:	7bfa      	ldrb	r2, [r7, #15]
 800465e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004660:	7bfa      	ldrb	r2, [r7, #15]
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004672:	2200      	movs	r2, #0
 8004674:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004676:	7bfa      	ldrb	r2, [r7, #15]
 8004678:	6879      	ldr	r1, [r7, #4]
 800467a:	4613      	mov	r3, r2
 800467c:	00db      	lsls	r3, r3, #3
 800467e:	4413      	add	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	440b      	add	r3, r1
 8004684:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004688:	2200      	movs	r2, #0
 800468a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800468c:	7bfa      	ldrb	r2, [r7, #15]
 800468e:	6879      	ldr	r1, [r7, #4]
 8004690:	4613      	mov	r3, r2
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	4413      	add	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	440b      	add	r3, r1
 800469a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800469e:	2200      	movs	r2, #0
 80046a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80046a2:	7bfa      	ldrb	r2, [r7, #15]
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	4613      	mov	r3, r2
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	4413      	add	r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
 80046ba:	3301      	adds	r3, #1
 80046bc:	73fb      	strb	r3, [r7, #15]
 80046be:	7bfa      	ldrb	r2, [r7, #15]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d3b5      	bcc.n	8004634 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	687e      	ldr	r6, [r7, #4]
 80046d0:	466d      	mov	r5, sp
 80046d2:	f106 0410 	add.w	r4, r6, #16
 80046d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80046e6:	1d33      	adds	r3, r6, #4
 80046e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046ea:	6838      	ldr	r0, [r7, #0]
 80046ec:	f005 f8a6 	bl	800983c <USB_DevInit>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d005      	beq.n	8004702 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2202      	movs	r2, #2
 80046fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e014      	b.n	800472c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	2b01      	cmp	r3, #1
 8004718:	d102      	bne.n	8004720 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f80a 	bl	8004734 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4618      	mov	r0, r3
 8004726:	f005 fa54 	bl	8009bd2 <USB_DevDisconnect>

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3714      	adds	r7, #20
 8004730:	46bd      	mov	sp, r7
 8004732:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004734 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004766:	f043 0303 	orr.w	r3, r3, #3
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800477c:	b480      	push	{r7}
 800477e:	b085      	sub	sp, #20
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004784:	4b34      	ldr	r3, [pc, #208]	; (8004858 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004788:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800478c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	429a      	cmp	r2, r3
 8004794:	d101      	bne.n	800479a <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8004796:	2300      	movs	r3, #0
 8004798:	e057      	b.n	800484a <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a0:	d90a      	bls.n	80047b8 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80047a2:	4b2d      	ldr	r3, [pc, #180]	; (8004858 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4313      	orrs	r3, r2
 80047ae:	4a2a      	ldr	r2, [pc, #168]	; (8004858 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80047b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047b4:	60d3      	str	r3, [r2, #12]
 80047b6:	e007      	b.n	80047c8 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80047b8:	4b27      	ldr	r3, [pc, #156]	; (8004858 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80047c0:	4925      	ldr	r1, [pc, #148]	; (8004858 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4313      	orrs	r3, r2
 80047c6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80047c8:	4b24      	ldr	r3, [pc, #144]	; (800485c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a24      	ldr	r2, [pc, #144]	; (8004860 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80047ce:	fba2 2303 	umull	r2, r3, r2, r3
 80047d2:	099b      	lsrs	r3, r3, #6
 80047d4:	2232      	movs	r2, #50	; 0x32
 80047d6:	fb02 f303 	mul.w	r3, r2, r3
 80047da:	4a21      	ldr	r2, [pc, #132]	; (8004860 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 80047dc:	fba2 2303 	umull	r2, r3, r2, r3
 80047e0:	099b      	lsrs	r3, r3, #6
 80047e2:	3301      	adds	r3, #1
 80047e4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80047e6:	e002      	b.n	80047ee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	3b01      	subs	r3, #1
 80047ec:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80047ee:	4b1a      	ldr	r3, [pc, #104]	; (8004858 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d102      	bne.n	8004800 <HAL_PWREx_ControlVoltageScaling+0x84>
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1f3      	bne.n	80047e8 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d01b      	beq.n	800483e <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004806:	4b15      	ldr	r3, [pc, #84]	; (800485c <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a15      	ldr	r2, [pc, #84]	; (8004860 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800480c:	fba2 2303 	umull	r2, r3, r2, r3
 8004810:	099b      	lsrs	r3, r3, #6
 8004812:	2232      	movs	r2, #50	; 0x32
 8004814:	fb02 f303 	mul.w	r3, r2, r3
 8004818:	4a11      	ldr	r2, [pc, #68]	; (8004860 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	099b      	lsrs	r3, r3, #6
 8004820:	3301      	adds	r3, #1
 8004822:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004824:	e002      	b.n	800482c <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3b01      	subs	r3, #1
 800482a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 800482c:	4b0a      	ldr	r3, [pc, #40]	; (8004858 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800482e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d102      	bne.n	800483e <HAL_PWREx_ControlVoltageScaling+0xc2>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d1f3      	bne.n	8004826 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d101      	bne.n	8004848 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e000      	b.n	800484a <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	46020800 	.word	0x46020800
 800485c:	20000000 	.word	0x20000000
 8004860:	10624dd3 	.word	0x10624dd3

08004864 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004868:	4b04      	ldr	r3, [pc, #16]	; (800487c <HAL_PWREx_GetVoltageRange+0x18>)
 800486a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800486c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004870:	4618      	mov	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	46020800 	.word	0x46020800

08004880 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004888:	4b22      	ldr	r3, [pc, #136]	; (8004914 <HAL_PWREx_ConfigSupply+0x94>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a22      	ldr	r2, [pc, #136]	; (8004918 <HAL_PWREx_ConfigSupply+0x98>)
 800488e:	fba2 2303 	umull	r2, r3, r2, r3
 8004892:	099b      	lsrs	r3, r3, #6
 8004894:	2232      	movs	r2, #50	; 0x32
 8004896:	fb02 f303 	mul.w	r3, r2, r3
 800489a:	4a1f      	ldr	r2, [pc, #124]	; (8004918 <HAL_PWREx_ConfigSupply+0x98>)
 800489c:	fba2 2303 	umull	r2, r3, r2, r3
 80048a0:	099b      	lsrs	r3, r3, #6
 80048a2:	3301      	adds	r3, #1
 80048a4:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d113      	bne.n	80048d4 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80048ac:	4b1b      	ldr	r3, [pc, #108]	; (800491c <HAL_PWREx_ConfigSupply+0x9c>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	4a1a      	ldr	r2, [pc, #104]	; (800491c <HAL_PWREx_ConfigSupply+0x9c>)
 80048b2:	f023 0302 	bic.w	r3, r3, #2
 80048b6:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80048b8:	e002      	b.n	80048c0 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3b01      	subs	r3, #1
 80048be:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80048c0:	4b16      	ldr	r3, [pc, #88]	; (800491c <HAL_PWREx_ConfigSupply+0x9c>)
 80048c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b02      	cmp	r3, #2
 80048ca:	d116      	bne.n	80048fa <HAL_PWREx_ConfigSupply+0x7a>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1f3      	bne.n	80048ba <HAL_PWREx_ConfigSupply+0x3a>
 80048d2:	e012      	b.n	80048fa <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 80048d4:	4b11      	ldr	r3, [pc, #68]	; (800491c <HAL_PWREx_ConfigSupply+0x9c>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	4a10      	ldr	r2, [pc, #64]	; (800491c <HAL_PWREx_ConfigSupply+0x9c>)
 80048da:	f043 0302 	orr.w	r3, r3, #2
 80048de:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80048e0:	e002      	b.n	80048e8 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3b01      	subs	r3, #1
 80048e6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80048e8:	4b0c      	ldr	r3, [pc, #48]	; (800491c <HAL_PWREx_ConfigSupply+0x9c>)
 80048ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d102      	bne.n	80048fa <HAL_PWREx_ConfigSupply+0x7a>
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f3      	bne.n	80048e2 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	e000      	b.n	8004906 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
 8004912:	bf00      	nop
 8004914:	20000000 	.word	0x20000000
 8004918:	10624dd3 	.word	0x10624dd3
 800491c:	46020800 	.word	0x46020800

08004920 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004920:	b480      	push	{r7}
 8004922:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8004924:	4b05      	ldr	r3, [pc, #20]	; (800493c <HAL_PWREx_EnableVddUSB+0x1c>)
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	4a04      	ldr	r2, [pc, #16]	; (800493c <HAL_PWREx_EnableVddUSB+0x1c>)
 800492a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800492e:	6113      	str	r3, [r2, #16]
}
 8004930:	bf00      	nop
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	46020800 	.word	0x46020800

08004940 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004944:	4b05      	ldr	r3, [pc, #20]	; (800495c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004946:	691b      	ldr	r3, [r3, #16]
 8004948:	4a04      	ldr	r2, [pc, #16]	; (800495c <HAL_PWREx_EnableVddIO2+0x1c>)
 800494a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800494e:	6113      	str	r3, [r2, #16]
}
 8004950:	bf00      	nop
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	46020800 	.word	0x46020800

08004960 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08e      	sub	sp, #56	; 0x38
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004968:	2300      	movs	r3, #0
 800496a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d102      	bne.n	800497a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	f000 bec3 	b.w	8005700 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800497a:	4b9c      	ldr	r3, [pc, #624]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	f003 030c 	and.w	r3, r3, #12
 8004982:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004984:	4b99      	ldr	r3, [pc, #612]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004988:	f003 0303 	and.w	r3, r3, #3
 800498c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0310 	and.w	r3, r3, #16
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 8172 	beq.w	8004c80 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800499c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d007      	beq.n	80049b2 <HAL_RCC_OscConfig+0x52>
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a4:	2b0c      	cmp	r3, #12
 80049a6:	f040 80e4 	bne.w	8004b72 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	f040 80e0 	bne.w	8004b72 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049b2:	4b8e      	ldr	r3, [pc, #568]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 0304 	and.w	r3, r3, #4
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d006      	beq.n	80049cc <HAL_RCC_OscConfig+0x6c>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	69db      	ldr	r3, [r3, #28]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d102      	bne.n	80049cc <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f000 be9a 	b.w	8005700 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049d0:	4b86      	ldr	r3, [pc, #536]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d004      	beq.n	80049e6 <HAL_RCC_OscConfig+0x86>
 80049dc:	4b83      	ldr	r3, [pc, #524]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80049e4:	e005      	b.n	80049f2 <HAL_RCC_OscConfig+0x92>
 80049e6:	4b81      	ldr	r3, [pc, #516]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 80049e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80049ec:	041b      	lsls	r3, r3, #16
 80049ee:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d255      	bcs.n	8004aa2 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d10a      	bne.n	8004a12 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	4618      	mov	r0, r3
 8004a02:	f001 f9d3 	bl	8005dac <RCC_SetFlashLatencyFromMSIRange>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d002      	beq.n	8004a12 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	f000 be77 	b.w	8005700 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004a12:	4b76      	ldr	r3, [pc, #472]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	4a75      	ldr	r2, [pc, #468]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004a18:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a1c:	6093      	str	r3, [r2, #8]
 8004a1e:	4b73      	ldr	r3, [pc, #460]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	4970      	ldr	r1, [pc, #448]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a34:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004a38:	d309      	bcc.n	8004a4e <HAL_RCC_OscConfig+0xee>
 8004a3a:	4b6c      	ldr	r3, [pc, #432]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f023 021f 	bic.w	r2, r3, #31
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	4969      	ldr	r1, [pc, #420]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60cb      	str	r3, [r1, #12]
 8004a4c:	e07e      	b.n	8004b4c <HAL_RCC_OscConfig+0x1ec>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	da0a      	bge.n	8004a6c <HAL_RCC_OscConfig+0x10c>
 8004a56:	4b65      	ldr	r3, [pc, #404]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	015b      	lsls	r3, r3, #5
 8004a64:	4961      	ldr	r1, [pc, #388]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	60cb      	str	r3, [r1, #12]
 8004a6a:	e06f      	b.n	8004b4c <HAL_RCC_OscConfig+0x1ec>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a74:	d30a      	bcc.n	8004a8c <HAL_RCC_OscConfig+0x12c>
 8004a76:	4b5d      	ldr	r3, [pc, #372]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	029b      	lsls	r3, r3, #10
 8004a84:	4959      	ldr	r1, [pc, #356]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	60cb      	str	r3, [r1, #12]
 8004a8a:	e05f      	b.n	8004b4c <HAL_RCC_OscConfig+0x1ec>
 8004a8c:	4b57      	ldr	r3, [pc, #348]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	03db      	lsls	r3, r3, #15
 8004a9a:	4954      	ldr	r1, [pc, #336]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60cb      	str	r3, [r1, #12]
 8004aa0:	e054      	b.n	8004b4c <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004aa2:	4b52      	ldr	r3, [pc, #328]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	4a51      	ldr	r2, [pc, #324]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004aa8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004aac:	6093      	str	r3, [r2, #8]
 8004aae:	4b4f      	ldr	r3, [pc, #316]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	494c      	ldr	r1, [pc, #304]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004ac8:	d309      	bcc.n	8004ade <HAL_RCC_OscConfig+0x17e>
 8004aca:	4b48      	ldr	r3, [pc, #288]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f023 021f 	bic.w	r2, r3, #31
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a1b      	ldr	r3, [r3, #32]
 8004ad6:	4945      	ldr	r1, [pc, #276]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60cb      	str	r3, [r1, #12]
 8004adc:	e028      	b.n	8004b30 <HAL_RCC_OscConfig+0x1d0>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	da0a      	bge.n	8004afc <HAL_RCC_OscConfig+0x19c>
 8004ae6:	4b41      	ldr	r3, [pc, #260]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a1b      	ldr	r3, [r3, #32]
 8004af2:	015b      	lsls	r3, r3, #5
 8004af4:	493d      	ldr	r1, [pc, #244]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	60cb      	str	r3, [r1, #12]
 8004afa:	e019      	b.n	8004b30 <HAL_RCC_OscConfig+0x1d0>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b04:	d30a      	bcc.n	8004b1c <HAL_RCC_OscConfig+0x1bc>
 8004b06:	4b39      	ldr	r3, [pc, #228]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	029b      	lsls	r3, r3, #10
 8004b14:	4935      	ldr	r1, [pc, #212]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60cb      	str	r3, [r1, #12]
 8004b1a:	e009      	b.n	8004b30 <HAL_RCC_OscConfig+0x1d0>
 8004b1c:	4b33      	ldr	r3, [pc, #204]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	03db      	lsls	r3, r3, #15
 8004b2a:	4930      	ldr	r1, [pc, #192]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10a      	bne.n	8004b4c <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f001 f936 	bl	8005dac <RCC_SetFlashLatencyFromMSIRange>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	f000 bdda 	b.w	8005700 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004b4c:	f001 f8d8 	bl	8005d00 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004b50:	4b27      	ldr	r3, [pc, #156]	; (8004bf0 <HAL_RCC_OscConfig+0x290>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fd fb4b 	bl	80021f0 <HAL_InitTick>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8004b60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 808a 	beq.w	8004c7e <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8004b6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b6e:	f000 bdc7 	b.w	8005700 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69db      	ldr	r3, [r3, #28]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d066      	beq.n	8004c48 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004b7a:	4b1c      	ldr	r3, [pc, #112]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a1b      	ldr	r2, [pc, #108]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004b86:	f7fd fb7d 	bl	8002284 <HAL_GetTick>
 8004b8a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004b8c:	e009      	b.n	8004ba2 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b8e:	f7fd fb79 	bl	8002284 <HAL_GetTick>
 8004b92:	4602      	mov	r2, r0
 8004b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	2b02      	cmp	r3, #2
 8004b9a:	d902      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	f000 bdaf 	b.w	8005700 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004ba2:	4b12      	ldr	r3, [pc, #72]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0304 	and.w	r3, r3, #4
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0ef      	beq.n	8004b8e <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004bae:	4b0f      	ldr	r3, [pc, #60]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	4a0e      	ldr	r2, [pc, #56]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004bb4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bb8:	6093      	str	r3, [r2, #8]
 8004bba:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	4909      	ldr	r1, [pc, #36]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004bd4:	d30e      	bcc.n	8004bf4 <HAL_RCC_OscConfig+0x294>
 8004bd6:	4b05      	ldr	r3, [pc, #20]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f023 021f 	bic.w	r2, r3, #31
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	4902      	ldr	r1, [pc, #8]	; (8004bec <HAL_RCC_OscConfig+0x28c>)
 8004be4:	4313      	orrs	r3, r2
 8004be6:	60cb      	str	r3, [r1, #12]
 8004be8:	e04a      	b.n	8004c80 <HAL_RCC_OscConfig+0x320>
 8004bea:	bf00      	nop
 8004bec:	46020c00 	.word	0x46020c00
 8004bf0:	20000004 	.word	0x20000004
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	da0a      	bge.n	8004c12 <HAL_RCC_OscConfig+0x2b2>
 8004bfc:	4b9b      	ldr	r3, [pc, #620]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	015b      	lsls	r3, r3, #5
 8004c0a:	4998      	ldr	r1, [pc, #608]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60cb      	str	r3, [r1, #12]
 8004c10:	e036      	b.n	8004c80 <HAL_RCC_OscConfig+0x320>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1a:	d30a      	bcc.n	8004c32 <HAL_RCC_OscConfig+0x2d2>
 8004c1c:	4b93      	ldr	r3, [pc, #588]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	029b      	lsls	r3, r3, #10
 8004c2a:	4990      	ldr	r1, [pc, #576]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60cb      	str	r3, [r1, #12]
 8004c30:	e026      	b.n	8004c80 <HAL_RCC_OscConfig+0x320>
 8004c32:	4b8e      	ldr	r3, [pc, #568]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	03db      	lsls	r3, r3, #15
 8004c40:	498a      	ldr	r1, [pc, #552]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60cb      	str	r3, [r1, #12]
 8004c46:	e01b      	b.n	8004c80 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004c48:	4b88      	ldr	r3, [pc, #544]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a87      	ldr	r2, [pc, #540]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004c4e:	f023 0301 	bic.w	r3, r3, #1
 8004c52:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c54:	f7fd fb16 	bl	8002284 <HAL_GetTick>
 8004c58:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004c5a:	e009      	b.n	8004c70 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c5c:	f7fd fb12 	bl	8002284 <HAL_GetTick>
 8004c60:	4602      	mov	r2, r0
 8004c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c64:	1ad3      	subs	r3, r2, r3
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d902      	bls.n	8004c70 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	f000 bd48 	b.w	8005700 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004c70:	4b7e      	ldr	r3, [pc, #504]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1ef      	bne.n	8004c5c <HAL_RCC_OscConfig+0x2fc>
 8004c7c:	e000      	b.n	8004c80 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c7e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 8094 	beq.w	8004db6 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d005      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x340>
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c96:	2b0c      	cmp	r3, #12
 8004c98:	d110      	bne.n	8004cbc <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9c:	2b03      	cmp	r3, #3
 8004c9e:	d10d      	bne.n	8004cbc <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ca0:	4b72      	ldr	r3, [pc, #456]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	f000 8083 	beq.w	8004db4 <HAL_RCC_OscConfig+0x454>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d17e      	bne.n	8004db4 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	f000 bd22 	b.w	8005700 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cc4:	d106      	bne.n	8004cd4 <HAL_RCC_OscConfig+0x374>
 8004cc6:	4b69      	ldr	r3, [pc, #420]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a68      	ldr	r2, [pc, #416]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	e041      	b.n	8004d58 <HAL_RCC_OscConfig+0x3f8>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cdc:	d112      	bne.n	8004d04 <HAL_RCC_OscConfig+0x3a4>
 8004cde:	4b63      	ldr	r3, [pc, #396]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a62      	ldr	r2, [pc, #392]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004ce4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ce8:	6013      	str	r3, [r2, #0]
 8004cea:	4b60      	ldr	r3, [pc, #384]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a5f      	ldr	r2, [pc, #380]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004cf0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	4b5d      	ldr	r3, [pc, #372]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a5c      	ldr	r2, [pc, #368]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d00:	6013      	str	r3, [r2, #0]
 8004d02:	e029      	b.n	8004d58 <HAL_RCC_OscConfig+0x3f8>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004d0c:	d112      	bne.n	8004d34 <HAL_RCC_OscConfig+0x3d4>
 8004d0e:	4b57      	ldr	r3, [pc, #348]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a56      	ldr	r2, [pc, #344]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004d14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d18:	6013      	str	r3, [r2, #0]
 8004d1a:	4b54      	ldr	r3, [pc, #336]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a53      	ldr	r2, [pc, #332]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004d20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d24:	6013      	str	r3, [r2, #0]
 8004d26:	4b51      	ldr	r3, [pc, #324]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a50      	ldr	r2, [pc, #320]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d30:	6013      	str	r3, [r2, #0]
 8004d32:	e011      	b.n	8004d58 <HAL_RCC_OscConfig+0x3f8>
 8004d34:	4b4d      	ldr	r3, [pc, #308]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a4c      	ldr	r2, [pc, #304]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004d3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d3e:	6013      	str	r3, [r2, #0]
 8004d40:	4b4a      	ldr	r3, [pc, #296]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a49      	ldr	r2, [pc, #292]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004d46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d4a:	6013      	str	r3, [r2, #0]
 8004d4c:	4b47      	ldr	r3, [pc, #284]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a46      	ldr	r2, [pc, #280]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004d52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d014      	beq.n	8004d8a <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8004d60:	f7fd fa90 	bl	8002284 <HAL_GetTick>
 8004d64:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d66:	e009      	b.n	8004d7c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d68:	f7fd fa8c 	bl	8002284 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b64      	cmp	r3, #100	; 0x64
 8004d74:	d902      	bls.n	8004d7c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004d76:	2303      	movs	r3, #3
 8004d78:	f000 bcc2 	b.w	8005700 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d7c:	4b3b      	ldr	r3, [pc, #236]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0ef      	beq.n	8004d68 <HAL_RCC_OscConfig+0x408>
 8004d88:	e015      	b.n	8004db6 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004d8a:	f7fd fa7b 	bl	8002284 <HAL_GetTick>
 8004d8e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d90:	e009      	b.n	8004da6 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d92:	f7fd fa77 	bl	8002284 <HAL_GetTick>
 8004d96:	4602      	mov	r2, r0
 8004d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9a:	1ad3      	subs	r3, r2, r3
 8004d9c:	2b64      	cmp	r3, #100	; 0x64
 8004d9e:	d902      	bls.n	8004da6 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	f000 bcad 	b.w	8005700 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004da6:	4b31      	ldr	r3, [pc, #196]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1ef      	bne.n	8004d92 <HAL_RCC_OscConfig+0x432>
 8004db2:	e000      	b.n	8004db6 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0302 	and.w	r3, r3, #2
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d066      	beq.n	8004e90 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc4:	2b04      	cmp	r3, #4
 8004dc6:	d005      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x474>
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dca:	2b0c      	cmp	r3, #12
 8004dcc:	d11a      	bne.n	8004e04 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	d117      	bne.n	8004e04 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dd4:	4b25      	ldr	r3, [pc, #148]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d006      	beq.n	8004dee <HAL_RCC_OscConfig+0x48e>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d102      	bne.n	8004dee <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	f000 bc89 	b.w	8005700 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004dee:	4b1f      	ldr	r3, [pc, #124]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	041b      	lsls	r3, r3, #16
 8004dfc:	491b      	ldr	r1, [pc, #108]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e02:	e045      	b.n	8004e90 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d024      	beq.n	8004e56 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004e0c:	4b17      	ldr	r3, [pc, #92]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a16      	ldr	r2, [pc, #88]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e16:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004e18:	f7fd fa34 	bl	8002284 <HAL_GetTick>
 8004e1c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e1e:	e009      	b.n	8004e34 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e20:	f7fd fa30 	bl	8002284 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d902      	bls.n	8004e34 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	f000 bc66 	b.w	8005700 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e34:	4b0d      	ldr	r3, [pc, #52]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0ef      	beq.n	8004e20 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004e40:	4b0a      	ldr	r3, [pc, #40]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	041b      	lsls	r3, r3, #16
 8004e4e:	4907      	ldr	r1, [pc, #28]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	610b      	str	r3, [r1, #16]
 8004e54:	e01c      	b.n	8004e90 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8004e56:	4b05      	ldr	r3, [pc, #20]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a04      	ldr	r2, [pc, #16]	; (8004e6c <HAL_RCC_OscConfig+0x50c>)
 8004e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e60:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004e62:	f7fd fa0f 	bl	8002284 <HAL_GetTick>
 8004e66:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e68:	e00c      	b.n	8004e84 <HAL_RCC_OscConfig+0x524>
 8004e6a:	bf00      	nop
 8004e6c:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e70:	f7fd fa08 	bl	8002284 <HAL_GetTick>
 8004e74:	4602      	mov	r2, r0
 8004e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e78:	1ad3      	subs	r3, r2, r3
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d902      	bls.n	8004e84 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	f000 bc3e 	b.w	8005700 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e84:	4baf      	ldr	r3, [pc, #700]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1ef      	bne.n	8004e70 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0308 	and.w	r3, r3, #8
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 80c7 	beq.w	800502c <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ea4:	4ba7      	ldr	r3, [pc, #668]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8004ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d111      	bne.n	8004ed6 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004eb2:	4ba4      	ldr	r3, [pc, #656]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8004eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004eb8:	4aa2      	ldr	r2, [pc, #648]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8004eba:	f043 0304 	orr.w	r3, r3, #4
 8004ebe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004ec2:	4ba0      	ldr	r3, [pc, #640]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8004ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ec8:	f003 0304 	and.w	r3, r3, #4
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ed6:	4b9c      	ldr	r3, [pc, #624]	; (8005148 <HAL_RCC_OscConfig+0x7e8>)
 8004ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d118      	bne.n	8004f14 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004ee2:	4b99      	ldr	r3, [pc, #612]	; (8005148 <HAL_RCC_OscConfig+0x7e8>)
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee6:	4a98      	ldr	r2, [pc, #608]	; (8005148 <HAL_RCC_OscConfig+0x7e8>)
 8004ee8:	f043 0301 	orr.w	r3, r3, #1
 8004eec:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eee:	f7fd f9c9 	bl	8002284 <HAL_GetTick>
 8004ef2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004ef4:	e008      	b.n	8004f08 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ef6:	f7fd f9c5 	bl	8002284 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e3fb      	b.n	8005700 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004f08:	4b8f      	ldr	r3, [pc, #572]	; (8005148 <HAL_RCC_OscConfig+0x7e8>)
 8004f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0f0      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d05f      	beq.n	8004fdc <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004f1c:	4b89      	ldr	r3, [pc, #548]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8004f1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f22:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699a      	ldr	r2, [r3, #24]
 8004f28:	6a3b      	ldr	r3, [r7, #32]
 8004f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d037      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004f32:	6a3b      	ldr	r3, [r7, #32]
 8004f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d006      	beq.n	8004f4a <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004f3c:	6a3b      	ldr	r3, [r7, #32]
 8004f3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d101      	bne.n	8004f4a <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e3da      	b.n	8005700 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004f4a:	6a3b      	ldr	r3, [r7, #32]
 8004f4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d01b      	beq.n	8004f8c <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8004f54:	4b7b      	ldr	r3, [pc, #492]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8004f56:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f5a:	4a7a      	ldr	r2, [pc, #488]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8004f5c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004f60:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8004f64:	f7fd f98e 	bl	8002284 <HAL_GetTick>
 8004f68:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f6c:	f7fd f98a 	bl	8002284 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e3c0      	b.n	8005700 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004f7e:	4b71      	ldr	r3, [pc, #452]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8004f80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1ef      	bne.n	8004f6c <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004f8c:	4b6d      	ldr	r3, [pc, #436]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8004f8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004f92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	496a      	ldr	r1, [pc, #424]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004fa2:	4b68      	ldr	r3, [pc, #416]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8004fa4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fa8:	4a66      	ldr	r2, [pc, #408]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8004faa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004fae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004fb2:	f7fd f967 	bl	8002284 <HAL_GetTick>
 8004fb6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fba:	f7fd f963 	bl	8002284 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e399      	b.n	8005700 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004fcc:	4b5d      	ldr	r3, [pc, #372]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8004fce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fd2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d0ef      	beq.n	8004fba <HAL_RCC_OscConfig+0x65a>
 8004fda:	e01b      	b.n	8005014 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004fdc:	4b59      	ldr	r3, [pc, #356]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8004fde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004fe2:	4a58      	ldr	r2, [pc, #352]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8004fe4:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004fe8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004fec:	f7fd f94a 	bl	8002284 <HAL_GetTick>
 8004ff0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ff4:	f7fd f946 	bl	8002284 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e37c      	b.n	8005700 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005006:	4b4f      	ldr	r3, [pc, #316]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8005008:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800500c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1ef      	bne.n	8004ff4 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005014:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005018:	2b01      	cmp	r3, #1
 800501a:	d107      	bne.n	800502c <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800501c:	4b49      	ldr	r3, [pc, #292]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 800501e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005022:	4a48      	ldr	r2, [pc, #288]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8005024:	f023 0304 	bic.w	r3, r3, #4
 8005028:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0304 	and.w	r3, r3, #4
 8005034:	2b00      	cmp	r3, #0
 8005036:	f000 8112 	beq.w	800525e <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 800503a:	2300      	movs	r3, #0
 800503c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005040:	4b40      	ldr	r3, [pc, #256]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8005042:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005046:	f003 0304 	and.w	r3, r3, #4
 800504a:	2b00      	cmp	r3, #0
 800504c:	d111      	bne.n	8005072 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800504e:	4b3d      	ldr	r3, [pc, #244]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8005050:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005054:	4a3b      	ldr	r2, [pc, #236]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8005056:	f043 0304 	orr.w	r3, r3, #4
 800505a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800505e:	4b39      	ldr	r3, [pc, #228]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8005060:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005064:	f003 0304 	and.w	r3, r3, #4
 8005068:	613b      	str	r3, [r7, #16]
 800506a:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 800506c:	2301      	movs	r3, #1
 800506e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005072:	4b35      	ldr	r3, [pc, #212]	; (8005148 <HAL_RCC_OscConfig+0x7e8>)
 8005074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005076:	f003 0301 	and.w	r3, r3, #1
 800507a:	2b00      	cmp	r3, #0
 800507c:	d118      	bne.n	80050b0 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800507e:	4b32      	ldr	r3, [pc, #200]	; (8005148 <HAL_RCC_OscConfig+0x7e8>)
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	4a31      	ldr	r2, [pc, #196]	; (8005148 <HAL_RCC_OscConfig+0x7e8>)
 8005084:	f043 0301 	orr.w	r3, r3, #1
 8005088:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800508a:	f7fd f8fb 	bl	8002284 <HAL_GetTick>
 800508e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005090:	e008      	b.n	80050a4 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005092:	f7fd f8f7 	bl	8002284 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e32d      	b.n	8005700 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80050a4:	4b28      	ldr	r3, [pc, #160]	; (8005148 <HAL_RCC_OscConfig+0x7e8>)
 80050a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0f0      	beq.n	8005092 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d01f      	beq.n	80050fc <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d010      	beq.n	80050ea <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80050c8:	4b1e      	ldr	r3, [pc, #120]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 80050ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050ce:	4a1d      	ldr	r2, [pc, #116]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 80050d0:	f043 0304 	orr.w	r3, r3, #4
 80050d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050d8:	4b1a      	ldr	r3, [pc, #104]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 80050da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050de:	4a19      	ldr	r2, [pc, #100]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 80050e0:	f043 0301 	orr.w	r3, r3, #1
 80050e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80050e8:	e018      	b.n	800511c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050ea:	4b16      	ldr	r3, [pc, #88]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 80050ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80050f0:	4a14      	ldr	r2, [pc, #80]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 80050f2:	f043 0301 	orr.w	r3, r3, #1
 80050f6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80050fa:	e00f      	b.n	800511c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80050fc:	4b11      	ldr	r3, [pc, #68]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 80050fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005102:	4a10      	ldr	r2, [pc, #64]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8005104:	f023 0301 	bic.w	r3, r3, #1
 8005108:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800510c:	4b0d      	ldr	r3, [pc, #52]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 800510e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005112:	4a0c      	ldr	r2, [pc, #48]	; (8005144 <HAL_RCC_OscConfig+0x7e4>)
 8005114:	f023 0304 	bic.w	r3, r3, #4
 8005118:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d058      	beq.n	80051d6 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8005124:	f7fd f8ae 	bl	8002284 <HAL_GetTick>
 8005128:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800512a:	e00f      	b.n	800514c <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800512c:	f7fd f8aa 	bl	8002284 <HAL_GetTick>
 8005130:	4602      	mov	r2, r0
 8005132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005134:	1ad3      	subs	r3, r2, r3
 8005136:	f241 3288 	movw	r2, #5000	; 0x1388
 800513a:	4293      	cmp	r3, r2
 800513c:	d906      	bls.n	800514c <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 800513e:	2303      	movs	r3, #3
 8005140:	e2de      	b.n	8005700 <HAL_RCC_OscConfig+0xda0>
 8005142:	bf00      	nop
 8005144:	46020c00 	.word	0x46020c00
 8005148:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800514c:	4b9c      	ldr	r3, [pc, #624]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 800514e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005152:	f003 0302 	and.w	r3, r3, #2
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0e8      	beq.n	800512c <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005162:	2b00      	cmp	r3, #0
 8005164:	d01b      	beq.n	800519e <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005166:	4b96      	ldr	r3, [pc, #600]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 8005168:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800516c:	4a94      	ldr	r2, [pc, #592]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 800516e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005172:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005176:	e00a      	b.n	800518e <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005178:	f7fd f884 	bl	8002284 <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	f241 3288 	movw	r2, #5000	; 0x1388
 8005186:	4293      	cmp	r3, r2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e2b8      	b.n	8005700 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800518e:	4b8c      	ldr	r3, [pc, #560]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 8005190:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0ed      	beq.n	8005178 <HAL_RCC_OscConfig+0x818>
 800519c:	e053      	b.n	8005246 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800519e:	4b88      	ldr	r3, [pc, #544]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 80051a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051a4:	4a86      	ldr	r2, [pc, #536]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 80051a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80051ae:	e00a      	b.n	80051c6 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b0:	f7fd f868 	bl	8002284 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80051be:	4293      	cmp	r3, r2
 80051c0:	d901      	bls.n	80051c6 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e29c      	b.n	8005700 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80051c6:	4b7e      	ldr	r3, [pc, #504]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 80051c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1ed      	bne.n	80051b0 <HAL_RCC_OscConfig+0x850>
 80051d4:	e037      	b.n	8005246 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80051d6:	f7fd f855 	bl	8002284 <HAL_GetTick>
 80051da:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051dc:	e00a      	b.n	80051f4 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051de:	f7fd f851 	bl	8002284 <HAL_GetTick>
 80051e2:	4602      	mov	r2, r0
 80051e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e6:	1ad3      	subs	r3, r2, r3
 80051e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e285      	b.n	8005700 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051f4:	4b72      	ldr	r3, [pc, #456]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 80051f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1ed      	bne.n	80051de <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005202:	4b6f      	ldr	r3, [pc, #444]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 8005204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800520c:	2b00      	cmp	r3, #0
 800520e:	d01a      	beq.n	8005246 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005210:	4b6b      	ldr	r3, [pc, #428]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 8005212:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005216:	4a6a      	ldr	r2, [pc, #424]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 8005218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800521c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005220:	e00a      	b.n	8005238 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005222:	f7fd f82f 	bl	8002284 <HAL_GetTick>
 8005226:	4602      	mov	r2, r0
 8005228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005230:	4293      	cmp	r3, r2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e263      	b.n	8005700 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005238:	4b61      	ldr	r3, [pc, #388]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 800523a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800523e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1ed      	bne.n	8005222 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005246:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800524a:	2b01      	cmp	r3, #1
 800524c:	d107      	bne.n	800525e <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800524e:	4b5c      	ldr	r3, [pc, #368]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 8005250:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005254:	4a5a      	ldr	r2, [pc, #360]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 8005256:	f023 0304 	bic.w	r3, r3, #4
 800525a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0320 	and.w	r3, r3, #32
 8005266:	2b00      	cmp	r3, #0
 8005268:	d036      	beq.n	80052d8 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	2b00      	cmp	r3, #0
 8005270:	d019      	beq.n	80052a6 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005272:	4b53      	ldr	r3, [pc, #332]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a52      	ldr	r2, [pc, #328]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 8005278:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800527c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800527e:	f7fd f801 	bl	8002284 <HAL_GetTick>
 8005282:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005284:	e008      	b.n	8005298 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005286:	f7fc fffd 	bl	8002284 <HAL_GetTick>
 800528a:	4602      	mov	r2, r0
 800528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528e:	1ad3      	subs	r3, r2, r3
 8005290:	2b02      	cmp	r3, #2
 8005292:	d901      	bls.n	8005298 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	e233      	b.n	8005700 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005298:	4b49      	ldr	r3, [pc, #292]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0f0      	beq.n	8005286 <HAL_RCC_OscConfig+0x926>
 80052a4:	e018      	b.n	80052d8 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80052a6:	4b46      	ldr	r3, [pc, #280]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a45      	ldr	r2, [pc, #276]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 80052ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052b0:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80052b2:	f7fc ffe7 	bl	8002284 <HAL_GetTick>
 80052b6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80052b8:	e008      	b.n	80052cc <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052ba:	f7fc ffe3 	bl	8002284 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e219      	b.n	8005700 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80052cc:	4b3c      	ldr	r3, [pc, #240]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1f0      	bne.n	80052ba <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d036      	beq.n	8005352 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d019      	beq.n	8005320 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80052ec:	4b34      	ldr	r3, [pc, #208]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a33      	ldr	r2, [pc, #204]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 80052f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052f6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80052f8:	f7fc ffc4 	bl	8002284 <HAL_GetTick>
 80052fc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005300:	f7fc ffc0 	bl	8002284 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e1f6      	b.n	8005700 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005312:	4b2b      	ldr	r3, [pc, #172]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0f0      	beq.n	8005300 <HAL_RCC_OscConfig+0x9a0>
 800531e:	e018      	b.n	8005352 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005320:	4b27      	ldr	r3, [pc, #156]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a26      	ldr	r2, [pc, #152]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 8005326:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800532a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800532c:	f7fc ffaa 	bl	8002284 <HAL_GetTick>
 8005330:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005332:	e008      	b.n	8005346 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005334:	f7fc ffa6 	bl	8002284 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e1dc      	b.n	8005700 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005346:	4b1e      	ldr	r3, [pc, #120]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1f0      	bne.n	8005334 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	d07f      	beq.n	800545e <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005362:	2b00      	cmp	r3, #0
 8005364:	d062      	beq.n	800542c <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005366:	4b16      	ldr	r3, [pc, #88]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	4a15      	ldr	r2, [pc, #84]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 800536c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005370:	6093      	str	r3, [r2, #8]
 8005372:	4b13      	ldr	r3, [pc, #76]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537e:	4910      	ldr	r1, [pc, #64]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 8005380:	4313      	orrs	r3, r2
 8005382:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005388:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800538c:	d309      	bcc.n	80053a2 <HAL_RCC_OscConfig+0xa42>
 800538e:	4b0c      	ldr	r3, [pc, #48]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f023 021f 	bic.w	r2, r3, #31
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	4909      	ldr	r1, [pc, #36]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 800539c:	4313      	orrs	r3, r2
 800539e:	60cb      	str	r3, [r1, #12]
 80053a0:	e02a      	b.n	80053f8 <HAL_RCC_OscConfig+0xa98>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	da0c      	bge.n	80053c4 <HAL_RCC_OscConfig+0xa64>
 80053aa:	4b05      	ldr	r3, [pc, #20]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	015b      	lsls	r3, r3, #5
 80053b8:	4901      	ldr	r1, [pc, #4]	; (80053c0 <HAL_RCC_OscConfig+0xa60>)
 80053ba:	4313      	orrs	r3, r2
 80053bc:	60cb      	str	r3, [r1, #12]
 80053be:	e01b      	b.n	80053f8 <HAL_RCC_OscConfig+0xa98>
 80053c0:	46020c00 	.word	0x46020c00
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053cc:	d30a      	bcc.n	80053e4 <HAL_RCC_OscConfig+0xa84>
 80053ce:	4ba5      	ldr	r3, [pc, #660]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	029b      	lsls	r3, r3, #10
 80053dc:	49a1      	ldr	r1, [pc, #644]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	60cb      	str	r3, [r1, #12]
 80053e2:	e009      	b.n	80053f8 <HAL_RCC_OscConfig+0xa98>
 80053e4:	4b9f      	ldr	r3, [pc, #636]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a1b      	ldr	r3, [r3, #32]
 80053f0:	03db      	lsls	r3, r3, #15
 80053f2:	499c      	ldr	r1, [pc, #624]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80053f8:	4b9a      	ldr	r3, [pc, #616]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a99      	ldr	r2, [pc, #612]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 80053fe:	f043 0310 	orr.w	r3, r3, #16
 8005402:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005404:	f7fc ff3e 	bl	8002284 <HAL_GetTick>
 8005408:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800540a:	e008      	b.n	800541e <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800540c:	f7fc ff3a 	bl	8002284 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	2b02      	cmp	r3, #2
 8005418:	d901      	bls.n	800541e <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 800541a:	2303      	movs	r3, #3
 800541c:	e170      	b.n	8005700 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800541e:	4b91      	ldr	r3, [pc, #580]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b00      	cmp	r3, #0
 8005428:	d0f0      	beq.n	800540c <HAL_RCC_OscConfig+0xaac>
 800542a:	e018      	b.n	800545e <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 800542c:	4b8d      	ldr	r3, [pc, #564]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a8c      	ldr	r2, [pc, #560]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 8005432:	f023 0310 	bic.w	r3, r3, #16
 8005436:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005438:	f7fc ff24 	bl	8002284 <HAL_GetTick>
 800543c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005440:	f7fc ff20 	bl	8002284 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b02      	cmp	r3, #2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e156      	b.n	8005700 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8005452:	4b84      	ldr	r3, [pc, #528]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0320 	and.w	r3, r3, #32
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1f0      	bne.n	8005440 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005462:	2b00      	cmp	r3, #0
 8005464:	f000 814b 	beq.w	80056fe <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005468:	2300      	movs	r3, #0
 800546a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800546e:	4b7d      	ldr	r3, [pc, #500]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 8005470:	69db      	ldr	r3, [r3, #28]
 8005472:	f003 030c 	and.w	r3, r3, #12
 8005476:	2b0c      	cmp	r3, #12
 8005478:	f000 80fa 	beq.w	8005670 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005480:	2b02      	cmp	r3, #2
 8005482:	f040 80cc 	bne.w	800561e <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005486:	4b77      	ldr	r3, [pc, #476]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a76      	ldr	r2, [pc, #472]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 800548c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005490:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005492:	f7fc fef7 	bl	8002284 <HAL_GetTick>
 8005496:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005498:	e008      	b.n	80054ac <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800549a:	f7fc fef3 	bl	8002284 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e129      	b.n	8005700 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80054ac:	4b6d      	ldr	r3, [pc, #436]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1f0      	bne.n	800549a <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054b8:	4b6a      	ldr	r3, [pc, #424]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 80054ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054be:	f003 0304 	and.w	r3, r3, #4
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d111      	bne.n	80054ea <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80054c6:	4b67      	ldr	r3, [pc, #412]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 80054c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054cc:	4a65      	ldr	r2, [pc, #404]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 80054ce:	f043 0304 	orr.w	r3, r3, #4
 80054d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80054d6:	4b63      	ldr	r3, [pc, #396]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 80054d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	60fb      	str	r3, [r7, #12]
 80054e2:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80054e4:	2301      	movs	r3, #1
 80054e6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80054ea:	4b5f      	ldr	r3, [pc, #380]	; (8005668 <HAL_RCC_OscConfig+0xd08>)
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80054f6:	d102      	bne.n	80054fe <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 80054f8:	2301      	movs	r3, #1
 80054fa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80054fe:	4b5a      	ldr	r3, [pc, #360]	; (8005668 <HAL_RCC_OscConfig+0xd08>)
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	4a59      	ldr	r2, [pc, #356]	; (8005668 <HAL_RCC_OscConfig+0xd08>)
 8005504:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005508:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800550a:	4b56      	ldr	r3, [pc, #344]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 800550c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005512:	f023 0303 	bic.w	r3, r3, #3
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800551e:	3a01      	subs	r2, #1
 8005520:	0212      	lsls	r2, r2, #8
 8005522:	4311      	orrs	r1, r2
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005528:	430a      	orrs	r2, r1
 800552a:	494e      	ldr	r1, [pc, #312]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 800552c:	4313      	orrs	r3, r2
 800552e:	628b      	str	r3, [r1, #40]	; 0x28
 8005530:	4b4c      	ldr	r3, [pc, #304]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 8005532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005534:	4b4d      	ldr	r3, [pc, #308]	; (800566c <HAL_RCC_OscConfig+0xd0c>)
 8005536:	4013      	ands	r3, r2
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800553c:	3a01      	subs	r2, #1
 800553e:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005546:	3a01      	subs	r2, #1
 8005548:	0252      	lsls	r2, r2, #9
 800554a:	b292      	uxth	r2, r2
 800554c:	4311      	orrs	r1, r2
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005552:	3a01      	subs	r2, #1
 8005554:	0412      	lsls	r2, r2, #16
 8005556:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800555a:	4311      	orrs	r1, r2
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005560:	3a01      	subs	r2, #1
 8005562:	0612      	lsls	r2, r2, #24
 8005564:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005568:	430a      	orrs	r2, r1
 800556a:	493e      	ldr	r1, [pc, #248]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 800556c:	4313      	orrs	r3, r2
 800556e:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005570:	4b3c      	ldr	r3, [pc, #240]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 8005572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005574:	4a3b      	ldr	r2, [pc, #236]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 8005576:	f023 0310 	bic.w	r3, r3, #16
 800557a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800557c:	4b39      	ldr	r3, [pc, #228]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005584:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800558c:	00d2      	lsls	r2, r2, #3
 800558e:	4935      	ldr	r1, [pc, #212]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 8005590:	4313      	orrs	r3, r2
 8005592:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005594:	4b33      	ldr	r3, [pc, #204]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 8005596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005598:	4a32      	ldr	r2, [pc, #200]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 800559a:	f043 0310 	orr.w	r3, r3, #16
 800559e:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80055a0:	4b30      	ldr	r3, [pc, #192]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	f023 020c 	bic.w	r2, r3, #12
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ac:	492d      	ldr	r1, [pc, #180]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 80055ae:	4313      	orrs	r3, r2
 80055b0:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80055b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d105      	bne.n	80055c6 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80055ba:	4b2b      	ldr	r3, [pc, #172]	; (8005668 <HAL_RCC_OscConfig+0xd08>)
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	4a2a      	ldr	r2, [pc, #168]	; (8005668 <HAL_RCC_OscConfig+0xd08>)
 80055c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055c4:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80055c6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d107      	bne.n	80055de <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80055ce:	4b25      	ldr	r3, [pc, #148]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 80055d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055d4:	4a23      	ldr	r2, [pc, #140]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 80055d6:	f023 0304 	bic.w	r3, r3, #4
 80055da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80055de:	4b21      	ldr	r3, [pc, #132]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 80055e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e2:	4a20      	ldr	r2, [pc, #128]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 80055e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055e8:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80055ea:	4b1e      	ldr	r3, [pc, #120]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a1d      	ldr	r2, [pc, #116]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 80055f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055f4:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80055f6:	f7fc fe45 	bl	8002284 <HAL_GetTick>
 80055fa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80055fc:	e008      	b.n	8005610 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055fe:	f7fc fe41 	bl	8002284 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	2b02      	cmp	r3, #2
 800560a:	d901      	bls.n	8005610 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 800560c:	2303      	movs	r3, #3
 800560e:	e077      	b.n	8005700 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005610:	4b14      	ldr	r3, [pc, #80]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0f0      	beq.n	80055fe <HAL_RCC_OscConfig+0xc9e>
 800561c:	e06f      	b.n	80056fe <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800561e:	4b11      	ldr	r3, [pc, #68]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a10      	ldr	r2, [pc, #64]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 8005624:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005628:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800562a:	f7fc fe2b 	bl	8002284 <HAL_GetTick>
 800562e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005630:	e008      	b.n	8005644 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005632:	f7fc fe27 	bl	8002284 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	2b02      	cmp	r3, #2
 800563e:	d901      	bls.n	8005644 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8005640:	2303      	movs	r3, #3
 8005642:	e05d      	b.n	8005700 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005644:	4b07      	ldr	r3, [pc, #28]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d1f0      	bne.n	8005632 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005650:	4b04      	ldr	r3, [pc, #16]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 8005652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005654:	4a03      	ldr	r2, [pc, #12]	; (8005664 <HAL_RCC_OscConfig+0xd04>)
 8005656:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800565a:	f023 0303 	bic.w	r3, r3, #3
 800565e:	6293      	str	r3, [r2, #40]	; 0x28
 8005660:	e04d      	b.n	80056fe <HAL_RCC_OscConfig+0xd9e>
 8005662:	bf00      	nop
 8005664:	46020c00 	.word	0x46020c00
 8005668:	46020800 	.word	0x46020800
 800566c:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005670:	4b25      	ldr	r3, [pc, #148]	; (8005708 <HAL_RCC_OscConfig+0xda8>)
 8005672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005674:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005676:	4b24      	ldr	r3, [pc, #144]	; (8005708 <HAL_RCC_OscConfig+0xda8>)
 8005678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567a:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005680:	2b01      	cmp	r3, #1
 8005682:	d03a      	beq.n	80056fa <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	f003 0203 	and.w	r2, r3, #3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800568e:	429a      	cmp	r2, r3
 8005690:	d133      	bne.n	80056fa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	0a1b      	lsrs	r3, r3, #8
 8005696:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d12a      	bne.n	80056fa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	0b1b      	lsrs	r3, r3, #12
 80056a8:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d122      	bne.n	80056fa <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056be:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d11a      	bne.n	80056fa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	0a5b      	lsrs	r3, r3, #9
 80056c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056d0:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d111      	bne.n	80056fa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	0c1b      	lsrs	r3, r3, #16
 80056da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056e2:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d108      	bne.n	80056fa <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	0e1b      	lsrs	r3, r3, #24
 80056ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d001      	beq.n	80056fe <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 80056fa:	2301      	movs	r3, #1
 80056fc:	e000      	b.n	8005700 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3738      	adds	r7, #56	; 0x38
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	46020c00 	.word	0x46020c00

0800570c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e1d9      	b.n	8005ad4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005720:	4b9b      	ldr	r3, [pc, #620]	; (8005990 <HAL_RCC_ClockConfig+0x284>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 030f 	and.w	r3, r3, #15
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d910      	bls.n	8005750 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800572e:	4b98      	ldr	r3, [pc, #608]	; (8005990 <HAL_RCC_ClockConfig+0x284>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f023 020f 	bic.w	r2, r3, #15
 8005736:	4996      	ldr	r1, [pc, #600]	; (8005990 <HAL_RCC_ClockConfig+0x284>)
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	4313      	orrs	r3, r2
 800573c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800573e:	4b94      	ldr	r3, [pc, #592]	; (8005990 <HAL_RCC_ClockConfig+0x284>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	429a      	cmp	r2, r3
 800574a:	d001      	beq.n	8005750 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800574c:	2301      	movs	r3, #1
 800574e:	e1c1      	b.n	8005ad4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0310 	and.w	r3, r3, #16
 8005758:	2b00      	cmp	r3, #0
 800575a:	d010      	beq.n	800577e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	695a      	ldr	r2, [r3, #20]
 8005760:	4b8c      	ldr	r3, [pc, #560]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005768:	429a      	cmp	r2, r3
 800576a:	d908      	bls.n	800577e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800576c:	4b89      	ldr	r3, [pc, #548]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	695b      	ldr	r3, [r3, #20]
 8005778:	4986      	ldr	r1, [pc, #536]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 800577a:	4313      	orrs	r3, r2
 800577c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f003 0308 	and.w	r3, r3, #8
 8005786:	2b00      	cmp	r3, #0
 8005788:	d012      	beq.n	80057b0 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	691a      	ldr	r2, [r3, #16]
 800578e:	4b81      	ldr	r3, [pc, #516]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	091b      	lsrs	r3, r3, #4
 8005794:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005798:	429a      	cmp	r2, r3
 800579a:	d909      	bls.n	80057b0 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800579c:	4b7d      	ldr	r3, [pc, #500]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 800579e:	6a1b      	ldr	r3, [r3, #32]
 80057a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	497a      	ldr	r1, [pc, #488]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 0304 	and.w	r3, r3, #4
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d010      	beq.n	80057de <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	4b74      	ldr	r3, [pc, #464]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d908      	bls.n	80057de <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80057cc:	4b71      	ldr	r3, [pc, #452]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	496e      	ldr	r1, [pc, #440]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d010      	beq.n	800580c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	4b69      	ldr	r3, [pc, #420]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d908      	bls.n	800580c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80057fa:	4b66      	ldr	r3, [pc, #408]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 80057fc:	6a1b      	ldr	r3, [r3, #32]
 80057fe:	f023 020f 	bic.w	r2, r3, #15
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	4963      	ldr	r1, [pc, #396]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 8005808:	4313      	orrs	r3, r2
 800580a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0301 	and.w	r3, r3, #1
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 80d2 	beq.w	80059be <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 800581a:	2300      	movs	r3, #0
 800581c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b03      	cmp	r3, #3
 8005824:	d143      	bne.n	80058ae <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005826:	4b5b      	ldr	r3, [pc, #364]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 8005828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b00      	cmp	r3, #0
 8005832:	d110      	bne.n	8005856 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005834:	4b57      	ldr	r3, [pc, #348]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 8005836:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800583a:	4a56      	ldr	r2, [pc, #344]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 800583c:	f043 0304 	orr.w	r3, r3, #4
 8005840:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005844:	4b53      	ldr	r3, [pc, #332]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 8005846:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800584a:	f003 0304 	and.w	r3, r3, #4
 800584e:	60bb      	str	r3, [r7, #8]
 8005850:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005852:	2301      	movs	r3, #1
 8005854:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005856:	f7fc fd15 	bl	8002284 <HAL_GetTick>
 800585a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800585c:	4b4e      	ldr	r3, [pc, #312]	; (8005998 <HAL_RCC_ClockConfig+0x28c>)
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d00f      	beq.n	8005888 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005868:	e008      	b.n	800587c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800586a:	f7fc fd0b 	bl	8002284 <HAL_GetTick>
 800586e:	4602      	mov	r2, r0
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	1ad3      	subs	r3, r2, r3
 8005874:	2b02      	cmp	r3, #2
 8005876:	d901      	bls.n	800587c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005878:	2303      	movs	r3, #3
 800587a:	e12b      	b.n	8005ad4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800587c:	4b46      	ldr	r3, [pc, #280]	; (8005998 <HAL_RCC_ClockConfig+0x28c>)
 800587e:	68db      	ldr	r3, [r3, #12]
 8005880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d0f0      	beq.n	800586a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005888:	7dfb      	ldrb	r3, [r7, #23]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d107      	bne.n	800589e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800588e:	4b41      	ldr	r3, [pc, #260]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 8005890:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005894:	4a3f      	ldr	r2, [pc, #252]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 8005896:	f023 0304 	bic.w	r3, r3, #4
 800589a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800589e:	4b3d      	ldr	r3, [pc, #244]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d121      	bne.n	80058ee <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e112      	b.n	8005ad4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d107      	bne.n	80058c6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80058b6:	4b37      	ldr	r3, [pc, #220]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d115      	bne.n	80058ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e106      	b.n	8005ad4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d107      	bne.n	80058de <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80058ce:	4b31      	ldr	r3, [pc, #196]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f003 0304 	and.w	r3, r3, #4
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d109      	bne.n	80058ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e0fa      	b.n	8005ad4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058de:	4b2d      	ldr	r3, [pc, #180]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e0f2      	b.n	8005ad4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80058ee:	4b29      	ldr	r3, [pc, #164]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	f023 0203 	bic.w	r2, r3, #3
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	4926      	ldr	r1, [pc, #152]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005900:	f7fc fcc0 	bl	8002284 <HAL_GetTick>
 8005904:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2b03      	cmp	r3, #3
 800590c:	d112      	bne.n	8005934 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800590e:	e00a      	b.n	8005926 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005910:	f7fc fcb8 	bl	8002284 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	f241 3288 	movw	r2, #5000	; 0x1388
 800591e:	4293      	cmp	r3, r2
 8005920:	d901      	bls.n	8005926 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005922:	2303      	movs	r3, #3
 8005924:	e0d6      	b.n	8005ad4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005926:	4b1b      	ldr	r3, [pc, #108]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 8005928:	69db      	ldr	r3, [r3, #28]
 800592a:	f003 030c 	and.w	r3, r3, #12
 800592e:	2b0c      	cmp	r3, #12
 8005930:	d1ee      	bne.n	8005910 <HAL_RCC_ClockConfig+0x204>
 8005932:	e044      	b.n	80059be <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	2b02      	cmp	r3, #2
 800593a:	d112      	bne.n	8005962 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800593c:	e00a      	b.n	8005954 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800593e:	f7fc fca1 	bl	8002284 <HAL_GetTick>
 8005942:	4602      	mov	r2, r0
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	1ad3      	subs	r3, r2, r3
 8005948:	f241 3288 	movw	r2, #5000	; 0x1388
 800594c:	4293      	cmp	r3, r2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e0bf      	b.n	8005ad4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005954:	4b0f      	ldr	r3, [pc, #60]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 8005956:	69db      	ldr	r3, [r3, #28]
 8005958:	f003 030c 	and.w	r3, r3, #12
 800595c:	2b08      	cmp	r3, #8
 800595e:	d1ee      	bne.n	800593e <HAL_RCC_ClockConfig+0x232>
 8005960:	e02d      	b.n	80059be <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d123      	bne.n	80059b2 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800596a:	e00a      	b.n	8005982 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800596c:	f7fc fc8a 	bl	8002284 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	f241 3288 	movw	r2, #5000	; 0x1388
 800597a:	4293      	cmp	r3, r2
 800597c:	d901      	bls.n	8005982 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e0a8      	b.n	8005ad4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005982:	4b04      	ldr	r3, [pc, #16]	; (8005994 <HAL_RCC_ClockConfig+0x288>)
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	f003 030c 	and.w	r3, r3, #12
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1ee      	bne.n	800596c <HAL_RCC_ClockConfig+0x260>
 800598e:	e016      	b.n	80059be <HAL_RCC_ClockConfig+0x2b2>
 8005990:	40022000 	.word	0x40022000
 8005994:	46020c00 	.word	0x46020c00
 8005998:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800599c:	f7fc fc72 	bl	8002284 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d901      	bls.n	80059b2 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80059ae:	2303      	movs	r3, #3
 80059b0:	e090      	b.n	8005ad4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80059b2:	4b4a      	ldr	r3, [pc, #296]	; (8005adc <HAL_RCC_ClockConfig+0x3d0>)
 80059b4:	69db      	ldr	r3, [r3, #28]
 80059b6:	f003 030c 	and.w	r3, r3, #12
 80059ba:	2b04      	cmp	r3, #4
 80059bc:	d1ee      	bne.n	800599c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d010      	beq.n	80059ec <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689a      	ldr	r2, [r3, #8]
 80059ce:	4b43      	ldr	r3, [pc, #268]	; (8005adc <HAL_RCC_ClockConfig+0x3d0>)
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d208      	bcs.n	80059ec <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80059da:	4b40      	ldr	r3, [pc, #256]	; (8005adc <HAL_RCC_ClockConfig+0x3d0>)
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	f023 020f 	bic.w	r2, r3, #15
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	493d      	ldr	r1, [pc, #244]	; (8005adc <HAL_RCC_ClockConfig+0x3d0>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059ec:	4b3c      	ldr	r3, [pc, #240]	; (8005ae0 <HAL_RCC_ClockConfig+0x3d4>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 030f 	and.w	r3, r3, #15
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d210      	bcs.n	8005a1c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fa:	4b39      	ldr	r3, [pc, #228]	; (8005ae0 <HAL_RCC_ClockConfig+0x3d4>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f023 020f 	bic.w	r2, r3, #15
 8005a02:	4937      	ldr	r1, [pc, #220]	; (8005ae0 <HAL_RCC_ClockConfig+0x3d4>)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a0a:	4b35      	ldr	r3, [pc, #212]	; (8005ae0 <HAL_RCC_ClockConfig+0x3d4>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d001      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e05b      	b.n	8005ad4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0304 	and.w	r3, r3, #4
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d010      	beq.n	8005a4a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	4b2b      	ldr	r3, [pc, #172]	; (8005adc <HAL_RCC_ClockConfig+0x3d0>)
 8005a2e:	6a1b      	ldr	r3, [r3, #32]
 8005a30:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d208      	bcs.n	8005a4a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005a38:	4b28      	ldr	r3, [pc, #160]	; (8005adc <HAL_RCC_ClockConfig+0x3d0>)
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	4925      	ldr	r1, [pc, #148]	; (8005adc <HAL_RCC_ClockConfig+0x3d0>)
 8005a46:	4313      	orrs	r3, r2
 8005a48:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0308 	and.w	r3, r3, #8
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d012      	beq.n	8005a7c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	691a      	ldr	r2, [r3, #16]
 8005a5a:	4b20      	ldr	r3, [pc, #128]	; (8005adc <HAL_RCC_ClockConfig+0x3d0>)
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	091b      	lsrs	r3, r3, #4
 8005a60:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d209      	bcs.n	8005a7c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005a68:	4b1c      	ldr	r3, [pc, #112]	; (8005adc <HAL_RCC_ClockConfig+0x3d0>)
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	011b      	lsls	r3, r3, #4
 8005a76:	4919      	ldr	r1, [pc, #100]	; (8005adc <HAL_RCC_ClockConfig+0x3d0>)
 8005a78:	4313      	orrs	r3, r2
 8005a7a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0310 	and.w	r3, r3, #16
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d010      	beq.n	8005aaa <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	695a      	ldr	r2, [r3, #20]
 8005a8c:	4b13      	ldr	r3, [pc, #76]	; (8005adc <HAL_RCC_ClockConfig+0x3d0>)
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d208      	bcs.n	8005aaa <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005a98:	4b10      	ldr	r3, [pc, #64]	; (8005adc <HAL_RCC_ClockConfig+0x3d0>)
 8005a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	695b      	ldr	r3, [r3, #20]
 8005aa4:	490d      	ldr	r1, [pc, #52]	; (8005adc <HAL_RCC_ClockConfig+0x3d0>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005aaa:	f000 f821 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <HAL_RCC_ClockConfig+0x3d0>)
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	490a      	ldr	r1, [pc, #40]	; (8005ae4 <HAL_RCC_ClockConfig+0x3d8>)
 8005aba:	5ccb      	ldrb	r3, [r1, r3]
 8005abc:	fa22 f303 	lsr.w	r3, r2, r3
 8005ac0:	4a09      	ldr	r2, [pc, #36]	; (8005ae8 <HAL_RCC_ClockConfig+0x3dc>)
 8005ac2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005ac4:	4b09      	ldr	r3, [pc, #36]	; (8005aec <HAL_RCC_ClockConfig+0x3e0>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f7fc fb91 	bl	80021f0 <HAL_InitTick>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	73fb      	strb	r3, [r7, #15]

  return status;
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3718      	adds	r7, #24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	46020c00 	.word	0x46020c00
 8005ae0:	40022000 	.word	0x40022000
 8005ae4:	0800ac64 	.word	0x0800ac64
 8005ae8:	20000000 	.word	0x20000000
 8005aec:	20000004 	.word	0x20000004

08005af0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b08b      	sub	sp, #44	; 0x2c
 8005af4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005af6:	2300      	movs	r3, #0
 8005af8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005afa:	2300      	movs	r3, #0
 8005afc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005afe:	4b7b      	ldr	r3, [pc, #492]	; (8005cec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	f003 030c 	and.w	r3, r3, #12
 8005b06:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b08:	4b78      	ldr	r3, [pc, #480]	; (8005cec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0c:	f003 0303 	and.w	r3, r3, #3
 8005b10:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d005      	beq.n	8005b24 <HAL_RCC_GetSysClockFreq+0x34>
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	2b0c      	cmp	r3, #12
 8005b1c:	d121      	bne.n	8005b62 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d11e      	bne.n	8005b62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005b24:	4b71      	ldr	r3, [pc, #452]	; (8005cec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d107      	bne.n	8005b40 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005b30:	4b6e      	ldr	r3, [pc, #440]	; (8005cec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b36:	0b1b      	lsrs	r3, r3, #12
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b3e:	e005      	b.n	8005b4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005b40:	4b6a      	ldr	r3, [pc, #424]	; (8005cec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	0f1b      	lsrs	r3, r3, #28
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005b4c:	4a68      	ldr	r2, [pc, #416]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d110      	bne.n	8005b7e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b60:	e00d      	b.n	8005b7e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b62:	4b62      	ldr	r3, [pc, #392]	; (8005cec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	f003 030c 	and.w	r3, r3, #12
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d102      	bne.n	8005b74 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b6e:	4b61      	ldr	r3, [pc, #388]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b70:	623b      	str	r3, [r7, #32]
 8005b72:	e004      	b.n	8005b7e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	2b08      	cmp	r3, #8
 8005b78:	d101      	bne.n	8005b7e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b7a:	4b5e      	ldr	r3, [pc, #376]	; (8005cf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005b7c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	2b0c      	cmp	r3, #12
 8005b82:	f040 80ac 	bne.w	8005cde <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005b86:	4b59      	ldr	r3, [pc, #356]	; (8005cec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005b90:	4b56      	ldr	r3, [pc, #344]	; (8005cec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b94:	0a1b      	lsrs	r3, r3, #8
 8005b96:	f003 030f 	and.w	r3, r3, #15
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005b9e:	4b53      	ldr	r3, [pc, #332]	; (8005cec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ba2:	091b      	lsrs	r3, r3, #4
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005baa:	4b50      	ldr	r3, [pc, #320]	; (8005cec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	08db      	lsrs	r3, r3, #3
 8005bb0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	fb02 f303 	mul.w	r3, r2, r3
 8005bba:	ee07 3a90 	vmov	s15, r3
 8005bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bc2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 8086 	beq.w	8005cda <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d003      	beq.n	8005bdc <HAL_RCC_GetSysClockFreq+0xec>
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	2b03      	cmp	r3, #3
 8005bd8:	d022      	beq.n	8005c20 <HAL_RCC_GetSysClockFreq+0x130>
 8005bda:	e043      	b.n	8005c64 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	ee07 3a90 	vmov	s15, r3
 8005be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005be6:	eddf 6a44 	vldr	s13, [pc, #272]	; 8005cf8 <HAL_RCC_GetSysClockFreq+0x208>
 8005bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005bee:	4b3f      	ldr	r3, [pc, #252]	; (8005cec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf6:	ee07 3a90 	vmov	s15, r3
 8005bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005bfe:	ed97 6a01 	vldr	s12, [r7, #4]
 8005c02:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005cfc <HAL_RCC_GetSysClockFreq+0x20c>
 8005c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c1a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005c1e:	e046      	b.n	8005cae <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	ee07 3a90 	vmov	s15, r3
 8005c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c2a:	eddf 6a33 	vldr	s13, [pc, #204]	; 8005cf8 <HAL_RCC_GetSysClockFreq+0x208>
 8005c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c32:	4b2e      	ldr	r3, [pc, #184]	; (8005cec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c42:	ed97 6a01 	vldr	s12, [r7, #4]
 8005c46:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005cfc <HAL_RCC_GetSysClockFreq+0x20c>
 8005c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005c5e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005c62:	e024      	b.n	8005cae <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c66:	ee07 3a90 	vmov	s15, r3
 8005c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	ee07 3a90 	vmov	s15, r3
 8005c74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005c7c:	4b1b      	ldr	r3, [pc, #108]	; (8005cec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c84:	ee07 3a90 	vmov	s15, r3
 8005c88:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c8c:	ed97 6a01 	vldr	s12, [r7, #4]
 8005c90:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8005cfc <HAL_RCC_GetSysClockFreq+0x20c>
 8005c94:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005c98:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005c9c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ca0:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ca4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ca8:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005cac:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005cae:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cb2:	0e1b      	lsrs	r3, r3, #24
 8005cb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cb8:	3301      	adds	r3, #1
 8005cba:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	ee07 3a90 	vmov	s15, r3
 8005cc2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005cc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8005cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cd2:	ee17 3a90 	vmov	r3, s15
 8005cd6:	623b      	str	r3, [r7, #32]
 8005cd8:	e001      	b.n	8005cde <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8005cde:	6a3b      	ldr	r3, [r7, #32]
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	372c      	adds	r7, #44	; 0x2c
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cea:	4770      	bx	lr
 8005cec:	46020c00 	.word	0x46020c00
 8005cf0:	0800ac7c 	.word	0x0800ac7c
 8005cf4:	00f42400 	.word	0x00f42400
 8005cf8:	4b742400 	.word	0x4b742400
 8005cfc:	46000000 	.word	0x46000000

08005d00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005d04:	f7ff fef4 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	4b07      	ldr	r3, [pc, #28]	; (8005d28 <HAL_RCC_GetHCLKFreq+0x28>)
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	4906      	ldr	r1, [pc, #24]	; (8005d2c <HAL_RCC_GetHCLKFreq+0x2c>)
 8005d14:	5ccb      	ldrb	r3, [r1, r3]
 8005d16:	fa22 f303 	lsr.w	r3, r2, r3
 8005d1a:	4a05      	ldr	r2, [pc, #20]	; (8005d30 <HAL_RCC_GetHCLKFreq+0x30>)
 8005d1c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005d1e:	4b04      	ldr	r3, [pc, #16]	; (8005d30 <HAL_RCC_GetHCLKFreq+0x30>)
 8005d20:	681b      	ldr	r3, [r3, #0]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	46020c00 	.word	0x46020c00
 8005d2c:	0800ac64 	.word	0x0800ac64
 8005d30:	20000000 	.word	0x20000000

08005d34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005d38:	f7ff ffe2 	bl	8005d00 <HAL_RCC_GetHCLKFreq>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	4b05      	ldr	r3, [pc, #20]	; (8005d54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	091b      	lsrs	r3, r3, #4
 8005d44:	f003 0307 	and.w	r3, r3, #7
 8005d48:	4903      	ldr	r1, [pc, #12]	; (8005d58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d4a:	5ccb      	ldrb	r3, [r1, r3]
 8005d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	bd80      	pop	{r7, pc}
 8005d54:	46020c00 	.word	0x46020c00
 8005d58:	0800ac74 	.word	0x0800ac74

08005d5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005d60:	f7ff ffce 	bl	8005d00 <HAL_RCC_GetHCLKFreq>
 8005d64:	4602      	mov	r2, r0
 8005d66:	4b05      	ldr	r3, [pc, #20]	; (8005d7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	0a1b      	lsrs	r3, r3, #8
 8005d6c:	f003 0307 	and.w	r3, r3, #7
 8005d70:	4903      	ldr	r1, [pc, #12]	; (8005d80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d72:	5ccb      	ldrb	r3, [r1, r3]
 8005d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	46020c00 	.word	0x46020c00
 8005d80:	0800ac74 	.word	0x0800ac74

08005d84 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005d88:	f7ff ffba 	bl	8005d00 <HAL_RCC_GetHCLKFreq>
 8005d8c:	4602      	mov	r2, r0
 8005d8e:	4b05      	ldr	r3, [pc, #20]	; (8005da4 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	091b      	lsrs	r3, r3, #4
 8005d94:	f003 0307 	and.w	r3, r3, #7
 8005d98:	4903      	ldr	r1, [pc, #12]	; (8005da8 <HAL_RCC_GetPCLK3Freq+0x24>)
 8005d9a:	5ccb      	ldrb	r3, [r1, r3]
 8005d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	46020c00 	.word	0x46020c00
 8005da8:	0800ac74 	.word	0x0800ac74

08005dac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005db4:	4b3e      	ldr	r3, [pc, #248]	; (8005eb0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dba:	f003 0304 	and.w	r3, r3, #4
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005dc2:	f7fe fd4f 	bl	8004864 <HAL_PWREx_GetVoltageRange>
 8005dc6:	6178      	str	r0, [r7, #20]
 8005dc8:	e019      	b.n	8005dfe <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005dca:	4b39      	ldr	r3, [pc, #228]	; (8005eb0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dd0:	4a37      	ldr	r2, [pc, #220]	; (8005eb0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005dd2:	f043 0304 	orr.w	r3, r3, #4
 8005dd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005dda:	4b35      	ldr	r3, [pc, #212]	; (8005eb0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005de0:	f003 0304 	and.w	r3, r3, #4
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005de8:	f7fe fd3c 	bl	8004864 <HAL_PWREx_GetVoltageRange>
 8005dec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005dee:	4b30      	ldr	r3, [pc, #192]	; (8005eb0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005df0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005df4:	4a2e      	ldr	r2, [pc, #184]	; (8005eb0 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005df6:	f023 0304 	bic.w	r3, r3, #4
 8005dfa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e04:	d003      	beq.n	8005e0e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e0c:	d109      	bne.n	8005e22 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e14:	d202      	bcs.n	8005e1c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005e16:	2301      	movs	r3, #1
 8005e18:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005e1a:	e033      	b.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005e20:	e030      	b.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e28:	d208      	bcs.n	8005e3c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e30:	d102      	bne.n	8005e38 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005e32:	2303      	movs	r3, #3
 8005e34:	613b      	str	r3, [r7, #16]
 8005e36:	e025      	b.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005e38:	2301      	movs	r3, #1
 8005e3a:	e035      	b.n	8005ea8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e42:	d90f      	bls.n	8005e64 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d109      	bne.n	8005e5e <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005e50:	d902      	bls.n	8005e58 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005e52:	2300      	movs	r3, #0
 8005e54:	613b      	str	r3, [r7, #16]
 8005e56:	e015      	b.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005e58:	2301      	movs	r3, #1
 8005e5a:	613b      	str	r3, [r7, #16]
 8005e5c:	e012      	b.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005e5e:	2300      	movs	r3, #0
 8005e60:	613b      	str	r3, [r7, #16]
 8005e62:	e00f      	b.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e6a:	d109      	bne.n	8005e80 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e72:	d102      	bne.n	8005e7a <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005e74:	2301      	movs	r3, #1
 8005e76:	613b      	str	r3, [r7, #16]
 8005e78:	e004      	b.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8005e7a:	2302      	movs	r3, #2
 8005e7c:	613b      	str	r3, [r7, #16]
 8005e7e:	e001      	b.n	8005e84 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005e80:	2301      	movs	r3, #1
 8005e82:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e84:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f023 020f 	bic.w	r2, r3, #15
 8005e8c:	4909      	ldr	r1, [pc, #36]	; (8005eb4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005e8e:	693b      	ldr	r3, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005e94:	4b07      	ldr	r3, [pc, #28]	; (8005eb4 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 030f 	and.w	r3, r3, #15
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d001      	beq.n	8005ea6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e000      	b.n	8005ea8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	46020c00 	.word	0x46020c00
 8005eb4:	40022000 	.word	0x40022000

08005eb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005eb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ebc:	b0ba      	sub	sp, #232	; 0xe8
 8005ebe:	af00      	add	r7, sp, #0
 8005ec0:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ed0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ed8:	f002 0401 	and.w	r4, r2, #1
 8005edc:	2500      	movs	r5, #0
 8005ede:	ea54 0305 	orrs.w	r3, r4, r5
 8005ee2:	d00b      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005ee4:	4bcb      	ldr	r3, [pc, #812]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ee6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005eea:	f023 0103 	bic.w	r1, r3, #3
 8005eee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ef2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef4:	4ac7      	ldr	r2, [pc, #796]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ef6:	430b      	orrs	r3, r1
 8005ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005efc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f04:	f002 0802 	and.w	r8, r2, #2
 8005f08:	f04f 0900 	mov.w	r9, #0
 8005f0c:	ea58 0309 	orrs.w	r3, r8, r9
 8005f10:	d00b      	beq.n	8005f2a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005f12:	4bc0      	ldr	r3, [pc, #768]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f18:	f023 010c 	bic.w	r1, r3, #12
 8005f1c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f22:	4abc      	ldr	r2, [pc, #752]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f24:	430b      	orrs	r3, r1
 8005f26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f32:	f002 0a04 	and.w	sl, r2, #4
 8005f36:	f04f 0b00 	mov.w	fp, #0
 8005f3a:	ea5a 030b 	orrs.w	r3, sl, fp
 8005f3e:	d00b      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005f40:	4bb4      	ldr	r3, [pc, #720]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f46:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005f4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f50:	4ab0      	ldr	r2, [pc, #704]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f52:	430b      	orrs	r3, r1
 8005f54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f60:	f002 0308 	and.w	r3, r2, #8
 8005f64:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f6e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8005f72:	460b      	mov	r3, r1
 8005f74:	4313      	orrs	r3, r2
 8005f76:	d00b      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005f78:	4ba6      	ldr	r3, [pc, #664]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005f82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f88:	4aa2      	ldr	r2, [pc, #648]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005f8a:	430b      	orrs	r3, r1
 8005f8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f98:	f002 0310 	and.w	r3, r2, #16
 8005f9c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fa6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005faa:	460b      	mov	r3, r1
 8005fac:	4313      	orrs	r3, r2
 8005fae:	d00b      	beq.n	8005fc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005fb0:	4b98      	ldr	r3, [pc, #608]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005fba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fc0:	4a94      	ldr	r2, [pc, #592]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fc2:	430b      	orrs	r3, r1
 8005fc4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005fc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd0:	f002 0320 	and.w	r3, r2, #32
 8005fd4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005fde:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005fe2:	460b      	mov	r3, r1
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	d00b      	beq.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005fe8:	4b8a      	ldr	r3, [pc, #552]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005fea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005fee:	f023 0107 	bic.w	r1, r3, #7
 8005ff2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ff6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ff8:	4a86      	ldr	r2, [pc, #536]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005ffa:	430b      	orrs	r3, r1
 8005ffc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006000:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006008:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800600c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006010:	2300      	movs	r3, #0
 8006012:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006016:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800601a:	460b      	mov	r3, r1
 800601c:	4313      	orrs	r3, r2
 800601e:	d00b      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006020:	4b7c      	ldr	r3, [pc, #496]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006026:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800602a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800602e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006030:	4a78      	ldr	r2, [pc, #480]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006032:	430b      	orrs	r3, r1
 8006034:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006038:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800603c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006040:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006044:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006048:	2300      	movs	r3, #0
 800604a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800604e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006052:	460b      	mov	r3, r1
 8006054:	4313      	orrs	r3, r2
 8006056:	d00b      	beq.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006058:	4b6e      	ldr	r3, [pc, #440]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800605a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800605e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006062:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006068:	4a6a      	ldr	r2, [pc, #424]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800606a:	430b      	orrs	r3, r1
 800606c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006070:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006078:	f402 7380 	and.w	r3, r2, #256	; 0x100
 800607c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006080:	2300      	movs	r3, #0
 8006082:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006086:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800608a:	460b      	mov	r3, r1
 800608c:	4313      	orrs	r3, r2
 800608e:	d00b      	beq.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006090:	4b60      	ldr	r3, [pc, #384]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006092:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006096:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800609a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800609e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a0:	4a5c      	ldr	r2, [pc, #368]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060a2:	430b      	orrs	r3, r1
 80060a4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80060a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060b0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80060b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060b8:	2300      	movs	r3, #0
 80060ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060be:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80060c2:	460b      	mov	r3, r1
 80060c4:	4313      	orrs	r3, r2
 80060c6:	d00b      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80060c8:	4b52      	ldr	r3, [pc, #328]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80060ce:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80060d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060d8:	4a4e      	ldr	r2, [pc, #312]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80060da:	430b      	orrs	r3, r1
 80060dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80060e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e8:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80060ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060f0:	2300      	movs	r3, #0
 80060f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80060f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80060fa:	460b      	mov	r3, r1
 80060fc:	4313      	orrs	r3, r2
 80060fe:	d00b      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006100:	4b44      	ldr	r3, [pc, #272]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006102:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006106:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800610a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800610e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006110:	4a40      	ldr	r2, [pc, #256]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006112:	430b      	orrs	r3, r1
 8006114:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006118:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800611c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006120:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006124:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006128:	2300      	movs	r3, #0
 800612a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800612e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006132:	460b      	mov	r3, r1
 8006134:	4313      	orrs	r3, r2
 8006136:	d00b      	beq.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006138:	4b36      	ldr	r3, [pc, #216]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800613a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800613e:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8006142:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006146:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006148:	4a32      	ldr	r2, [pc, #200]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800614a:	430b      	orrs	r3, r1
 800614c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006150:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006158:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800615c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006160:	2300      	movs	r3, #0
 8006162:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006166:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800616a:	460b      	mov	r3, r1
 800616c:	4313      	orrs	r3, r2
 800616e:	d00c      	beq.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006170:	4b28      	ldr	r3, [pc, #160]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006172:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006176:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800617a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800617e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006182:	4a24      	ldr	r2, [pc, #144]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006184:	430b      	orrs	r3, r1
 8006186:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800618a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800618e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006192:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006196:	67bb      	str	r3, [r7, #120]	; 0x78
 8006198:	2300      	movs	r3, #0
 800619a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800619c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80061a0:	460b      	mov	r3, r1
 80061a2:	4313      	orrs	r3, r2
 80061a4:	d04f      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80061a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ae:	2b80      	cmp	r3, #128	; 0x80
 80061b0:	d02d      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x356>
 80061b2:	2b80      	cmp	r3, #128	; 0x80
 80061b4:	d827      	bhi.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80061b6:	2b60      	cmp	r3, #96	; 0x60
 80061b8:	d02e      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80061ba:	2b60      	cmp	r3, #96	; 0x60
 80061bc:	d823      	bhi.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80061be:	2b40      	cmp	r3, #64	; 0x40
 80061c0:	d006      	beq.n	80061d0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80061c2:	2b40      	cmp	r3, #64	; 0x40
 80061c4:	d81f      	bhi.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d009      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x326>
 80061ca:	2b20      	cmp	r3, #32
 80061cc:	d011      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80061ce:	e01a      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80061d0:	4b10      	ldr	r3, [pc, #64]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d4:	4a0f      	ldr	r2, [pc, #60]	; (8006214 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80061d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061da:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80061dc:	e01d      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061e2:	3308      	adds	r3, #8
 80061e4:	4618      	mov	r0, r3
 80061e6:	f002 f981 	bl	80084ec <RCCEx_PLL2_Config>
 80061ea:	4603      	mov	r3, r0
 80061ec:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80061f0:	e013      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80061f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061f6:	332c      	adds	r3, #44	; 0x2c
 80061f8:	4618      	mov	r0, r3
 80061fa:	f002 fa0f 	bl	800861c <RCCEx_PLL3_Config>
 80061fe:	4603      	mov	r3, r0
 8006200:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006204:	e009      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800620c:	e005      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800620e:	bf00      	nop
 8006210:	e003      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006212:	bf00      	nop
 8006214:	46020c00 	.word	0x46020c00
        break;
 8006218:	bf00      	nop
    }

    if (ret == HAL_OK)
 800621a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10d      	bne.n	800623e <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006222:	4bb6      	ldr	r3, [pc, #728]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006224:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006228:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 800622c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006230:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006234:	4ab1      	ldr	r2, [pc, #708]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006236:	430b      	orrs	r3, r1
 8006238:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800623c:	e003      	b.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800623e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006242:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006246:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006252:	673b      	str	r3, [r7, #112]	; 0x70
 8006254:	2300      	movs	r3, #0
 8006256:	677b      	str	r3, [r7, #116]	; 0x74
 8006258:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800625c:	460b      	mov	r3, r1
 800625e:	4313      	orrs	r3, r2
 8006260:	d053      	beq.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006262:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006266:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800626a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800626e:	d033      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006270:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006274:	d82c      	bhi.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006276:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800627a:	d02f      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x424>
 800627c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006280:	d826      	bhi.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006282:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006286:	d008      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800628c:	d820      	bhi.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x418>
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00a      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8006292:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006296:	d011      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006298:	e01a      	b.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800629a:	4b98      	ldr	r3, [pc, #608]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800629c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800629e:	4a97      	ldr	r2, [pc, #604]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80062a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062a4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80062a6:	e01a      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80062a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062ac:	3308      	adds	r3, #8
 80062ae:	4618      	mov	r0, r3
 80062b0:	f002 f91c 	bl	80084ec <RCCEx_PLL2_Config>
 80062b4:	4603      	mov	r3, r0
 80062b6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80062ba:	e010      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80062bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062c0:	332c      	adds	r3, #44	; 0x2c
 80062c2:	4618      	mov	r0, r3
 80062c4:	f002 f9aa 	bl	800861c <RCCEx_PLL3_Config>
 80062c8:	4603      	mov	r3, r0
 80062ca:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80062ce:	e006      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80062d6:	e002      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80062d8:	bf00      	nop
 80062da:	e000      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80062dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062de:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10d      	bne.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80062e6:	4b85      	ldr	r3, [pc, #532]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80062e8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80062ec:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80062f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80062f8:	4a80      	ldr	r2, [pc, #512]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80062fa:	430b      	orrs	r3, r1
 80062fc:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006300:	e003      	b.n	800630a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006302:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006306:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800630a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800630e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006312:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006316:	66bb      	str	r3, [r7, #104]	; 0x68
 8006318:	2300      	movs	r3, #0
 800631a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800631c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8006320:	460b      	mov	r3, r1
 8006322:	4313      	orrs	r3, r2
 8006324:	d046      	beq.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800632a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800632e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006332:	d028      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006334:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006338:	d821      	bhi.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800633a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800633e:	d022      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006340:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006344:	d81b      	bhi.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006346:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800634a:	d01c      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800634c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006350:	d815      	bhi.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006356:	d008      	beq.n	800636a <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800635c:	d80f      	bhi.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800635e:	2b00      	cmp	r3, #0
 8006360:	d011      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006366:	d00e      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006368:	e009      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800636a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800636e:	3308      	adds	r3, #8
 8006370:	4618      	mov	r0, r3
 8006372:	f002 f8bb 	bl	80084ec <RCCEx_PLL2_Config>
 8006376:	4603      	mov	r3, r0
 8006378:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800637c:	e004      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006384:	e000      	b.n	8006388 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8006386:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006388:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10d      	bne.n	80063ac <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8006390:	4b5a      	ldr	r3, [pc, #360]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006392:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006396:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800639a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800639e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80063a2:	4a56      	ldr	r2, [pc, #344]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80063a4:	430b      	orrs	r3, r1
 80063a6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80063aa:	e003      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80063b0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80063b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063bc:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80063c0:	663b      	str	r3, [r7, #96]	; 0x60
 80063c2:	2300      	movs	r3, #0
 80063c4:	667b      	str	r3, [r7, #100]	; 0x64
 80063c6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80063ca:	460b      	mov	r3, r1
 80063cc:	4313      	orrs	r3, r2
 80063ce:	d03f      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80063d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d81e      	bhi.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x562>
 80063dc:	a201      	add	r2, pc, #4	; (adr r2, 80063e4 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80063de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e2:	bf00      	nop
 80063e4:	08006423 	.word	0x08006423
 80063e8:	080063f9 	.word	0x080063f9
 80063ec:	08006407 	.word	0x08006407
 80063f0:	08006423 	.word	0x08006423
 80063f4:	08006423 	.word	0x08006423
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80063f8:	4b40      	ldr	r3, [pc, #256]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80063fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063fc:	4a3f      	ldr	r2, [pc, #252]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80063fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006402:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006404:	e00e      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800640a:	332c      	adds	r3, #44	; 0x2c
 800640c:	4618      	mov	r0, r3
 800640e:	f002 f905 	bl	800861c <RCCEx_PLL3_Config>
 8006412:	4603      	mov	r3, r0
 8006414:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006418:	e004      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006420:	e000      	b.n	8006424 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8006422:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006424:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10d      	bne.n	8006448 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800642c:	4b33      	ldr	r3, [pc, #204]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800642e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006432:	f023 0107 	bic.w	r1, r3, #7
 8006436:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800643a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643e:	4a2f      	ldr	r2, [pc, #188]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006440:	430b      	orrs	r3, r1
 8006442:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006446:	e003      	b.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006448:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800644c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8006450:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006458:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800645c:	65bb      	str	r3, [r7, #88]	; 0x58
 800645e:	2300      	movs	r3, #0
 8006460:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006462:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006466:	460b      	mov	r3, r1
 8006468:	4313      	orrs	r3, r2
 800646a:	d04d      	beq.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 800646c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006474:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006478:	d028      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x614>
 800647a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800647e:	d821      	bhi.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006480:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006484:	d024      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006486:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800648a:	d81b      	bhi.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800648c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006490:	d00e      	beq.n	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8006492:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006496:	d815      	bhi.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006498:	2b00      	cmp	r3, #0
 800649a:	d01b      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 800649c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064a0:	d110      	bne.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80064a2:	4b16      	ldr	r3, [pc, #88]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80064a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a6:	4a15      	ldr	r2, [pc, #84]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80064a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064ac:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80064ae:	e012      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80064b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064b4:	332c      	adds	r3, #44	; 0x2c
 80064b6:	4618      	mov	r0, r3
 80064b8:	f002 f8b0 	bl	800861c <RCCEx_PLL3_Config>
 80064bc:	4603      	mov	r3, r0
 80064be:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80064c2:	e008      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80064ca:	e004      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80064cc:	bf00      	nop
 80064ce:	e002      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80064d0:	bf00      	nop
 80064d2:	e000      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80064d4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80064d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d110      	bne.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80064de:	4b07      	ldr	r3, [pc, #28]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80064e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064e4:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80064e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064f0:	4a02      	ldr	r2, [pc, #8]	; (80064fc <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80064f2:	430b      	orrs	r3, r1
 80064f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80064f8:	e006      	b.n	8006508 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80064fa:	bf00      	nop
 80064fc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006500:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006504:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006508:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800650c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006510:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006514:	653b      	str	r3, [r7, #80]	; 0x50
 8006516:	2300      	movs	r3, #0
 8006518:	657b      	str	r3, [r7, #84]	; 0x54
 800651a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800651e:	460b      	mov	r3, r1
 8006520:	4313      	orrs	r3, r2
 8006522:	f000 80b5 	beq.w	8006690 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006526:	2300      	movs	r3, #0
 8006528:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800652c:	4b9d      	ldr	r3, [pc, #628]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800652e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006532:	f003 0304 	and.w	r3, r3, #4
 8006536:	2b00      	cmp	r3, #0
 8006538:	d113      	bne.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800653a:	4b9a      	ldr	r3, [pc, #616]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800653c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006540:	4a98      	ldr	r2, [pc, #608]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006542:	f043 0304 	orr.w	r3, r3, #4
 8006546:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800654a:	4b96      	ldr	r3, [pc, #600]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800654c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006550:	f003 0304 	and.w	r3, r3, #4
 8006554:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006558:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 800655c:	2301      	movs	r3, #1
 800655e:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006562:	4b91      	ldr	r3, [pc, #580]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006566:	4a90      	ldr	r2, [pc, #576]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006568:	f043 0301 	orr.w	r3, r3, #1
 800656c:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800656e:	f7fb fe89 	bl	8002284 <HAL_GetTick>
 8006572:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006576:	e00b      	b.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006578:	f7fb fe84 	bl	8002284 <HAL_GetTick>
 800657c:	4602      	mov	r2, r0
 800657e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d903      	bls.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800658e:	e005      	b.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006590:	4b85      	ldr	r3, [pc, #532]	; (80067a8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b00      	cmp	r3, #0
 800659a:	d0ed      	beq.n	8006578 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 800659c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d165      	bne.n	8006670 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80065a4:	4b7f      	ldr	r3, [pc, #508]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80065a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80065b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d023      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80065ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065be:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80065c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d01b      	beq.n	8006602 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065ca:	4b76      	ldr	r3, [pc, #472]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80065cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065d8:	4b72      	ldr	r3, [pc, #456]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80065da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065de:	4a71      	ldr	r2, [pc, #452]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80065e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80065e8:	4b6e      	ldr	r3, [pc, #440]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80065ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80065ee:	4a6d      	ldr	r2, [pc, #436]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80065f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80065f8:	4a6a      	ldr	r2, [pc, #424]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80065fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006606:	f003 0301 	and.w	r3, r3, #1
 800660a:	2b00      	cmp	r3, #0
 800660c:	d019      	beq.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800660e:	f7fb fe39 	bl	8002284 <HAL_GetTick>
 8006612:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006616:	e00d      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006618:	f7fb fe34 	bl	8002284 <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006622:	1ad2      	subs	r2, r2, r3
 8006624:	f241 3388 	movw	r3, #5000	; 0x1388
 8006628:	429a      	cmp	r2, r3
 800662a:	d903      	bls.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800662c:	2303      	movs	r3, #3
 800662e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8006632:	e006      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006634:	4b5b      	ldr	r3, [pc, #364]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006636:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800663a:	f003 0302 	and.w	r3, r3, #2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d0ea      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8006642:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10d      	bne.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800664a:	4b56      	ldr	r3, [pc, #344]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800664c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006650:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006654:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006658:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800665c:	4a51      	ldr	r2, [pc, #324]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800665e:	430b      	orrs	r3, r1
 8006660:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006664:	e008      	b.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006666:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800666a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800666e:	e003      	b.n	8006678 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006670:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006674:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006678:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 800667c:	2b01      	cmp	r3, #1
 800667e:	d107      	bne.n	8006690 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006680:	4b48      	ldr	r3, [pc, #288]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006682:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006686:	4a47      	ldr	r2, [pc, #284]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006688:	f023 0304 	bic.w	r3, r3, #4
 800668c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006690:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006698:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800669c:	64bb      	str	r3, [r7, #72]	; 0x48
 800669e:	2300      	movs	r3, #0
 80066a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066a2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80066a6:	460b      	mov	r3, r1
 80066a8:	4313      	orrs	r3, r2
 80066aa:	d042      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80066ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066b0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80066b4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80066b8:	d022      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80066ba:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80066be:	d81b      	bhi.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80066c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066c4:	d011      	beq.n	80066ea <HAL_RCCEx_PeriphCLKConfig+0x832>
 80066c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80066ca:	d815      	bhi.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d019      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80066d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80066d4:	d110      	bne.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80066d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066da:	3308      	adds	r3, #8
 80066dc:	4618      	mov	r0, r3
 80066de:	f001 ff05 	bl	80084ec <RCCEx_PLL2_Config>
 80066e2:	4603      	mov	r3, r0
 80066e4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80066e8:	e00d      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066ea:	4b2e      	ldr	r3, [pc, #184]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80066ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ee:	4a2d      	ldr	r2, [pc, #180]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80066f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066f4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80066f6:	e006      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80066f8:	2301      	movs	r3, #1
 80066fa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80066fe:	e002      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006700:	bf00      	nop
 8006702:	e000      	b.n	8006706 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006704:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006706:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800670a:	2b00      	cmp	r3, #0
 800670c:	d10d      	bne.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800670e:	4b25      	ldr	r3, [pc, #148]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006714:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006718:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800671c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006720:	4a20      	ldr	r2, [pc, #128]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006722:	430b      	orrs	r3, r1
 8006724:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006728:	e003      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800672a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800672e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006732:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800673a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800673e:	643b      	str	r3, [r7, #64]	; 0x40
 8006740:	2300      	movs	r3, #0
 8006742:	647b      	str	r3, [r7, #68]	; 0x44
 8006744:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006748:	460b      	mov	r3, r1
 800674a:	4313      	orrs	r3, r2
 800674c:	d032      	beq.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800674e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006752:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006756:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800675a:	d00b      	beq.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 800675c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006760:	d804      	bhi.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8006762:	2b00      	cmp	r3, #0
 8006764:	d008      	beq.n	8006778 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006766:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800676a:	d007      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006772:	e004      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006774:	bf00      	nop
 8006776:	e002      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006778:	bf00      	nop
 800677a:	e000      	b.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800677c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800677e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d112      	bne.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006786:	4b07      	ldr	r3, [pc, #28]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006788:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800678c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006790:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006794:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006798:	4a02      	ldr	r2, [pc, #8]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800679a:	430b      	orrs	r3, r1
 800679c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80067a0:	e008      	b.n	80067b4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80067a2:	bf00      	nop
 80067a4:	46020c00 	.word	0x46020c00
 80067a8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ac:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80067b0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80067b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067bc:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80067c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80067c2:	2300      	movs	r3, #0
 80067c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80067c6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80067ca:	460b      	mov	r3, r1
 80067cc:	4313      	orrs	r3, r2
 80067ce:	d00c      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80067d0:	4b98      	ldr	r3, [pc, #608]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80067d2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80067d6:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80067da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067e2:	4a94      	ldr	r2, [pc, #592]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80067e4:	430b      	orrs	r3, r1
 80067e6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 80067ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f2:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80067f6:	633b      	str	r3, [r7, #48]	; 0x30
 80067f8:	2300      	movs	r3, #0
 80067fa:	637b      	str	r3, [r7, #52]	; 0x34
 80067fc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006800:	460b      	mov	r3, r1
 8006802:	4313      	orrs	r3, r2
 8006804:	d019      	beq.n	800683a <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006806:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800680a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800680e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006812:	d105      	bne.n	8006820 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006814:	4b87      	ldr	r3, [pc, #540]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006818:	4a86      	ldr	r2, [pc, #536]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800681a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800681e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006820:	4b84      	ldr	r3, [pc, #528]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006822:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006826:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800682a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800682e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006832:	4a80      	ldr	r2, [pc, #512]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006834:	430b      	orrs	r3, r1
 8006836:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800683a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800683e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006842:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006846:	62bb      	str	r3, [r7, #40]	; 0x28
 8006848:	2300      	movs	r3, #0
 800684a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800684c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006850:	460b      	mov	r3, r1
 8006852:	4313      	orrs	r3, r2
 8006854:	d00c      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006856:	4b77      	ldr	r3, [pc, #476]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800685c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006860:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006864:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006868:	4972      	ldr	r1, [pc, #456]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800686a:	4313      	orrs	r3, r2
 800686c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006870:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800687c:	623b      	str	r3, [r7, #32]
 800687e:	2300      	movs	r3, #0
 8006880:	627b      	str	r3, [r7, #36]	; 0x24
 8006882:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006886:	460b      	mov	r3, r1
 8006888:	4313      	orrs	r3, r2
 800688a:	d00c      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800688c:	4b69      	ldr	r3, [pc, #420]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800688e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006892:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800689a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800689e:	4965      	ldr	r1, [pc, #404]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80068a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ae:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80068b2:	61bb      	str	r3, [r7, #24]
 80068b4:	2300      	movs	r3, #0
 80068b6:	61fb      	str	r3, [r7, #28]
 80068b8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80068bc:	460b      	mov	r3, r1
 80068be:	4313      	orrs	r3, r2
 80068c0:	d00c      	beq.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80068c2:	4b5c      	ldr	r3, [pc, #368]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80068c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80068c8:	f023 0218 	bic.w	r2, r3, #24
 80068cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068d0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80068d4:	4957      	ldr	r1, [pc, #348]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80068d6:	4313      	orrs	r3, r2
 80068d8:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80068dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e4:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 80068e8:	613b      	str	r3, [r7, #16]
 80068ea:	2300      	movs	r3, #0
 80068ec:	617b      	str	r3, [r7, #20]
 80068ee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80068f2:	460b      	mov	r3, r1
 80068f4:	4313      	orrs	r3, r2
 80068f6:	d032      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80068f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006900:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006904:	d105      	bne.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006906:	4b4b      	ldr	r3, [pc, #300]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690a:	4a4a      	ldr	r2, [pc, #296]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800690c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006910:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006912:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006916:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800691a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800691e:	d108      	bne.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006920:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006924:	3308      	adds	r3, #8
 8006926:	4618      	mov	r0, r3
 8006928:	f001 fde0 	bl	80084ec <RCCEx_PLL2_Config>
 800692c:	4603      	mov	r3, r0
 800692e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8006932:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10d      	bne.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800693a:	4b3e      	ldr	r3, [pc, #248]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800693c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006940:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006944:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006948:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800694c:	4939      	ldr	r1, [pc, #228]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800694e:	4313      	orrs	r3, r2
 8006950:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006954:	e003      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006956:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800695a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 800695e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006966:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 800696a:	60bb      	str	r3, [r7, #8]
 800696c:	2300      	movs	r3, #0
 800696e:	60fb      	str	r3, [r7, #12]
 8006970:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006974:	460b      	mov	r3, r1
 8006976:	4313      	orrs	r3, r2
 8006978:	d03a      	beq.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 800697a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800697e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006982:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006986:	d00e      	beq.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8006988:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800698c:	d815      	bhi.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800698e:	2b00      	cmp	r3, #0
 8006990:	d017      	beq.n	80069c2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006992:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006996:	d110      	bne.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006998:	4b26      	ldr	r3, [pc, #152]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800699a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699c:	4a25      	ldr	r2, [pc, #148]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800699e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069a2:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80069a4:	e00e      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069aa:	3308      	adds	r3, #8
 80069ac:	4618      	mov	r0, r3
 80069ae:	f001 fd9d 	bl	80084ec <RCCEx_PLL2_Config>
 80069b2:	4603      	mov	r3, r0
 80069b4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80069b8:	e004      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80069c0:	e000      	b.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 80069c2:	bf00      	nop
    }
    if (ret == HAL_OK)
 80069c4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d10d      	bne.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80069cc:	4b19      	ldr	r3, [pc, #100]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80069ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80069d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80069d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069de:	4915      	ldr	r1, [pc, #84]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80069e0:	4313      	orrs	r3, r2
 80069e2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 80069e6:	e003      	b.n	80069f0 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80069ec:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 80069f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f8:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80069fc:	603b      	str	r3, [r7, #0]
 80069fe:	2300      	movs	r3, #0
 8006a00:	607b      	str	r3, [r7, #4]
 8006a02:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006a06:	460b      	mov	r3, r1
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	d00c      	beq.n	8006a26 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006a0c:	4b09      	ldr	r3, [pc, #36]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006a0e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006a12:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006a16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a1a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a1e:	4905      	ldr	r1, [pc, #20]	; (8006a34 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006a26:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	37e8      	adds	r7, #232	; 0xe8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a34:	46020c00 	.word	0x46020c00

08006a38 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b089      	sub	sp, #36	; 0x24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006a40:	4bac      	ldr	r3, [pc, #688]	; (8006cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a48:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006a4a:	4baa      	ldr	r3, [pc, #680]	; (8006cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4e:	f003 0303 	and.w	r3, r3, #3
 8006a52:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006a54:	4ba7      	ldr	r3, [pc, #668]	; (8006cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a58:	0a1b      	lsrs	r3, r3, #8
 8006a5a:	f003 030f 	and.w	r3, r3, #15
 8006a5e:	3301      	adds	r3, #1
 8006a60:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8006a62:	4ba4      	ldr	r3, [pc, #656]	; (8006cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a66:	f003 0310 	and.w	r3, r3, #16
 8006a6a:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006a6c:	4ba1      	ldr	r3, [pc, #644]	; (8006cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a70:	08db      	lsrs	r3, r3, #3
 8006a72:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	fb02 f303 	mul.w	r3, r2, r3
 8006a7c:	ee07 3a90 	vmov	s15, r3
 8006a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a84:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f000 8123 	beq.w	8006cd6 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	2b03      	cmp	r3, #3
 8006a94:	d062      	beq.n	8006b5c <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	2b03      	cmp	r3, #3
 8006a9a:	f200 8081 	bhi.w	8006ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d024      	beq.n	8006aee <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	2b02      	cmp	r3, #2
 8006aa8:	d17a      	bne.n	8006ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	ee07 3a90 	vmov	s15, r3
 8006ab0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab4:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006ab8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006abc:	4b8d      	ldr	r3, [pc, #564]	; (8006cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac4:	ee07 3a90 	vmov	s15, r3
 8006ac8:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006acc:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ad0:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006cfc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006ad4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ad8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006adc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ae0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ae4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ae8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006aec:	e08f      	b.n	8006c0e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006aee:	4b81      	ldr	r3, [pc, #516]	; (8006cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d005      	beq.n	8006b06 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8006afa:	4b7e      	ldr	r3, [pc, #504]	; (8006cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	0f1b      	lsrs	r3, r3, #28
 8006b00:	f003 030f 	and.w	r3, r3, #15
 8006b04:	e006      	b.n	8006b14 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8006b06:	4b7b      	ldr	r3, [pc, #492]	; (8006cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b08:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006b0c:	041b      	lsls	r3, r3, #16
 8006b0e:	0f1b      	lsrs	r3, r3, #28
 8006b10:	f003 030f 	and.w	r3, r3, #15
 8006b14:	4a7a      	ldr	r2, [pc, #488]	; (8006d00 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006b16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b1a:	ee07 3a90 	vmov	s15, r3
 8006b1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	ee07 3a90 	vmov	s15, r3
 8006b28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	ee07 3a90 	vmov	s15, r3
 8006b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b3e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006cfc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b5a:	e058      	b.n	8006c0e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	ee07 3a90 	vmov	s15, r3
 8006b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b66:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b6e:	4b61      	ldr	r3, [pc, #388]	; (8006cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b76:	ee07 3a90 	vmov	s15, r3
 8006b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b82:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006cfc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b9e:	e036      	b.n	8006c0e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006ba0:	4b54      	ldr	r3, [pc, #336]	; (8006cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d005      	beq.n	8006bb8 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8006bac:	4b51      	ldr	r3, [pc, #324]	; (8006cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	0f1b      	lsrs	r3, r3, #28
 8006bb2:	f003 030f 	and.w	r3, r3, #15
 8006bb6:	e006      	b.n	8006bc6 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8006bb8:	4b4e      	ldr	r3, [pc, #312]	; (8006cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006bba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006bbe:	041b      	lsls	r3, r3, #16
 8006bc0:	0f1b      	lsrs	r3, r3, #28
 8006bc2:	f003 030f 	and.w	r3, r3, #15
 8006bc6:	4a4e      	ldr	r2, [pc, #312]	; (8006d00 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bcc:	ee07 3a90 	vmov	s15, r3
 8006bd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	ee07 3a90 	vmov	s15, r3
 8006bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	ee07 3a90 	vmov	s15, r3
 8006be8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bec:	ed97 6a02 	vldr	s12, [r7, #8]
 8006bf0:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006cfc <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006bf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c00:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c0c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006c0e:	4b39      	ldr	r3, [pc, #228]	; (8006cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d017      	beq.n	8006c4a <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c1a:	4b36      	ldr	r3, [pc, #216]	; (8006cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006c1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c1e:	0a5b      	lsrs	r3, r3, #9
 8006c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c24:	ee07 3a90 	vmov	s15, r3
 8006c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006c2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c30:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c34:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c40:	ee17 2a90 	vmov	r2, s15
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	e002      	b.n	8006c50 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006c50:	4b28      	ldr	r3, [pc, #160]	; (8006cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d017      	beq.n	8006c8c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c5c:	4b25      	ldr	r3, [pc, #148]	; (8006cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c60:	0c1b      	lsrs	r3, r3, #16
 8006c62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c66:	ee07 3a90 	vmov	s15, r3
 8006c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006c6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c72:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c76:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c82:	ee17 2a90 	vmov	r2, s15
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	605a      	str	r2, [r3, #4]
 8006c8a:	e002      	b.n	8006c92 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006c92:	4b18      	ldr	r3, [pc, #96]	; (8006cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d017      	beq.n	8006cce <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006c9e:	4b15      	ldr	r3, [pc, #84]	; (8006cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca2:	0e1b      	lsrs	r3, r3, #24
 8006ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ca8:	ee07 3a90 	vmov	s15, r3
 8006cac:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006cb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cb4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006cb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cc4:	ee17 2a90 	vmov	r2, s15
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006ccc:	e00c      	b.n	8006ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	609a      	str	r2, [r3, #8]
}
 8006cd4:	e008      	b.n	8006ce8 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	609a      	str	r2, [r3, #8]
}
 8006ce8:	bf00      	nop
 8006cea:	3724      	adds	r7, #36	; 0x24
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	46020c00 	.word	0x46020c00
 8006cf8:	4b742400 	.word	0x4b742400
 8006cfc:	46000000 	.word	0x46000000
 8006d00:	0800ac7c 	.word	0x0800ac7c

08006d04 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b089      	sub	sp, #36	; 0x24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006d0c:	4bac      	ldr	r3, [pc, #688]	; (8006fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d14:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006d16:	4baa      	ldr	r3, [pc, #680]	; (8006fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d1a:	f003 0303 	and.w	r3, r3, #3
 8006d1e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006d20:	4ba7      	ldr	r3, [pc, #668]	; (8006fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d24:	0a1b      	lsrs	r3, r3, #8
 8006d26:	f003 030f 	and.w	r3, r3, #15
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8006d2e:	4ba4      	ldr	r3, [pc, #656]	; (8006fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d32:	f003 0310 	and.w	r3, r3, #16
 8006d36:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006d38:	4ba1      	ldr	r3, [pc, #644]	; (8006fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3c:	08db      	lsrs	r3, r3, #3
 8006d3e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	fb02 f303 	mul.w	r3, r2, r3
 8006d48:	ee07 3a90 	vmov	s15, r3
 8006d4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d50:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	f000 8123 	beq.w	8006fa2 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d062      	beq.n	8006e28 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	2b03      	cmp	r3, #3
 8006d66:	f200 8081 	bhi.w	8006e6c <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2b01      	cmp	r3, #1
 8006d6e:	d024      	beq.n	8006dba <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d17a      	bne.n	8006e6c <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	ee07 3a90 	vmov	s15, r3
 8006d7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d80:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006d84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d88:	4b8d      	ldr	r3, [pc, #564]	; (8006fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d90:	ee07 3a90 	vmov	s15, r3
 8006d94:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006d98:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d9c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006da0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006da4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006da8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dac:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006db0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006db4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006db8:	e08f      	b.n	8006eda <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006dba:	4b81      	ldr	r3, [pc, #516]	; (8006fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006dbc:	689b      	ldr	r3, [r3, #8]
 8006dbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d005      	beq.n	8006dd2 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8006dc6:	4b7e      	ldr	r3, [pc, #504]	; (8006fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	0f1b      	lsrs	r3, r3, #28
 8006dcc:	f003 030f 	and.w	r3, r3, #15
 8006dd0:	e006      	b.n	8006de0 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8006dd2:	4b7b      	ldr	r3, [pc, #492]	; (8006fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006dd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006dd8:	041b      	lsls	r3, r3, #16
 8006dda:	0f1b      	lsrs	r3, r3, #28
 8006ddc:	f003 030f 	and.w	r3, r3, #15
 8006de0:	4a7a      	ldr	r2, [pc, #488]	; (8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006de2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	ee07 3a90 	vmov	s15, r3
 8006df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006dfc:	69bb      	ldr	r3, [r7, #24]
 8006dfe:	ee07 3a90 	vmov	s15, r3
 8006e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e06:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e0a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e26:	e058      	b.n	8006eda <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e32:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006fc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e3a:	4b61      	ldr	r3, [pc, #388]	; (8006fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e42:	ee07 3a90 	vmov	s15, r3
 8006e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e4a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e4e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006e5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e6a:	e036      	b.n	8006eda <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006e6c:	4b54      	ldr	r3, [pc, #336]	; (8006fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d005      	beq.n	8006e84 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8006e78:	4b51      	ldr	r3, [pc, #324]	; (8006fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	0f1b      	lsrs	r3, r3, #28
 8006e7e:	f003 030f 	and.w	r3, r3, #15
 8006e82:	e006      	b.n	8006e92 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8006e84:	4b4e      	ldr	r3, [pc, #312]	; (8006fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006e86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e8a:	041b      	lsls	r3, r3, #16
 8006e8c:	0f1b      	lsrs	r3, r3, #28
 8006e8e:	f003 030f 	and.w	r3, r3, #15
 8006e92:	4a4e      	ldr	r2, [pc, #312]	; (8006fcc <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006e94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e98:	ee07 3a90 	vmov	s15, r3
 8006e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	ee07 3a90 	vmov	s15, r3
 8006ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	ee07 3a90 	vmov	s15, r3
 8006eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006eb8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ebc:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006fc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006ec0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ec8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ecc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ed4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ed8:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006eda:	4b39      	ldr	r3, [pc, #228]	; (8006fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d017      	beq.n	8006f16 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006ee6:	4b36      	ldr	r3, [pc, #216]	; (8006fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eea:	0a5b      	lsrs	r3, r3, #9
 8006eec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ef0:	ee07 3a90 	vmov	s15, r3
 8006ef4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006ef8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006efc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f00:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f0c:	ee17 2a90 	vmov	r2, s15
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	e002      	b.n	8006f1c <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006f1c:	4b28      	ldr	r3, [pc, #160]	; (8006fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d017      	beq.n	8006f58 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f28:	4b25      	ldr	r3, [pc, #148]	; (8006fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f2c:	0c1b      	lsrs	r3, r3, #16
 8006f2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f32:	ee07 3a90 	vmov	s15, r3
 8006f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006f3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f3e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f42:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f4e:	ee17 2a90 	vmov	r2, s15
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	605a      	str	r2, [r3, #4]
 8006f56:	e002      	b.n	8006f5e <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006f5e:	4b18      	ldr	r3, [pc, #96]	; (8006fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d017      	beq.n	8006f9a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f6a:	4b15      	ldr	r3, [pc, #84]	; (8006fc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006f6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f6e:	0e1b      	lsrs	r3, r3, #24
 8006f70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f74:	ee07 3a90 	vmov	s15, r3
 8006f78:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8006f7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f80:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006f84:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f90:	ee17 2a90 	vmov	r2, s15
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006f98:	e00c      	b.n	8006fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	609a      	str	r2, [r3, #8]
}
 8006fa0:	e008      	b.n	8006fb4 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	609a      	str	r2, [r3, #8]
}
 8006fb4:	bf00      	nop
 8006fb6:	3724      	adds	r7, #36	; 0x24
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbe:	4770      	bx	lr
 8006fc0:	46020c00 	.word	0x46020c00
 8006fc4:	4b742400 	.word	0x4b742400
 8006fc8:	46000000 	.word	0x46000000
 8006fcc:	0800ac7c 	.word	0x0800ac7c

08006fd0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b089      	sub	sp, #36	; 0x24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006fd8:	4bac      	ldr	r3, [pc, #688]	; (800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fe0:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006fe2:	4baa      	ldr	r3, [pc, #680]	; (800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe6:	f003 0303 	and.w	r3, r3, #3
 8006fea:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006fec:	4ba7      	ldr	r3, [pc, #668]	; (800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff0:	0a1b      	lsrs	r3, r3, #8
 8006ff2:	f003 030f 	and.w	r3, r3, #15
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8006ffa:	4ba4      	ldr	r3, [pc, #656]	; (800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ffe:	f003 0310 	and.w	r3, r3, #16
 8007002:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007004:	4ba1      	ldr	r3, [pc, #644]	; (800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007008:	08db      	lsrs	r3, r3, #3
 800700a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	fb02 f303 	mul.w	r3, r2, r3
 8007014:	ee07 3a90 	vmov	s15, r3
 8007018:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800701c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	2b00      	cmp	r3, #0
 8007024:	f000 8123 	beq.w	800726e <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	2b03      	cmp	r3, #3
 800702c:	d062      	beq.n	80070f4 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2b03      	cmp	r3, #3
 8007032:	f200 8081 	bhi.w	8007138 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2b01      	cmp	r3, #1
 800703a:	d024      	beq.n	8007086 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	2b02      	cmp	r3, #2
 8007040:	d17a      	bne.n	8007138 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	ee07 3a90 	vmov	s15, r3
 8007048:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800704c:	eddf 6a90 	vldr	s13, [pc, #576]	; 8007290 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8007050:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007054:	4b8d      	ldr	r3, [pc, #564]	; (800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800705c:	ee07 3a90 	vmov	s15, r3
 8007060:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007064:	ed97 6a02 	vldr	s12, [r7, #8]
 8007068:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8007294 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800706c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007070:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007074:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007078:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800707c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007080:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8007084:	e08f      	b.n	80071a6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007086:	4b81      	ldr	r3, [pc, #516]	; (800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8007092:	4b7e      	ldr	r3, [pc, #504]	; (800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	0f1b      	lsrs	r3, r3, #28
 8007098:	f003 030f 	and.w	r3, r3, #15
 800709c:	e006      	b.n	80070ac <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 800709e:	4b7b      	ldr	r3, [pc, #492]	; (800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80070a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80070a4:	041b      	lsls	r3, r3, #16
 80070a6:	0f1b      	lsrs	r3, r3, #28
 80070a8:	f003 030f 	and.w	r3, r3, #15
 80070ac:	4a7a      	ldr	r2, [pc, #488]	; (8007298 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80070ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070b2:	ee07 3a90 	vmov	s15, r3
 80070b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	ee07 3a90 	vmov	s15, r3
 80070c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070c4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80070c8:	69bb      	ldr	r3, [r7, #24]
 80070ca:	ee07 3a90 	vmov	s15, r3
 80070ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80070d6:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007294 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80070da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80070ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070f2:	e058      	b.n	80071a6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	ee07 3a90 	vmov	s15, r3
 80070fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070fe:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007290 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8007102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007106:	4b61      	ldr	r3, [pc, #388]	; (800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800710a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800710e:	ee07 3a90 	vmov	s15, r3
 8007112:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007116:	ed97 6a02 	vldr	s12, [r7, #8]
 800711a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007294 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800711e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007122:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800712a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800712e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007136:	e036      	b.n	80071a6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007138:	4b54      	ldr	r3, [pc, #336]	; (800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d005      	beq.n	8007150 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8007144:	4b51      	ldr	r3, [pc, #324]	; (800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	0f1b      	lsrs	r3, r3, #28
 800714a:	f003 030f 	and.w	r3, r3, #15
 800714e:	e006      	b.n	800715e <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8007150:	4b4e      	ldr	r3, [pc, #312]	; (800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007152:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007156:	041b      	lsls	r3, r3, #16
 8007158:	0f1b      	lsrs	r3, r3, #28
 800715a:	f003 030f 	and.w	r3, r3, #15
 800715e:	4a4e      	ldr	r2, [pc, #312]	; (8007298 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8007160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007164:	ee07 3a90 	vmov	s15, r3
 8007168:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	ee07 3a90 	vmov	s15, r3
 8007172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007176:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	ee07 3a90 	vmov	s15, r3
 8007180:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007184:	ed97 6a02 	vldr	s12, [r7, #8]
 8007188:	eddf 5a42 	vldr	s11, [pc, #264]	; 8007294 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800718c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007190:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007194:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007198:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800719c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071a0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071a4:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80071a6:	4b39      	ldr	r3, [pc, #228]	; (800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80071a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d017      	beq.n	80071e2 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80071b2:	4b36      	ldr	r3, [pc, #216]	; (800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80071b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b6:	0a5b      	lsrs	r3, r3, #9
 80071b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071bc:	ee07 3a90 	vmov	s15, r3
 80071c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80071c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80071c8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80071cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80071d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071d8:	ee17 2a90 	vmov	r2, s15
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	601a      	str	r2, [r3, #0]
 80071e0:	e002      	b.n	80071e8 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80071e8:	4b28      	ldr	r3, [pc, #160]	; (800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80071ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d017      	beq.n	8007224 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80071f4:	4b25      	ldr	r3, [pc, #148]	; (800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80071f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f8:	0c1b      	lsrs	r3, r3, #16
 80071fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071fe:	ee07 3a90 	vmov	s15, r3
 8007202:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007206:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800720a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800720e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800721a:	ee17 2a90 	vmov	r2, s15
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	605a      	str	r2, [r3, #4]
 8007222:	e002      	b.n	800722a <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2200      	movs	r2, #0
 8007228:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 800722a:	4b18      	ldr	r3, [pc, #96]	; (800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800722c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800722e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007232:	2b00      	cmp	r3, #0
 8007234:	d017      	beq.n	8007266 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007236:	4b15      	ldr	r3, [pc, #84]	; (800728c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800723a:	0e1b      	lsrs	r3, r3, #24
 800723c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007240:	ee07 3a90 	vmov	s15, r3
 8007244:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007248:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800724c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007250:	edd7 6a07 	vldr	s13, [r7, #28]
 8007254:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007258:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800725c:	ee17 2a90 	vmov	r2, s15
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007264:	e00c      	b.n	8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	609a      	str	r2, [r3, #8]
}
 800726c:	e008      	b.n	8007280 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	609a      	str	r2, [r3, #8]
}
 8007280:	bf00      	nop
 8007282:	3724      	adds	r7, #36	; 0x24
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr
 800728c:	46020c00 	.word	0x46020c00
 8007290:	4b742400 	.word	0x4b742400
 8007294:	46000000 	.word	0x46000000
 8007298:	0800ac7c 	.word	0x0800ac7c

0800729c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b08e      	sub	sp, #56	; 0x38
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80072a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072aa:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80072ae:	430b      	orrs	r3, r1
 80072b0:	d145      	bne.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80072b2:	4ba7      	ldr	r3, [pc, #668]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80072b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072bc:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80072be:	4ba4      	ldr	r3, [pc, #656]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80072c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072c4:	f003 0302 	and.w	r3, r3, #2
 80072c8:	2b02      	cmp	r3, #2
 80072ca:	d108      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80072cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072d2:	d104      	bne.n	80072de <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80072d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072d8:	637b      	str	r3, [r7, #52]	; 0x34
 80072da:	f001 b8fc 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80072de:	4b9c      	ldr	r3, [pc, #624]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80072e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80072e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072ec:	d114      	bne.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80072ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072f4:	d110      	bne.n	8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80072f6:	4b96      	ldr	r3, [pc, #600]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80072f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007300:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007304:	d103      	bne.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8007306:	23fa      	movs	r3, #250	; 0xfa
 8007308:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800730a:	f001 b8e4 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800730e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007312:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007314:	f001 b8df 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007318:	4b8d      	ldr	r3, [pc, #564]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007320:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007324:	d107      	bne.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8007326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007328:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800732c:	d103      	bne.n	8007336 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800732e:	4b89      	ldr	r3, [pc, #548]	; (8007554 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007330:	637b      	str	r3, [r7, #52]	; 0x34
 8007332:	f001 b8d0 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007336:	2300      	movs	r3, #0
 8007338:	637b      	str	r3, [r7, #52]	; 0x34
 800733a:	f001 b8cc 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800733e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007342:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007346:	430b      	orrs	r3, r1
 8007348:	d151      	bne.n	80073ee <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800734a:	4b81      	ldr	r3, [pc, #516]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800734c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007350:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007354:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007358:	2b80      	cmp	r3, #128	; 0x80
 800735a:	d035      	beq.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 800735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735e:	2b80      	cmp	r3, #128	; 0x80
 8007360:	d841      	bhi.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007364:	2b60      	cmp	r3, #96	; 0x60
 8007366:	d02a      	beq.n	80073be <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800736a:	2b60      	cmp	r3, #96	; 0x60
 800736c:	d83b      	bhi.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800736e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007370:	2b40      	cmp	r3, #64	; 0x40
 8007372:	d009      	beq.n	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007376:	2b40      	cmp	r3, #64	; 0x40
 8007378:	d835      	bhi.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800737a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00c      	beq.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8007380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007382:	2b20      	cmp	r3, #32
 8007384:	d012      	beq.n	80073ac <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007386:	e02e      	b.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800738c:	4618      	mov	r0, r3
 800738e:	f7ff fb53 	bl	8006a38 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007394:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007396:	f001 b89e 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800739a:	f107 0318 	add.w	r3, r7, #24
 800739e:	4618      	mov	r0, r3
 80073a0:	f7ff fcb0 	bl	8006d04 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073a8:	f001 b895 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073ac:	f107 030c 	add.w	r3, r7, #12
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7ff fe0d 	bl	8006fd0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073ba:	f001 b88c 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80073be:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80073c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073c4:	f001 b887 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80073c8:	4b61      	ldr	r3, [pc, #388]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073d4:	d103      	bne.n	80073de <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80073d6:	4b60      	ldr	r3, [pc, #384]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80073d8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80073da:	f001 b87c 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80073de:	2300      	movs	r3, #0
 80073e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073e2:	f001 b878 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 80073e6:	2300      	movs	r3, #0
 80073e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073ea:	f001 b874 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80073ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073f2:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80073f6:	430b      	orrs	r3, r1
 80073f8:	d158      	bne.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80073fa:	4b55      	ldr	r3, [pc, #340]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80073fc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007400:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007404:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007408:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800740c:	d03b      	beq.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800740e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007414:	d846      	bhi.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800741c:	d02e      	beq.n	800747c <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007424:	d83e      	bhi.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800742c:	d00b      	beq.n	8007446 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800742e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007430:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007434:	d836      	bhi.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00d      	beq.n	8007458 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800743c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007442:	d012      	beq.n	800746a <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007444:	e02e      	b.n	80074a4 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800744a:	4618      	mov	r0, r3
 800744c:	f7ff faf4 	bl	8006a38 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007454:	f001 b83f 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007458:	f107 0318 	add.w	r3, r7, #24
 800745c:	4618      	mov	r0, r3
 800745e:	f7ff fc51 	bl	8006d04 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007466:	f001 b836 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800746a:	f107 030c 	add.w	r3, r7, #12
 800746e:	4618      	mov	r0, r3
 8007470:	f7ff fdae 	bl	8006fd0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007478:	f001 b82d 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800747c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007480:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007482:	f001 b828 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007486:	4b32      	ldr	r3, [pc, #200]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800748e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007492:	d103      	bne.n	800749c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8007494:	4b30      	ldr	r3, [pc, #192]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007496:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007498:	f001 b81d 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800749c:	2300      	movs	r3, #0
 800749e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074a0:	f001 b819 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80074a4:	2300      	movs	r3, #0
 80074a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80074a8:	f001 b815 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80074ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074b0:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80074b4:	430b      	orrs	r3, r1
 80074b6:	d126      	bne.n	8007506 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80074b8:	4b25      	ldr	r3, [pc, #148]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80074ba:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80074be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074c2:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80074c4:	4b22      	ldr	r3, [pc, #136]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074d0:	d106      	bne.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80074d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d103      	bne.n	80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80074d8:	4b1f      	ldr	r3, [pc, #124]	; (8007558 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80074da:	637b      	str	r3, [r7, #52]	; 0x34
 80074dc:	f000 bffb 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80074e0:	4b1b      	ldr	r3, [pc, #108]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074ec:	d107      	bne.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80074ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074f4:	d103      	bne.n	80074fe <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80074f6:	4b19      	ldr	r3, [pc, #100]	; (800755c <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80074f8:	637b      	str	r3, [r7, #52]	; 0x34
 80074fa:	f000 bfec 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80074fe:	2300      	movs	r3, #0
 8007500:	637b      	str	r3, [r7, #52]	; 0x34
 8007502:	f000 bfe8 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007506:	e9d7 2300 	ldrd	r2, r3, [r7]
 800750a:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800750e:	430b      	orrs	r3, r1
 8007510:	d164      	bne.n	80075dc <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007512:	4b0f      	ldr	r3, [pc, #60]	; (8007550 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007514:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007518:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800751c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800751e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007520:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007524:	d03d      	beq.n	80075a2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007528:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800752c:	d852      	bhi.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007530:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007534:	d014      	beq.n	8007560 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007538:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800753c:	d84a      	bhi.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800753e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007540:	2b00      	cmp	r3, #0
 8007542:	d01f      	beq.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800754a:	d012      	beq.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 800754c:	e042      	b.n	80075d4 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800754e:	bf00      	nop
 8007550:	46020c00 	.word	0x46020c00
 8007554:	0007a120 	.word	0x0007a120
 8007558:	00f42400 	.word	0x00f42400
 800755c:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007564:	4618      	mov	r0, r3
 8007566:	f7ff fa67 	bl	8006a38 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800756c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800756e:	f000 bfb2 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007572:	f107 0318 	add.w	r3, r7, #24
 8007576:	4618      	mov	r0, r3
 8007578:	f7ff fbc4 	bl	8006d04 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007580:	f000 bfa9 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007584:	4bab      	ldr	r3, [pc, #684]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800758c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007590:	d103      	bne.n	800759a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8007592:	4ba9      	ldr	r3, [pc, #676]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007594:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007596:	f000 bf9e 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800759e:	f000 bf9a 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80075a2:	4ba4      	ldr	r3, [pc, #656]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d005      	beq.n	80075ba <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80075ae:	4ba1      	ldr	r3, [pc, #644]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	0e1b      	lsrs	r3, r3, #24
 80075b4:	f003 030f 	and.w	r3, r3, #15
 80075b8:	e006      	b.n	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 80075ba:	4b9e      	ldr	r3, [pc, #632]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80075bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075c0:	041b      	lsls	r3, r3, #16
 80075c2:	0e1b      	lsrs	r3, r3, #24
 80075c4:	f003 030f 	and.w	r3, r3, #15
 80075c8:	4a9c      	ldr	r2, [pc, #624]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80075ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075d0:	f000 bf81 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075d8:	f000 bf7d 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80075dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075e0:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80075e4:	430b      	orrs	r3, r1
 80075e6:	d175      	bne.n	80076d4 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80075e8:	4b92      	ldr	r3, [pc, #584]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80075ea:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80075ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075f2:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80075f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d15b      	bne.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80075fa:	4b8e      	ldr	r3, [pc, #568]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80075fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007600:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007604:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8007606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007608:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800760c:	d034      	beq.n	8007678 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800760e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007610:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007614:	d849      	bhi.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800761c:	d00b      	beq.n	8007636 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800761e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007620:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007624:	d841      	bhi.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007628:	2b00      	cmp	r3, #0
 800762a:	d016      	beq.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800762c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007632:	d009      	beq.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8007634:	e039      	b.n	80076aa <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007636:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff f9fc 	bl	8006a38 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007642:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007644:	f000 bf47 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007648:	f107 0318 	add.w	r3, r7, #24
 800764c:	4618      	mov	r0, r3
 800764e:	f7ff fb59 	bl	8006d04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007656:	f000 bf3e 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 800765a:	4b76      	ldr	r3, [pc, #472]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007662:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007666:	d103      	bne.n	8007670 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8007668:	4b73      	ldr	r3, [pc, #460]	; (8007838 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800766a:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 800766c:	f000 bf33 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 8007670:	2300      	movs	r3, #0
 8007672:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007674:	f000 bf2f 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007678:	4b6e      	ldr	r3, [pc, #440]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d005      	beq.n	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8007684:	4b6b      	ldr	r3, [pc, #428]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	0e1b      	lsrs	r3, r3, #24
 800768a:	f003 030f 	and.w	r3, r3, #15
 800768e:	e006      	b.n	800769e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8007690:	4b68      	ldr	r3, [pc, #416]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007692:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007696:	041b      	lsls	r3, r3, #16
 8007698:	0e1b      	lsrs	r3, r3, #24
 800769a:	f003 030f 	and.w	r3, r3, #15
 800769e:	4a67      	ldr	r2, [pc, #412]	; (800783c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80076a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076a4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80076a6:	f000 bf16 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80076ae:	f000 bf12 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80076b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076b8:	d108      	bne.n	80076cc <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076be:	4618      	mov	r0, r3
 80076c0:	f7ff f9ba 	bl	8006a38 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80076c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c6:	637b      	str	r3, [r7, #52]	; 0x34
 80076c8:	f000 bf05 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 80076cc:	2300      	movs	r3, #0
 80076ce:	637b      	str	r3, [r7, #52]	; 0x34
 80076d0:	f000 bf01 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80076d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076d8:	1e51      	subs	r1, r2, #1
 80076da:	430b      	orrs	r3, r1
 80076dc:	d136      	bne.n	800774c <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80076de:	4b55      	ldr	r3, [pc, #340]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80076e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80076e4:	f003 0303 	and.w	r3, r3, #3
 80076e8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 80076ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d104      	bne.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 80076f0:	f7fe fb34 	bl	8005d5c <HAL_RCC_GetPCLK2Freq>
 80076f4:	6378      	str	r0, [r7, #52]	; 0x34
 80076f6:	f000 beee 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80076fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d104      	bne.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007700:	f7fe f9f6 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 8007704:	6378      	str	r0, [r7, #52]	; 0x34
 8007706:	f000 bee6 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800770a:	4b4a      	ldr	r3, [pc, #296]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007712:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007716:	d106      	bne.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771a:	2b02      	cmp	r3, #2
 800771c:	d103      	bne.n	8007726 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 800771e:	4b48      	ldr	r3, [pc, #288]	; (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007720:	637b      	str	r3, [r7, #52]	; 0x34
 8007722:	f000 bed8 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007726:	4b43      	ldr	r3, [pc, #268]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007728:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800772c:	f003 0302 	and.w	r3, r3, #2
 8007730:	2b02      	cmp	r3, #2
 8007732:	d107      	bne.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8007734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007736:	2b03      	cmp	r3, #3
 8007738:	d104      	bne.n	8007744 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 800773a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800773e:	637b      	str	r3, [r7, #52]	; 0x34
 8007740:	f000 bec9 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	637b      	str	r3, [r7, #52]	; 0x34
 8007748:	f000 bec5 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 800774c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007750:	1e91      	subs	r1, r2, #2
 8007752:	430b      	orrs	r3, r1
 8007754:	d136      	bne.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007756:	4b37      	ldr	r3, [pc, #220]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007758:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800775c:	f003 030c 	and.w	r3, r3, #12
 8007760:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007764:	2b00      	cmp	r3, #0
 8007766:	d104      	bne.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007768:	f7fe fae4 	bl	8005d34 <HAL_RCC_GetPCLK1Freq>
 800776c:	6378      	str	r0, [r7, #52]	; 0x34
 800776e:	f000 beb2 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007774:	2b04      	cmp	r3, #4
 8007776:	d104      	bne.n	8007782 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007778:	f7fe f9ba 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 800777c:	6378      	str	r0, [r7, #52]	; 0x34
 800777e:	f000 beaa 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007782:	4b2c      	ldr	r3, [pc, #176]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800778a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800778e:	d106      	bne.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8007790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007792:	2b08      	cmp	r3, #8
 8007794:	d103      	bne.n	800779e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 8007796:	4b2a      	ldr	r3, [pc, #168]	; (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007798:	637b      	str	r3, [r7, #52]	; 0x34
 800779a:	f000 be9c 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 800779e:	4b25      	ldr	r3, [pc, #148]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80077a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d107      	bne.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 80077ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ae:	2b0c      	cmp	r3, #12
 80077b0:	d104      	bne.n	80077bc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 80077b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077b6:	637b      	str	r3, [r7, #52]	; 0x34
 80077b8:	f000 be8d 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	637b      	str	r3, [r7, #52]	; 0x34
 80077c0:	f000 be89 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 80077c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077c8:	1f11      	subs	r1, r2, #4
 80077ca:	430b      	orrs	r3, r1
 80077cc:	d13e      	bne.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80077ce:	4b19      	ldr	r3, [pc, #100]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80077d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80077d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80077d8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 80077da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d104      	bne.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80077e0:	f7fe faa8 	bl	8005d34 <HAL_RCC_GetPCLK1Freq>
 80077e4:	6378      	str	r0, [r7, #52]	; 0x34
 80077e6:	f000 be76 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80077ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ec:	2b10      	cmp	r3, #16
 80077ee:	d104      	bne.n	80077fa <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80077f0:	f7fe f97e 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 80077f4:	6378      	str	r0, [r7, #52]	; 0x34
 80077f6:	f000 be6e 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 80077fa:	4b0e      	ldr	r3, [pc, #56]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007806:	d106      	bne.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8007808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780a:	2b20      	cmp	r3, #32
 800780c:	d103      	bne.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 800780e:	4b0c      	ldr	r3, [pc, #48]	; (8007840 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007810:	637b      	str	r3, [r7, #52]	; 0x34
 8007812:	f000 be60 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007816:	4b07      	ldr	r3, [pc, #28]	; (8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800781c:	f003 0302 	and.w	r3, r3, #2
 8007820:	2b02      	cmp	r3, #2
 8007822:	d10f      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007826:	2b30      	cmp	r3, #48	; 0x30
 8007828:	d10c      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 800782a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800782e:	637b      	str	r3, [r7, #52]	; 0x34
 8007830:	f000 be51 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007834:	46020c00 	.word	0x46020c00
 8007838:	02dc6c00 	.word	0x02dc6c00
 800783c:	0800ac7c 	.word	0x0800ac7c
 8007840:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007844:	2300      	movs	r3, #0
 8007846:	637b      	str	r3, [r7, #52]	; 0x34
 8007848:	f000 be45 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 800784c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007850:	f1a2 0108 	sub.w	r1, r2, #8
 8007854:	430b      	orrs	r3, r1
 8007856:	d136      	bne.n	80078c6 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007858:	4b9f      	ldr	r3, [pc, #636]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800785a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800785e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007862:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007866:	2b00      	cmp	r3, #0
 8007868:	d104      	bne.n	8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800786a:	f7fe fa63 	bl	8005d34 <HAL_RCC_GetPCLK1Freq>
 800786e:	6378      	str	r0, [r7, #52]	; 0x34
 8007870:	f000 be31 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007876:	2b40      	cmp	r3, #64	; 0x40
 8007878:	d104      	bne.n	8007884 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800787a:	f7fe f939 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 800787e:	6378      	str	r0, [r7, #52]	; 0x34
 8007880:	f000 be29 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007884:	4b94      	ldr	r3, [pc, #592]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800788c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007890:	d106      	bne.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8007892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007894:	2b80      	cmp	r3, #128	; 0x80
 8007896:	d103      	bne.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8007898:	4b90      	ldr	r3, [pc, #576]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800789a:	637b      	str	r3, [r7, #52]	; 0x34
 800789c:	f000 be1b 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80078a0:	4b8d      	ldr	r3, [pc, #564]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80078a2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80078a6:	f003 0302 	and.w	r3, r3, #2
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d107      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 80078ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b0:	2bc0      	cmp	r3, #192	; 0xc0
 80078b2:	d104      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 80078b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078b8:	637b      	str	r3, [r7, #52]	; 0x34
 80078ba:	f000 be0c 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 80078be:	2300      	movs	r3, #0
 80078c0:	637b      	str	r3, [r7, #52]	; 0x34
 80078c2:	f000 be08 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 80078c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078ca:	f1a2 0110 	sub.w	r1, r2, #16
 80078ce:	430b      	orrs	r3, r1
 80078d0:	d139      	bne.n	8007946 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80078d2:	4b81      	ldr	r3, [pc, #516]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80078d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078dc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 80078de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d104      	bne.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80078e4:	f7fe fa26 	bl	8005d34 <HAL_RCC_GetPCLK1Freq>
 80078e8:	6378      	str	r0, [r7, #52]	; 0x34
 80078ea:	f000 bdf4 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 80078ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078f4:	d104      	bne.n	8007900 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80078f6:	f7fe f8fb 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 80078fa:	6378      	str	r0, [r7, #52]	; 0x34
 80078fc:	f000 bdeb 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007900:	4b75      	ldr	r3, [pc, #468]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800790c:	d107      	bne.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800790e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007910:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007914:	d103      	bne.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8007916:	4b71      	ldr	r3, [pc, #452]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007918:	637b      	str	r3, [r7, #52]	; 0x34
 800791a:	f000 bddc 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800791e:	4b6e      	ldr	r3, [pc, #440]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007920:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007924:	f003 0302 	and.w	r3, r3, #2
 8007928:	2b02      	cmp	r3, #2
 800792a:	d108      	bne.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 800792c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007932:	d104      	bne.n	800793e <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8007934:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007938:	637b      	str	r3, [r7, #52]	; 0x34
 800793a:	f000 bdcc 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800793e:	2300      	movs	r3, #0
 8007940:	637b      	str	r3, [r7, #52]	; 0x34
 8007942:	f000 bdc8 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007946:	e9d7 2300 	ldrd	r2, r3, [r7]
 800794a:	f1a2 0120 	sub.w	r1, r2, #32
 800794e:	430b      	orrs	r3, r1
 8007950:	d158      	bne.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007952:	4b61      	ldr	r3, [pc, #388]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007954:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007958:	f003 0307 	and.w	r3, r3, #7
 800795c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 800795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007960:	2b00      	cmp	r3, #0
 8007962:	d104      	bne.n	800796e <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007964:	f7fe fa0e 	bl	8005d84 <HAL_RCC_GetPCLK3Freq>
 8007968:	6378      	str	r0, [r7, #52]	; 0x34
 800796a:	f000 bdb4 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 800796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007970:	2b01      	cmp	r3, #1
 8007972:	d104      	bne.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007974:	f7fe f8bc 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 8007978:	6378      	str	r0, [r7, #52]	; 0x34
 800797a:	f000 bdac 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 800797e:	4b56      	ldr	r3, [pc, #344]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007986:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800798a:	d106      	bne.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 800798c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798e:	2b02      	cmp	r3, #2
 8007990:	d103      	bne.n	800799a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8007992:	4b52      	ldr	r3, [pc, #328]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007994:	637b      	str	r3, [r7, #52]	; 0x34
 8007996:	f000 bd9e 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800799a:	4b4f      	ldr	r3, [pc, #316]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800799c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80079a0:	f003 0302 	and.w	r3, r3, #2
 80079a4:	2b02      	cmp	r3, #2
 80079a6:	d107      	bne.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 80079a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	d104      	bne.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 80079ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079b2:	637b      	str	r3, [r7, #52]	; 0x34
 80079b4:	f000 bd8f 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80079b8:	4b47      	ldr	r3, [pc, #284]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f003 0320 	and.w	r3, r3, #32
 80079c0:	2b20      	cmp	r3, #32
 80079c2:	d11b      	bne.n	80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80079c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c6:	2b04      	cmp	r3, #4
 80079c8:	d118      	bne.n	80079fc <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80079ca:	4b43      	ldr	r3, [pc, #268]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d005      	beq.n	80079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 80079d6:	4b40      	ldr	r3, [pc, #256]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	0e1b      	lsrs	r3, r3, #24
 80079dc:	f003 030f 	and.w	r3, r3, #15
 80079e0:	e006      	b.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 80079e2:	4b3d      	ldr	r3, [pc, #244]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80079e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079e8:	041b      	lsls	r3, r3, #16
 80079ea:	0e1b      	lsrs	r3, r3, #24
 80079ec:	f003 030f 	and.w	r3, r3, #15
 80079f0:	4a3b      	ldr	r2, [pc, #236]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80079f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079f6:	637b      	str	r3, [r7, #52]	; 0x34
 80079f8:	f000 bd6d 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 80079fc:	2300      	movs	r3, #0
 80079fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007a00:	f000 bd69 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007a04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a08:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007a0c:	430b      	orrs	r3, r1
 8007a0e:	d169      	bne.n	8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007a10:	4b31      	ldr	r3, [pc, #196]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a16:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007a1a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a22:	d104      	bne.n	8007a2e <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007a24:	f7fe f864 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 8007a28:	6378      	str	r0, [r7, #52]	; 0x34
 8007a2a:	f000 bd54 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a34:	d108      	bne.n	8007a48 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a36:	f107 0318 	add.w	r3, r7, #24
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7ff f962 	bl	8006d04 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	637b      	str	r3, [r7, #52]	; 0x34
 8007a44:	f000 bd47 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d104      	bne.n	8007a58 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007a4e:	f7fe f957 	bl	8005d00 <HAL_RCC_GetHCLKFreq>
 8007a52:	6378      	str	r0, [r7, #52]	; 0x34
 8007a54:	f000 bd3f 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007a5e:	d118      	bne.n	8007a92 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007a60:	4b1d      	ldr	r3, [pc, #116]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d005      	beq.n	8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8007a6c:	4b1a      	ldr	r3, [pc, #104]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	0f1b      	lsrs	r3, r3, #28
 8007a72:	f003 030f 	and.w	r3, r3, #15
 8007a76:	e006      	b.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8007a78:	4b17      	ldr	r3, [pc, #92]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a7e:	041b      	lsls	r3, r3, #16
 8007a80:	0f1b      	lsrs	r3, r3, #28
 8007a82:	f003 030f 	and.w	r3, r3, #15
 8007a86:	4a16      	ldr	r2, [pc, #88]	; (8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a8e:	f000 bd22 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007a92:	4b11      	ldr	r3, [pc, #68]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a9e:	d107      	bne.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8007aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007aa6:	d103      	bne.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8007aa8:	4b0c      	ldr	r3, [pc, #48]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8007aac:	f000 bd13 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007ab0:	4b09      	ldr	r3, [pc, #36]	; (8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007abc:	d107      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8007abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ac4:	d103      	bne.n	8007ace <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8007ac6:	4b05      	ldr	r3, [pc, #20]	; (8007adc <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8007aca:	f000 bd04 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ad2:	f000 bd00 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007ad6:	bf00      	nop
 8007ad8:	46020c00 	.word	0x46020c00
 8007adc:	00f42400 	.word	0x00f42400
 8007ae0:	0800ac7c 	.word	0x0800ac7c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007ae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ae8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007aec:	430b      	orrs	r3, r1
 8007aee:	d14e      	bne.n	8007b8e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007af0:	4ba8      	ldr	r3, [pc, #672]	; (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007af2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007af6:	f003 0307 	and.w	r3, r3, #7
 8007afa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007afe:	2b04      	cmp	r3, #4
 8007b00:	d841      	bhi.n	8007b86 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007b02:	a201      	add	r2, pc, #4	; (adr r2, 8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8007b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b08:	08007b41 	.word	0x08007b41
 8007b0c:	08007b1d 	.word	0x08007b1d
 8007b10:	08007b2f 	.word	0x08007b2f
 8007b14:	08007b4b 	.word	0x08007b4b
 8007b18:	08007b55 	.word	0x08007b55
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fe ff89 	bl	8006a38 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b28:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b2a:	f000 bcd4 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007b2e:	f107 030c 	add.w	r3, r7, #12
 8007b32:	4618      	mov	r0, r3
 8007b34:	f7ff fa4c 	bl	8006fd0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b3c:	f000 bccb 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007b40:	f7fe f8de 	bl	8005d00 <HAL_RCC_GetHCLKFreq>
 8007b44:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007b46:	f000 bcc6 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007b4a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007b4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b50:	f000 bcc1 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b54:	4b8f      	ldr	r3, [pc, #572]	; (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d005      	beq.n	8007b6c <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8007b60:	4b8c      	ldr	r3, [pc, #560]	; (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b62:	689b      	ldr	r3, [r3, #8]
 8007b64:	0e1b      	lsrs	r3, r3, #24
 8007b66:	f003 030f 	and.w	r3, r3, #15
 8007b6a:	e006      	b.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007b6c:	4b89      	ldr	r3, [pc, #548]	; (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b72:	041b      	lsls	r3, r3, #16
 8007b74:	0e1b      	lsrs	r3, r3, #24
 8007b76:	f003 030f 	and.w	r3, r3, #15
 8007b7a:	4a87      	ldr	r2, [pc, #540]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b80:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b82:	f000 bca8 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b8a:	f000 bca4 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007b8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b92:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8007b96:	430b      	orrs	r3, r1
 8007b98:	d15d      	bne.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007b9a:	4b7e      	ldr	r3, [pc, #504]	; (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007b9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ba0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007ba4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bac:	d036      	beq.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007bb4:	d84b      	bhi.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bbc:	d029      	beq.n	8007c12 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8007bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007bc4:	d843      	bhi.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bcc:	d013      	beq.n	8007bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8007bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bd4:	d83b      	bhi.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d015      	beq.n	8007c08 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8007bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007be2:	d134      	bne.n	8007c4e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7fe ff25 	bl	8006a38 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bf2:	f000 bc70 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007bf6:	f107 030c 	add.w	r3, r7, #12
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7ff f9e8 	bl	8006fd0 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c04:	f000 bc67 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007c08:	f7fe f87a 	bl	8005d00 <HAL_RCC_GetHCLKFreq>
 8007c0c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007c0e:	f000 bc62 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007c12:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007c16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c18:	f000 bc5d 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007c1c:	4b5d      	ldr	r3, [pc, #372]	; (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d005      	beq.n	8007c34 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8007c28:	4b5a      	ldr	r3, [pc, #360]	; (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	0e1b      	lsrs	r3, r3, #24
 8007c2e:	f003 030f 	and.w	r3, r3, #15
 8007c32:	e006      	b.n	8007c42 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8007c34:	4b57      	ldr	r3, [pc, #348]	; (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007c3a:	041b      	lsls	r3, r3, #16
 8007c3c:	0e1b      	lsrs	r3, r3, #24
 8007c3e:	f003 030f 	and.w	r3, r3, #15
 8007c42:	4a55      	ldr	r2, [pc, #340]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c4a:	f000 bc44 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007c52:	f000 bc40 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007c56:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c5a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8007c5e:	430b      	orrs	r3, r1
 8007c60:	d14a      	bne.n	8007cf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007c62:	4b4c      	ldr	r3, [pc, #304]	; (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007c6c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d104      	bne.n	8007c7e <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007c74:	f7fe f85e 	bl	8005d34 <HAL_RCC_GetPCLK1Freq>
 8007c78:	6378      	str	r0, [r7, #52]	; 0x34
 8007c7a:	f000 bc2c 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c84:	d104      	bne.n	8007c90 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007c86:	f7fd ff33 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 8007c8a:	6378      	str	r0, [r7, #52]	; 0x34
 8007c8c:	f000 bc23 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007c90:	4b40      	ldr	r3, [pc, #256]	; (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c9c:	d107      	bne.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8007c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ca4:	d103      	bne.n	8007cae <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8007ca6:	4b3d      	ldr	r3, [pc, #244]	; (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8007caa:	f000 bc14 	b.w	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007cae:	4b39      	ldr	r3, [pc, #228]	; (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f003 0320 	and.w	r3, r3, #32
 8007cb6:	2b20      	cmp	r3, #32
 8007cb8:	d11b      	bne.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8007cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007cc0:	d117      	bne.n	8007cf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007cc2:	4b34      	ldr	r3, [pc, #208]	; (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d005      	beq.n	8007cda <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8007cce:	4b31      	ldr	r3, [pc, #196]	; (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	0e1b      	lsrs	r3, r3, #24
 8007cd4:	f003 030f 	and.w	r3, r3, #15
 8007cd8:	e006      	b.n	8007ce8 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8007cda:	4b2e      	ldr	r3, [pc, #184]	; (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007cdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ce0:	041b      	lsls	r3, r3, #16
 8007ce2:	0e1b      	lsrs	r3, r3, #24
 8007ce4:	f003 030f 	and.w	r3, r3, #15
 8007ce8:	4a2b      	ldr	r2, [pc, #172]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cee:	637b      	str	r3, [r7, #52]	; 0x34
 8007cf0:	e3f1      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8007cf6:	e3ee      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007cf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cfc:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8007d00:	430b      	orrs	r3, r1
 8007d02:	d14d      	bne.n	8007da0 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007d04:	4b23      	ldr	r3, [pc, #140]	; (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d0a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007d0e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d103      	bne.n	8007d1e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007d16:	f7fe f80d 	bl	8005d34 <HAL_RCC_GetPCLK1Freq>
 8007d1a:	6378      	str	r0, [r7, #52]	; 0x34
 8007d1c:	e3db      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d24:	d103      	bne.n	8007d2e <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d26:	f7fd fee3 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 8007d2a:	6378      	str	r0, [r7, #52]	; 0x34
 8007d2c:	e3d3      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007d2e:	4b19      	ldr	r3, [pc, #100]	; (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d3a:	d106      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8007d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d42:	d102      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8007d44:	4b15      	ldr	r3, [pc, #84]	; (8007d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007d46:	637b      	str	r3, [r7, #52]	; 0x34
 8007d48:	e3c5      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007d4a:	4b12      	ldr	r3, [pc, #72]	; (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 0320 	and.w	r3, r3, #32
 8007d52:	2b20      	cmp	r3, #32
 8007d54:	d11b      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8007d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007d5c:	d117      	bne.n	8007d8e <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007d5e:	4b0d      	ldr	r3, [pc, #52]	; (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d005      	beq.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8007d6a:	4b0a      	ldr	r3, [pc, #40]	; (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	0e1b      	lsrs	r3, r3, #24
 8007d70:	f003 030f 	and.w	r3, r3, #15
 8007d74:	e006      	b.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8007d76:	4b07      	ldr	r3, [pc, #28]	; (8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007d78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d7c:	041b      	lsls	r3, r3, #16
 8007d7e:	0e1b      	lsrs	r3, r3, #24
 8007d80:	f003 030f 	and.w	r3, r3, #15
 8007d84:	4a04      	ldr	r2, [pc, #16]	; (8007d98 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d8c:	e3a3      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	637b      	str	r3, [r7, #52]	; 0x34
 8007d92:	e3a0      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007d94:	46020c00 	.word	0x46020c00
 8007d98:	0800ac7c 	.word	0x0800ac7c
 8007d9c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007da4:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007da8:	430b      	orrs	r3, r1
 8007daa:	d148      	bne.n	8007e3e <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007dac:	4b9d      	ldr	r3, [pc, #628]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007dae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007db2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007db6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dba:	2bc0      	cmp	r3, #192	; 0xc0
 8007dbc:	d024      	beq.n	8007e08 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 8007dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc0:	2bc0      	cmp	r3, #192	; 0xc0
 8007dc2:	d839      	bhi.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc6:	2b80      	cmp	r3, #128	; 0x80
 8007dc8:	d00d      	beq.n	8007de6 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8007dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dcc:	2b80      	cmp	r3, #128	; 0x80
 8007dce:	d833      	bhi.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d003      	beq.n	8007dde <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	2b40      	cmp	r3, #64	; 0x40
 8007dda:	d011      	beq.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007ddc:	e02c      	b.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007dde:	f7fd ffd1 	bl	8005d84 <HAL_RCC_GetPCLK3Freq>
 8007de2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007de4:	e377      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007de6:	4b8f      	ldr	r3, [pc, #572]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007df2:	d102      	bne.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8007df4:	4b8c      	ldr	r3, [pc, #560]	; (8008028 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007df6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007df8:	e36d      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007dfe:	e36a      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007e00:	f7fd fe76 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 8007e04:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007e06:	e366      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007e08:	4b86      	ldr	r3, [pc, #536]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d005      	beq.n	8007e20 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8007e14:	4b83      	ldr	r3, [pc, #524]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	0f1b      	lsrs	r3, r3, #28
 8007e1a:	f003 030f 	and.w	r3, r3, #15
 8007e1e:	e006      	b.n	8007e2e <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8007e20:	4b80      	ldr	r3, [pc, #512]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e26:	041b      	lsls	r3, r3, #16
 8007e28:	0f1b      	lsrs	r3, r3, #28
 8007e2a:	f003 030f 	and.w	r3, r3, #15
 8007e2e:	4a7f      	ldr	r2, [pc, #508]	; (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e34:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e36:	e34e      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e3c:	e34b      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007e3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e42:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8007e46:	430b      	orrs	r3, r1
 8007e48:	d147      	bne.n	8007eda <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007e4a:	4b76      	ldr	r3, [pc, #472]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e54:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8007e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d103      	bne.n	8007e64 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007e5c:	f7fd ff6a 	bl	8005d34 <HAL_RCC_GetPCLK1Freq>
 8007e60:	6378      	str	r0, [r7, #52]	; 0x34
 8007e62:	e338      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8007e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e66:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e6a:	d103      	bne.n	8007e74 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e6c:	f7fd fe40 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 8007e70:	6378      	str	r0, [r7, #52]	; 0x34
 8007e72:	e330      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8007e74:	4b6b      	ldr	r3, [pc, #428]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e80:	d106      	bne.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8007e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e88:	d102      	bne.n	8007e90 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8007e8a:	4b67      	ldr	r3, [pc, #412]	; (8008028 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e8e:	e322      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007e90:	4b64      	ldr	r3, [pc, #400]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 0320 	and.w	r3, r3, #32
 8007e98:	2b20      	cmp	r3, #32
 8007e9a:	d11b      	bne.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ea2:	d117      	bne.n	8007ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ea4:	4b5f      	ldr	r3, [pc, #380]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d005      	beq.n	8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8007eb0:	4b5c      	ldr	r3, [pc, #368]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	0e1b      	lsrs	r3, r3, #24
 8007eb6:	f003 030f 	and.w	r3, r3, #15
 8007eba:	e006      	b.n	8007eca <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8007ebc:	4b59      	ldr	r3, [pc, #356]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007ebe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ec2:	041b      	lsls	r3, r3, #16
 8007ec4:	0e1b      	lsrs	r3, r3, #24
 8007ec6:	f003 030f 	and.w	r3, r3, #15
 8007eca:	4a58      	ldr	r2, [pc, #352]	; (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ed2:	e300      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ed8:	e2fd      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007eda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ede:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007ee2:	430b      	orrs	r3, r1
 8007ee4:	d15b      	bne.n	8007f9e <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007ee6:	4b4f      	ldr	r3, [pc, #316]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007ee8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007eec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ef0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d117      	bne.n	8007f28 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ef8:	4b4a      	ldr	r3, [pc, #296]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d005      	beq.n	8007f10 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8007f04:	4b47      	ldr	r3, [pc, #284]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	0e1b      	lsrs	r3, r3, #24
 8007f0a:	f003 030f 	and.w	r3, r3, #15
 8007f0e:	e006      	b.n	8007f1e <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8007f10:	4b44      	ldr	r3, [pc, #272]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f16:	041b      	lsls	r3, r3, #16
 8007f18:	0e1b      	lsrs	r3, r3, #24
 8007f1a:	f003 030f 	and.w	r3, r3, #15
 8007f1e:	4a43      	ldr	r2, [pc, #268]	; (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f24:	637b      	str	r3, [r7, #52]	; 0x34
 8007f26:	e2d6      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007f28:	4b3e      	ldr	r3, [pc, #248]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007f36:	d112      	bne.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8007f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f3e:	d10e      	bne.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f40:	4b38      	ldr	r3, [pc, #224]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f42:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f4e:	d102      	bne.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8007f50:	23fa      	movs	r3, #250	; 0xfa
 8007f52:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f54:	e2bf      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007f56:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007f5a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007f5c:	e2bb      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007f5e:	4b31      	ldr	r3, [pc, #196]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f6a:	d106      	bne.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8007f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f72:	d102      	bne.n	8007f7a <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8007f74:	4b2c      	ldr	r3, [pc, #176]	; (8008028 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007f76:	637b      	str	r3, [r7, #52]	; 0x34
 8007f78:	e2ad      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8007f7a:	4b2a      	ldr	r3, [pc, #168]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007f7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007f80:	f003 0302 	and.w	r3, r3, #2
 8007f84:	2b02      	cmp	r3, #2
 8007f86:	d107      	bne.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8007f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f8e:	d103      	bne.n	8007f98 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8007f90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f94:	637b      	str	r3, [r7, #52]	; 0x34
 8007f96:	e29e      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007f9c:	e29b      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8007f9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fa2:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007fa6:	430b      	orrs	r3, r1
 8007fa8:	d162      	bne.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007faa:	4b1e      	ldr	r3, [pc, #120]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007fac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007fb0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007fb4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d117      	bne.n	8007fec <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007fbc:	4b19      	ldr	r3, [pc, #100]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d005      	beq.n	8007fd4 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8007fc8:	4b16      	ldr	r3, [pc, #88]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	0e1b      	lsrs	r3, r3, #24
 8007fce:	f003 030f 	and.w	r3, r3, #15
 8007fd2:	e006      	b.n	8007fe2 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8007fd4:	4b13      	ldr	r3, [pc, #76]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007fd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007fda:	041b      	lsls	r3, r3, #16
 8007fdc:	0e1b      	lsrs	r3, r3, #24
 8007fde:	f003 030f 	and.w	r3, r3, #15
 8007fe2:	4a12      	ldr	r2, [pc, #72]	; (800802c <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007fe4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8007fea:	e274      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007fec:	4b0d      	ldr	r3, [pc, #52]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007fee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ff2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ff6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ffa:	d119      	bne.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008002:	d115      	bne.n	8008030 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008004:	4b07      	ldr	r3, [pc, #28]	; (8008024 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008006:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800800a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800800e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008012:	d102      	bne.n	800801a <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8008014:	23fa      	movs	r3, #250	; 0xfa
 8008016:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008018:	e25d      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800801a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800801e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008020:	e259      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8008022:	bf00      	nop
 8008024:	46020c00 	.word	0x46020c00
 8008028:	00f42400 	.word	0x00f42400
 800802c:	0800ac7c 	.word	0x0800ac7c
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8008030:	4b9d      	ldr	r3, [pc, #628]	; (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008038:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800803c:	d106      	bne.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800803e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008044:	d102      	bne.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8008046:	4b99      	ldr	r3, [pc, #612]	; (80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008048:	637b      	str	r3, [r7, #52]	; 0x34
 800804a:	e244      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 800804c:	4b96      	ldr	r3, [pc, #600]	; (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800804e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008052:	f003 0302 	and.w	r3, r3, #2
 8008056:	2b02      	cmp	r3, #2
 8008058:	d107      	bne.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 800805a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008060:	d103      	bne.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 8008062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008066:	637b      	str	r3, [r7, #52]	; 0x34
 8008068:	e235      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 800806a:	2300      	movs	r3, #0
 800806c:	637b      	str	r3, [r7, #52]	; 0x34
 800806e:	e232      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8008070:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008074:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008078:	430b      	orrs	r3, r1
 800807a:	d147      	bne.n	800810c <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800807c:	4b8a      	ldr	r3, [pc, #552]	; (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800807e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008082:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008086:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8008088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808a:	2b00      	cmp	r3, #0
 800808c:	d103      	bne.n	8008096 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800808e:	f7fd fe51 	bl	8005d34 <HAL_RCC_GetPCLK1Freq>
 8008092:	6378      	str	r0, [r7, #52]	; 0x34
 8008094:	e21f      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8008096:	4b84      	ldr	r3, [pc, #528]	; (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008098:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800809c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080a4:	d112      	bne.n	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80080a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80080ac:	d10e      	bne.n	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80080ae:	4b7e      	ldr	r3, [pc, #504]	; (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80080b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080bc:	d102      	bne.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 80080be:	23fa      	movs	r3, #250	; 0xfa
 80080c0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80080c2:	e208      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80080c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80080c8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80080ca:	e204      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80080cc:	4b76      	ldr	r3, [pc, #472]	; (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080d8:	d106      	bne.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80080e0:	d102      	bne.n	80080e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 80080e2:	4b72      	ldr	r3, [pc, #456]	; (80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80080e4:	637b      	str	r3, [r7, #52]	; 0x34
 80080e6:	e1f6      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80080e8:	4b6f      	ldr	r3, [pc, #444]	; (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80080ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80080ee:	f003 0302 	and.w	r3, r3, #2
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d107      	bne.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80080fc:	d103      	bne.n	8008106 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 80080fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008102:	637b      	str	r3, [r7, #52]	; 0x34
 8008104:	e1e7      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8008106:	2300      	movs	r3, #0
 8008108:	637b      	str	r3, [r7, #52]	; 0x34
 800810a:	e1e4      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800810c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008110:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8008114:	430b      	orrs	r3, r1
 8008116:	d12d      	bne.n	8008174 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008118:	4b63      	ldr	r3, [pc, #396]	; (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800811a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800811e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8008122:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8008124:	4b60      	ldr	r3, [pc, #384]	; (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800812c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008130:	d105      	bne.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 8008132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008134:	2b00      	cmp	r3, #0
 8008136:	d102      	bne.n	800813e <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8008138:	4b5c      	ldr	r3, [pc, #368]	; (80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800813a:	637b      	str	r3, [r7, #52]	; 0x34
 800813c:	e1cb      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008144:	d107      	bne.n	8008156 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800814a:	4618      	mov	r0, r3
 800814c:	f7fe fc74 	bl	8006a38 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8008150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008152:	637b      	str	r3, [r7, #52]	; 0x34
 8008154:	e1bf      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8008156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008158:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800815c:	d107      	bne.n	800816e <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800815e:	f107 0318 	add.w	r3, r7, #24
 8008162:	4618      	mov	r0, r3
 8008164:	f7fe fdce 	bl	8006d04 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	637b      	str	r3, [r7, #52]	; 0x34
 800816c:	e1b3      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	637b      	str	r3, [r7, #52]	; 0x34
 8008172:	e1b0      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8008174:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008178:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 800817c:	430b      	orrs	r3, r1
 800817e:	d14d      	bne.n	800821c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008180:	4b49      	ldr	r3, [pc, #292]	; (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008186:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800818a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800818c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008192:	d028      	beq.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8008194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008196:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800819a:	d83c      	bhi.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800819c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081a2:	d013      	beq.n	80081cc <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 80081a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80081aa:	d834      	bhi.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80081ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d004      	beq.n	80081bc <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80081b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081b8:	d004      	beq.n	80081c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80081ba:	e02c      	b.n	8008216 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80081bc:	f7fd fdce 	bl	8005d5c <HAL_RCC_GetPCLK2Freq>
 80081c0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80081c2:	e188      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80081c4:	f7fd fc94 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 80081c8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80081ca:	e184      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081cc:	4b36      	ldr	r3, [pc, #216]	; (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081d8:	d102      	bne.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 80081da:	4b34      	ldr	r3, [pc, #208]	; (80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80081dc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80081de:	e17a      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80081e0:	2300      	movs	r3, #0
 80081e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081e4:	e177      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80081e6:	4b30      	ldr	r3, [pc, #192]	; (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80081e8:	689b      	ldr	r3, [r3, #8]
 80081ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d005      	beq.n	80081fe <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 80081f2:	4b2d      	ldr	r3, [pc, #180]	; (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	0e1b      	lsrs	r3, r3, #24
 80081f8:	f003 030f 	and.w	r3, r3, #15
 80081fc:	e006      	b.n	800820c <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 80081fe:	4b2a      	ldr	r3, [pc, #168]	; (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008200:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008204:	041b      	lsls	r3, r3, #16
 8008206:	0e1b      	lsrs	r3, r3, #24
 8008208:	f003 030f 	and.w	r3, r3, #15
 800820c:	4a28      	ldr	r2, [pc, #160]	; (80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 800820e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008212:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008214:	e15f      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8008216:	2300      	movs	r3, #0
 8008218:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800821a:	e15c      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800821c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008220:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8008224:	430b      	orrs	r3, r1
 8008226:	d154      	bne.n	80082d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008228:	4b1f      	ldr	r3, [pc, #124]	; (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800822a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800822e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008232:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008236:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800823a:	d028      	beq.n	800828e <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 800823c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008242:	d843      	bhi.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8008244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008246:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800824a:	d013      	beq.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 800824c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800824e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008252:	d83b      	bhi.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8008254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008256:	2b00      	cmp	r3, #0
 8008258:	d004      	beq.n	8008264 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 800825a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008260:	d004      	beq.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8008262:	e033      	b.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8008264:	f7fd fd66 	bl	8005d34 <HAL_RCC_GetPCLK1Freq>
 8008268:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800826a:	e134      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800826c:	f7fd fc40 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 8008270:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008272:	e130      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008274:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800827c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008280:	d102      	bne.n	8008288 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8008282:	4b0a      	ldr	r3, [pc, #40]	; (80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008284:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008286:	e126      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008288:	2300      	movs	r3, #0
 800828a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800828c:	e123      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800828e:	4b06      	ldr	r3, [pc, #24]	; (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00c      	beq.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 800829a:	4b03      	ldr	r3, [pc, #12]	; (80082a8 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	0e1b      	lsrs	r3, r3, #24
 80082a0:	f003 030f 	and.w	r3, r3, #15
 80082a4:	e00d      	b.n	80082c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 80082a6:	bf00      	nop
 80082a8:	46020c00 	.word	0x46020c00
 80082ac:	00f42400 	.word	0x00f42400
 80082b0:	0800ac7c 	.word	0x0800ac7c
 80082b4:	4b8a      	ldr	r3, [pc, #552]	; (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80082b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082ba:	041b      	lsls	r3, r3, #16
 80082bc:	0e1b      	lsrs	r3, r3, #24
 80082be:	f003 030f 	and.w	r3, r3, #15
 80082c2:	4a88      	ldr	r2, [pc, #544]	; (80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80082c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082ca:	e104      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80082cc:	2300      	movs	r3, #0
 80082ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082d0:	e101      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80082d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082d6:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 80082da:	430b      	orrs	r3, r1
 80082dc:	d16e      	bne.n	80083bc <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80082de:	4b80      	ldr	r3, [pc, #512]	; (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80082e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80082e4:	f003 0318 	and.w	r3, r3, #24
 80082e8:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80082ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ec:	2b18      	cmp	r3, #24
 80082ee:	d862      	bhi.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80082f0:	a201      	add	r2, pc, #4	; (adr r2, 80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 80082f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f6:	bf00      	nop
 80082f8:	0800835d 	.word	0x0800835d
 80082fc:	080083b7 	.word	0x080083b7
 8008300:	080083b7 	.word	0x080083b7
 8008304:	080083b7 	.word	0x080083b7
 8008308:	080083b7 	.word	0x080083b7
 800830c:	080083b7 	.word	0x080083b7
 8008310:	080083b7 	.word	0x080083b7
 8008314:	080083b7 	.word	0x080083b7
 8008318:	08008365 	.word	0x08008365
 800831c:	080083b7 	.word	0x080083b7
 8008320:	080083b7 	.word	0x080083b7
 8008324:	080083b7 	.word	0x080083b7
 8008328:	080083b7 	.word	0x080083b7
 800832c:	080083b7 	.word	0x080083b7
 8008330:	080083b7 	.word	0x080083b7
 8008334:	080083b7 	.word	0x080083b7
 8008338:	0800836d 	.word	0x0800836d
 800833c:	080083b7 	.word	0x080083b7
 8008340:	080083b7 	.word	0x080083b7
 8008344:	080083b7 	.word	0x080083b7
 8008348:	080083b7 	.word	0x080083b7
 800834c:	080083b7 	.word	0x080083b7
 8008350:	080083b7 	.word	0x080083b7
 8008354:	080083b7 	.word	0x080083b7
 8008358:	08008387 	.word	0x08008387
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800835c:	f7fd fd12 	bl	8005d84 <HAL_RCC_GetPCLK3Freq>
 8008360:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008362:	e0b8      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008364:	f7fd fbc4 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 8008368:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800836a:	e0b4      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800836c:	4b5c      	ldr	r3, [pc, #368]	; (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008378:	d102      	bne.n	8008380 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 800837a:	4b5b      	ldr	r3, [pc, #364]	; (80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 800837c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800837e:	e0aa      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008380:	2300      	movs	r3, #0
 8008382:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008384:	e0a7      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008386:	4b56      	ldr	r3, [pc, #344]	; (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800838e:	2b00      	cmp	r3, #0
 8008390:	d005      	beq.n	800839e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8008392:	4b53      	ldr	r3, [pc, #332]	; (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	0e1b      	lsrs	r3, r3, #24
 8008398:	f003 030f 	and.w	r3, r3, #15
 800839c:	e006      	b.n	80083ac <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 800839e:	4b50      	ldr	r3, [pc, #320]	; (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80083a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80083a4:	041b      	lsls	r3, r3, #16
 80083a6:	0e1b      	lsrs	r3, r3, #24
 80083a8:	f003 030f 	and.w	r3, r3, #15
 80083ac:	4a4d      	ldr	r2, [pc, #308]	; (80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80083ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083b4:	e08f      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80083b6:	2300      	movs	r3, #0
 80083b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80083ba:	e08c      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80083bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083c0:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80083c4:	430b      	orrs	r3, r1
 80083c6:	d14c      	bne.n	8008462 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80083c8:	4b45      	ldr	r3, [pc, #276]	; (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80083ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80083ce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80083d2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80083d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80083da:	d013      	beq.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 80083dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083de:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80083e2:	d83b      	bhi.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80083e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083ea:	d013      	beq.n	8008414 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 80083ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80083f2:	d833      	bhi.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80083f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d014      	beq.n	8008424 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 80083fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008400:	d014      	beq.n	800842c <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8008402:	e02b      	b.n	800845c <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008404:	f107 0318 	add.w	r3, r7, #24
 8008408:	4618      	mov	r0, r3
 800840a:	f7fe fc7b 	bl	8006d04 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008412:	e060      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008418:	4618      	mov	r0, r3
 800841a:	f7fe fb0d 	bl	8006a38 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800841e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008420:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008422:	e058      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008424:	f7fd fb64 	bl	8005af0 <HAL_RCC_GetSysClockFreq>
 8008428:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800842a:	e054      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800842c:	4b2c      	ldr	r3, [pc, #176]	; (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008434:	2b00      	cmp	r3, #0
 8008436:	d005      	beq.n	8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8008438:	4b29      	ldr	r3, [pc, #164]	; (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	0e1b      	lsrs	r3, r3, #24
 800843e:	f003 030f 	and.w	r3, r3, #15
 8008442:	e006      	b.n	8008452 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8008444:	4b26      	ldr	r3, [pc, #152]	; (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008446:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800844a:	041b      	lsls	r3, r3, #16
 800844c:	0e1b      	lsrs	r3, r3, #24
 800844e:	f003 030f 	and.w	r3, r3, #15
 8008452:	4a24      	ldr	r2, [pc, #144]	; (80084e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8008454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008458:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800845a:	e03c      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800845c:	2300      	movs	r3, #0
 800845e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008460:	e039      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8008462:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008466:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800846a:	430b      	orrs	r3, r1
 800846c:	d131      	bne.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800846e:	4b1c      	ldr	r3, [pc, #112]	; (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008470:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008478:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800847a:	4b19      	ldr	r3, [pc, #100]	; (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800847c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008480:	f003 0302 	and.w	r3, r3, #2
 8008484:	2b02      	cmp	r3, #2
 8008486:	d106      	bne.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8008488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848a:	2b00      	cmp	r3, #0
 800848c:	d103      	bne.n	8008496 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 800848e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008492:	637b      	str	r3, [r7, #52]	; 0x34
 8008494:	e01f      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008496:	4b12      	ldr	r3, [pc, #72]	; (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008498:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800849c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084a4:	d112      	bne.n	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 80084a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084ac:	d10e      	bne.n	80084cc <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80084ae:	4b0c      	ldr	r3, [pc, #48]	; (80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80084b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084bc:	d102      	bne.n	80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 80084be:	23fa      	movs	r3, #250	; 0xfa
 80084c0:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80084c2:	e008      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80084c4:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80084c8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80084ca:	e004      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80084cc:	2300      	movs	r3, #0
 80084ce:	637b      	str	r3, [r7, #52]	; 0x34
 80084d0:	e001      	b.n	80084d6 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 80084d2:	2300      	movs	r3, #0
 80084d4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80084d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3738      	adds	r7, #56	; 0x38
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	46020c00 	.word	0x46020c00
 80084e4:	0800ac7c 	.word	0x0800ac7c
 80084e8:	00f42400 	.word	0x00f42400

080084ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b084      	sub	sp, #16
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80084f4:	4b47      	ldr	r3, [pc, #284]	; (8008614 <RCCEx_PLL2_Config+0x128>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a46      	ldr	r2, [pc, #280]	; (8008614 <RCCEx_PLL2_Config+0x128>)
 80084fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80084fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008500:	f7f9 fec0 	bl	8002284 <HAL_GetTick>
 8008504:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008506:	e008      	b.n	800851a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008508:	f7f9 febc 	bl	8002284 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	2b02      	cmp	r3, #2
 8008514:	d901      	bls.n	800851a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e077      	b.n	800860a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800851a:	4b3e      	ldr	r3, [pc, #248]	; (8008614 <RCCEx_PLL2_Config+0x128>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008522:	2b00      	cmp	r3, #0
 8008524:	d1f0      	bne.n	8008508 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008526:	4b3b      	ldr	r3, [pc, #236]	; (8008614 <RCCEx_PLL2_Config+0x128>)
 8008528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800852e:	f023 0303 	bic.w	r3, r3, #3
 8008532:	687a      	ldr	r2, [r7, #4]
 8008534:	6811      	ldr	r1, [r2, #0]
 8008536:	687a      	ldr	r2, [r7, #4]
 8008538:	6852      	ldr	r2, [r2, #4]
 800853a:	3a01      	subs	r2, #1
 800853c:	0212      	lsls	r2, r2, #8
 800853e:	430a      	orrs	r2, r1
 8008540:	4934      	ldr	r1, [pc, #208]	; (8008614 <RCCEx_PLL2_Config+0x128>)
 8008542:	4313      	orrs	r3, r2
 8008544:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008546:	4b33      	ldr	r3, [pc, #204]	; (8008614 <RCCEx_PLL2_Config+0x128>)
 8008548:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800854a:	4b33      	ldr	r3, [pc, #204]	; (8008618 <RCCEx_PLL2_Config+0x12c>)
 800854c:	4013      	ands	r3, r2
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	6892      	ldr	r2, [r2, #8]
 8008552:	3a01      	subs	r2, #1
 8008554:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008558:	687a      	ldr	r2, [r7, #4]
 800855a:	68d2      	ldr	r2, [r2, #12]
 800855c:	3a01      	subs	r2, #1
 800855e:	0252      	lsls	r2, r2, #9
 8008560:	b292      	uxth	r2, r2
 8008562:	4311      	orrs	r1, r2
 8008564:	687a      	ldr	r2, [r7, #4]
 8008566:	6912      	ldr	r2, [r2, #16]
 8008568:	3a01      	subs	r2, #1
 800856a:	0412      	lsls	r2, r2, #16
 800856c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008570:	4311      	orrs	r1, r2
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	6952      	ldr	r2, [r2, #20]
 8008576:	3a01      	subs	r2, #1
 8008578:	0612      	lsls	r2, r2, #24
 800857a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800857e:	430a      	orrs	r2, r1
 8008580:	4924      	ldr	r1, [pc, #144]	; (8008614 <RCCEx_PLL2_Config+0x128>)
 8008582:	4313      	orrs	r3, r2
 8008584:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008586:	4b23      	ldr	r3, [pc, #140]	; (8008614 <RCCEx_PLL2_Config+0x128>)
 8008588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858a:	f023 020c 	bic.w	r2, r3, #12
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	699b      	ldr	r3, [r3, #24]
 8008592:	4920      	ldr	r1, [pc, #128]	; (8008614 <RCCEx_PLL2_Config+0x128>)
 8008594:	4313      	orrs	r3, r2
 8008596:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008598:	4b1e      	ldr	r3, [pc, #120]	; (8008614 <RCCEx_PLL2_Config+0x128>)
 800859a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6a1b      	ldr	r3, [r3, #32]
 80085a0:	491c      	ldr	r1, [pc, #112]	; (8008614 <RCCEx_PLL2_Config+0x128>)
 80085a2:	4313      	orrs	r3, r2
 80085a4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80085a6:	4b1b      	ldr	r3, [pc, #108]	; (8008614 <RCCEx_PLL2_Config+0x128>)
 80085a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085aa:	4a1a      	ldr	r2, [pc, #104]	; (8008614 <RCCEx_PLL2_Config+0x128>)
 80085ac:	f023 0310 	bic.w	r3, r3, #16
 80085b0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80085b2:	4b18      	ldr	r3, [pc, #96]	; (8008614 <RCCEx_PLL2_Config+0x128>)
 80085b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	69d2      	ldr	r2, [r2, #28]
 80085c2:	00d2      	lsls	r2, r2, #3
 80085c4:	4913      	ldr	r1, [pc, #76]	; (8008614 <RCCEx_PLL2_Config+0x128>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80085ca:	4b12      	ldr	r3, [pc, #72]	; (8008614 <RCCEx_PLL2_Config+0x128>)
 80085cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ce:	4a11      	ldr	r2, [pc, #68]	; (8008614 <RCCEx_PLL2_Config+0x128>)
 80085d0:	f043 0310 	orr.w	r3, r3, #16
 80085d4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80085d6:	4b0f      	ldr	r3, [pc, #60]	; (8008614 <RCCEx_PLL2_Config+0x128>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a0e      	ldr	r2, [pc, #56]	; (8008614 <RCCEx_PLL2_Config+0x128>)
 80085dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80085e0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80085e2:	f7f9 fe4f 	bl	8002284 <HAL_GetTick>
 80085e6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80085e8:	e008      	b.n	80085fc <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80085ea:	f7f9 fe4b 	bl	8002284 <HAL_GetTick>
 80085ee:	4602      	mov	r2, r0
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	1ad3      	subs	r3, r2, r3
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d901      	bls.n	80085fc <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80085f8:	2303      	movs	r3, #3
 80085fa:	e006      	b.n	800860a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80085fc:	4b05      	ldr	r3, [pc, #20]	; (8008614 <RCCEx_PLL2_Config+0x128>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008604:	2b00      	cmp	r3, #0
 8008606:	d0f0      	beq.n	80085ea <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008608:	2300      	movs	r3, #0

}
 800860a:	4618      	mov	r0, r3
 800860c:	3710      	adds	r7, #16
 800860e:	46bd      	mov	sp, r7
 8008610:	bd80      	pop	{r7, pc}
 8008612:	bf00      	nop
 8008614:	46020c00 	.word	0x46020c00
 8008618:	80800000 	.word	0x80800000

0800861c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008624:	4b47      	ldr	r3, [pc, #284]	; (8008744 <RCCEx_PLL3_Config+0x128>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a46      	ldr	r2, [pc, #280]	; (8008744 <RCCEx_PLL3_Config+0x128>)
 800862a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800862e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008630:	f7f9 fe28 	bl	8002284 <HAL_GetTick>
 8008634:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008636:	e008      	b.n	800864a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008638:	f7f9 fe24 	bl	8002284 <HAL_GetTick>
 800863c:	4602      	mov	r2, r0
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	1ad3      	subs	r3, r2, r3
 8008642:	2b02      	cmp	r3, #2
 8008644:	d901      	bls.n	800864a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008646:	2303      	movs	r3, #3
 8008648:	e077      	b.n	800873a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800864a:	4b3e      	ldr	r3, [pc, #248]	; (8008744 <RCCEx_PLL3_Config+0x128>)
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1f0      	bne.n	8008638 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008656:	4b3b      	ldr	r3, [pc, #236]	; (8008744 <RCCEx_PLL3_Config+0x128>)
 8008658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800865a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800865e:	f023 0303 	bic.w	r3, r3, #3
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	6811      	ldr	r1, [r2, #0]
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	6852      	ldr	r2, [r2, #4]
 800866a:	3a01      	subs	r2, #1
 800866c:	0212      	lsls	r2, r2, #8
 800866e:	430a      	orrs	r2, r1
 8008670:	4934      	ldr	r1, [pc, #208]	; (8008744 <RCCEx_PLL3_Config+0x128>)
 8008672:	4313      	orrs	r3, r2
 8008674:	630b      	str	r3, [r1, #48]	; 0x30
 8008676:	4b33      	ldr	r3, [pc, #204]	; (8008744 <RCCEx_PLL3_Config+0x128>)
 8008678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800867a:	4b33      	ldr	r3, [pc, #204]	; (8008748 <RCCEx_PLL3_Config+0x12c>)
 800867c:	4013      	ands	r3, r2
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	6892      	ldr	r2, [r2, #8]
 8008682:	3a01      	subs	r2, #1
 8008684:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	68d2      	ldr	r2, [r2, #12]
 800868c:	3a01      	subs	r2, #1
 800868e:	0252      	lsls	r2, r2, #9
 8008690:	b292      	uxth	r2, r2
 8008692:	4311      	orrs	r1, r2
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	6912      	ldr	r2, [r2, #16]
 8008698:	3a01      	subs	r2, #1
 800869a:	0412      	lsls	r2, r2, #16
 800869c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80086a0:	4311      	orrs	r1, r2
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	6952      	ldr	r2, [r2, #20]
 80086a6:	3a01      	subs	r2, #1
 80086a8:	0612      	lsls	r2, r2, #24
 80086aa:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80086ae:	430a      	orrs	r2, r1
 80086b0:	4924      	ldr	r1, [pc, #144]	; (8008744 <RCCEx_PLL3_Config+0x128>)
 80086b2:	4313      	orrs	r3, r2
 80086b4:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80086b6:	4b23      	ldr	r3, [pc, #140]	; (8008744 <RCCEx_PLL3_Config+0x128>)
 80086b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086ba:	f023 020c 	bic.w	r2, r3, #12
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	699b      	ldr	r3, [r3, #24]
 80086c2:	4920      	ldr	r1, [pc, #128]	; (8008744 <RCCEx_PLL3_Config+0x128>)
 80086c4:	4313      	orrs	r3, r2
 80086c6:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80086c8:	4b1e      	ldr	r3, [pc, #120]	; (8008744 <RCCEx_PLL3_Config+0x128>)
 80086ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a1b      	ldr	r3, [r3, #32]
 80086d0:	491c      	ldr	r1, [pc, #112]	; (8008744 <RCCEx_PLL3_Config+0x128>)
 80086d2:	4313      	orrs	r3, r2
 80086d4:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80086d6:	4b1b      	ldr	r3, [pc, #108]	; (8008744 <RCCEx_PLL3_Config+0x128>)
 80086d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086da:	4a1a      	ldr	r2, [pc, #104]	; (8008744 <RCCEx_PLL3_Config+0x128>)
 80086dc:	f023 0310 	bic.w	r3, r3, #16
 80086e0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80086e2:	4b18      	ldr	r3, [pc, #96]	; (8008744 <RCCEx_PLL3_Config+0x128>)
 80086e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	69d2      	ldr	r2, [r2, #28]
 80086f2:	00d2      	lsls	r2, r2, #3
 80086f4:	4913      	ldr	r1, [pc, #76]	; (8008744 <RCCEx_PLL3_Config+0x128>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80086fa:	4b12      	ldr	r3, [pc, #72]	; (8008744 <RCCEx_PLL3_Config+0x128>)
 80086fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086fe:	4a11      	ldr	r2, [pc, #68]	; (8008744 <RCCEx_PLL3_Config+0x128>)
 8008700:	f043 0310 	orr.w	r3, r3, #16
 8008704:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008706:	4b0f      	ldr	r3, [pc, #60]	; (8008744 <RCCEx_PLL3_Config+0x128>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a0e      	ldr	r2, [pc, #56]	; (8008744 <RCCEx_PLL3_Config+0x128>)
 800870c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008710:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008712:	f7f9 fdb7 	bl	8002284 <HAL_GetTick>
 8008716:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008718:	e008      	b.n	800872c <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800871a:	f7f9 fdb3 	bl	8002284 <HAL_GetTick>
 800871e:	4602      	mov	r2, r0
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	2b02      	cmp	r3, #2
 8008726:	d901      	bls.n	800872c <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008728:	2303      	movs	r3, #3
 800872a:	e006      	b.n	800873a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800872c:	4b05      	ldr	r3, [pc, #20]	; (8008744 <RCCEx_PLL3_Config+0x128>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d0f0      	beq.n	800871a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008738:	2300      	movs	r3, #0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3710      	adds	r7, #16
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	46020c00 	.word	0x46020c00
 8008748:	80800000 	.word	0x80800000

0800874c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800875a:	2301      	movs	r3, #1
 800875c:	e0dd      	b.n	800891a <HAL_SPI_Init+0x1ce>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a70      	ldr	r2, [pc, #448]	; (8008924 <HAL_SPI_Init+0x1d8>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d004      	beq.n	8008772 <HAL_SPI_Init+0x26>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a6e      	ldr	r2, [pc, #440]	; (8008928 <HAL_SPI_Init+0x1dc>)
 800876e:	4293      	cmp	r3, r2
 8008770:	e000      	b.n	8008774 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8008772:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	629a      	str	r2, [r3, #40]	; 0x28

  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a69      	ldr	r2, [pc, #420]	; (8008924 <HAL_SPI_Init+0x1d8>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d004      	beq.n	800878e <HAL_SPI_Init+0x42>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a67      	ldr	r2, [pc, #412]	; (8008928 <HAL_SPI_Init+0x1dc>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d105      	bne.n	800879a <HAL_SPI_Init+0x4e>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	2b0f      	cmp	r3, #15
 8008794:	d901      	bls.n	800879a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8008796:	2301      	movs	r3, #1
 8008798:	e0bf      	b.n	800891a <HAL_SPI_Init+0x1ce>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f8ce 	bl	800893c <SPI_GetPacketSize>
 80087a0:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a5f      	ldr	r2, [pc, #380]	; (8008924 <HAL_SPI_Init+0x1d8>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d004      	beq.n	80087b6 <HAL_SPI_Init+0x6a>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a5d      	ldr	r2, [pc, #372]	; (8008928 <HAL_SPI_Init+0x1dc>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d102      	bne.n	80087bc <HAL_SPI_Init+0x70>
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2b08      	cmp	r3, #8
 80087ba:	d816      	bhi.n	80087ea <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80087c0:	4a5a      	ldr	r2, [pc, #360]	; (800892c <HAL_SPI_Init+0x1e0>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d00e      	beq.n	80087e4 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a59      	ldr	r2, [pc, #356]	; (8008930 <HAL_SPI_Init+0x1e4>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d009      	beq.n	80087e4 <HAL_SPI_Init+0x98>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4a57      	ldr	r2, [pc, #348]	; (8008934 <HAL_SPI_Init+0x1e8>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d004      	beq.n	80087e4 <HAL_SPI_Init+0x98>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	4a56      	ldr	r2, [pc, #344]	; (8008938 <HAL_SPI_Init+0x1ec>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d104      	bne.n	80087ee <HAL_SPI_Init+0xa2>
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2b10      	cmp	r3, #16
 80087e8:	d901      	bls.n	80087ee <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e095      	b.n	800891a <HAL_SPI_Init+0x1ce>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d106      	bne.n	8008808 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7f9 f9c2 	bl	8001b8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2202      	movs	r2, #2
 800880c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f022 0201 	bic.w	r2, r2, #1
 800881e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800882a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	699b      	ldr	r3, [r3, #24]
 8008830:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008834:	d119      	bne.n	800886a <HAL_SPI_Init+0x11e>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	685b      	ldr	r3, [r3, #4]
 800883a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800883e:	d103      	bne.n	8008848 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008844:	2b00      	cmp	r3, #0
 8008846:	d008      	beq.n	800885a <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800884c:	2b00      	cmp	r3, #0
 800884e:	d10c      	bne.n	800886a <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008854:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008858:	d107      	bne.n	800886a <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008868:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	69da      	ldr	r2, [r3, #28]
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008872:	431a      	orrs	r2, r3
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	431a      	orrs	r2, r3
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800887c:	ea42 0103 	orr.w	r1, r2, r3
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	68da      	ldr	r2, [r3, #12]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	430a      	orrs	r2, r1
 800888a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008894:	431a      	orrs	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800889a:	431a      	orrs	r2, r3
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	699b      	ldr	r3, [r3, #24]
 80088a0:	431a      	orrs	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	691b      	ldr	r3, [r3, #16]
 80088a6:	431a      	orrs	r2, r3
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	695b      	ldr	r3, [r3, #20]
 80088ac:	431a      	orrs	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	431a      	orrs	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	685b      	ldr	r3, [r3, #4]
 80088b8:	431a      	orrs	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088be:	431a      	orrs	r2, r3
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	689b      	ldr	r3, [r3, #8]
 80088c4:	431a      	orrs	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80088ca:	431a      	orrs	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088d0:	431a      	orrs	r2, r3
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80088d6:	ea42 0103 	orr.w	r1, r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	430a      	orrs	r2, r1
 80088e4:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00a      	beq.n	8008908 <HAL_SPI_Init+0x1bc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	430a      	orrs	r2, r1
 8008906:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2200      	movs	r2, #0
 800890c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2201      	movs	r2, #1
 8008914:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8008918:	2300      	movs	r3, #0
}
 800891a:	4618      	mov	r0, r3
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
 8008922:	bf00      	nop
 8008924:	46002000 	.word	0x46002000
 8008928:	56002000 	.word	0x56002000
 800892c:	40013000 	.word	0x40013000
 8008930:	50013000 	.word	0x50013000
 8008934:	40003800 	.word	0x40003800
 8008938:	50003800 	.word	0x50003800

0800893c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008948:	095b      	lsrs	r3, r3, #5
 800894a:	3301      	adds	r3, #1
 800894c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	68db      	ldr	r3, [r3, #12]
 8008952:	3301      	adds	r3, #1
 8008954:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008956:	68bb      	ldr	r3, [r7, #8]
 8008958:	3307      	adds	r3, #7
 800895a:	08db      	lsrs	r3, r3, #3
 800895c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	fb02 f303 	mul.w	r3, r2, r3
}
 8008966:	4618      	mov	r0, r3
 8008968:	3714      	adds	r7, #20
 800896a:	46bd      	mov	sp, r7
 800896c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008970:	4770      	bx	lr

08008972 <HAL_SPIEx_SetConfigAutonomousMode>:
  * @param  sConfig Pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi, SPI_AutonomousModeConfTypeDef *sConfig)
{
 8008972:	b480      	push	{r7}
 8008974:	b083      	sub	sp, #12
 8008976:	af00      	add	r7, sp, #0
 8008978:	6078      	str	r0, [r7, #4]
 800897a:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008982:	b2db      	uxtb	r3, r3
 8008984:	2b01      	cmp	r3, #1
 8008986:	d12e      	bne.n	80089e6 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800898e:	2b01      	cmp	r3, #1
 8008990:	d101      	bne.n	8008996 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008992:	2302      	movs	r3, #2
 8008994:	e028      	b.n	80089e8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2201      	movs	r2, #1
 800899a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2202      	movs	r2, #2
 80089a2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));

    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	681a      	ldr	r2, [r3, #0]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f022 0201 	bic.w	r2, r2, #1
 80089b4:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80089c2:	ea42 0103 	orr.w	r1, r2, r3
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	689a      	ldr	r2, [r3, #8]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	430a      	orrs	r2, r1
 80089d0:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80089e2:	2300      	movs	r3, #0
 80089e4:	e000      	b.n	80089e8 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
  }
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d101      	bne.n	8008a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008a02:	2301      	movs	r3, #1
 8008a04:	e042      	b.n	8008a8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d106      	bne.n	8008a1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f7f9 f947 	bl	8001cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2224      	movs	r2, #36	; 0x24
 8008a22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	f022 0201 	bic.w	r2, r2, #1
 8008a34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a36:	6878      	ldr	r0, [r7, #4]
 8008a38:	f000 f82c 	bl	8008a94 <UART_SetConfig>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b01      	cmp	r3, #1
 8008a40:	d101      	bne.n	8008a46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8008a42:	2301      	movs	r3, #1
 8008a44:	e022      	b.n	8008a8c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d002      	beq.n	8008a54 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f9c2 	bl	8008dd8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	685a      	ldr	r2, [r3, #4]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	689a      	ldr	r2, [r3, #8]
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	681a      	ldr	r2, [r3, #0]
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f042 0201 	orr.w	r2, r2, #1
 8008a82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a84:	6878      	ldr	r0, [r7, #4]
 8008a86:	f000 fa49 	bl	8008f1c <UART_CheckIdleState>
 8008a8a:	4603      	mov	r3, r0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3708      	adds	r7, #8
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a98:	b094      	sub	sp, #80	; 0x50
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8008aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aa6:	681a      	ldr	r2, [r3, #0]
 8008aa8:	4b7e      	ldr	r3, [pc, #504]	; (8008ca4 <UART_SetConfig+0x210>)
 8008aaa:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aae:	689a      	ldr	r2, [r3, #8]
 8008ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	431a      	orrs	r2, r3
 8008ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	431a      	orrs	r2, r3
 8008abc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008abe:	69db      	ldr	r3, [r3, #28]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4977      	ldr	r1, [pc, #476]	; (8008ca8 <UART_SetConfig+0x214>)
 8008acc:	4019      	ands	r1, r3
 8008ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ad0:	681a      	ldr	r2, [r3, #0]
 8008ad2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ad4:	430b      	orrs	r3, r1
 8008ad6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae4:	68d9      	ldr	r1, [r3, #12]
 8008ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	ea40 0301 	orr.w	r3, r0, r1
 8008aee:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	4b6a      	ldr	r3, [pc, #424]	; (8008ca4 <UART_SetConfig+0x210>)
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d009      	beq.n	8008b14 <UART_SetConfig+0x80>
 8008b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b02:	681a      	ldr	r2, [r3, #0]
 8008b04:	4b69      	ldr	r3, [pc, #420]	; (8008cac <UART_SetConfig+0x218>)
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d004      	beq.n	8008b14 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b0c:	6a1a      	ldr	r2, [r3, #32]
 8008b0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b10:	4313      	orrs	r3, r2
 8008b12:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8008b1e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8008b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b24:	681a      	ldr	r2, [r3, #0]
 8008b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b28:	430b      	orrs	r3, r1
 8008b2a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b32:	f023 000f 	bic.w	r0, r3, #15
 8008b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b38:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	ea40 0301 	orr.w	r3, r0, r1
 8008b42:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	4b59      	ldr	r3, [pc, #356]	; (8008cb0 <UART_SetConfig+0x21c>)
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d102      	bne.n	8008b54 <UART_SetConfig+0xc0>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b52:	e029      	b.n	8008ba8 <UART_SetConfig+0x114>
 8008b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	4b56      	ldr	r3, [pc, #344]	; (8008cb4 <UART_SetConfig+0x220>)
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d102      	bne.n	8008b64 <UART_SetConfig+0xd0>
 8008b5e:	2302      	movs	r3, #2
 8008b60:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b62:	e021      	b.n	8008ba8 <UART_SetConfig+0x114>
 8008b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b66:	681a      	ldr	r2, [r3, #0]
 8008b68:	4b53      	ldr	r3, [pc, #332]	; (8008cb8 <UART_SetConfig+0x224>)
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d102      	bne.n	8008b74 <UART_SetConfig+0xe0>
 8008b6e:	2304      	movs	r3, #4
 8008b70:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b72:	e019      	b.n	8008ba8 <UART_SetConfig+0x114>
 8008b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	4b50      	ldr	r3, [pc, #320]	; (8008cbc <UART_SetConfig+0x228>)
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d102      	bne.n	8008b84 <UART_SetConfig+0xf0>
 8008b7e:	2308      	movs	r3, #8
 8008b80:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b82:	e011      	b.n	8008ba8 <UART_SetConfig+0x114>
 8008b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b86:	681a      	ldr	r2, [r3, #0]
 8008b88:	4b4d      	ldr	r3, [pc, #308]	; (8008cc0 <UART_SetConfig+0x22c>)
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d102      	bne.n	8008b94 <UART_SetConfig+0x100>
 8008b8e:	2310      	movs	r3, #16
 8008b90:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b92:	e009      	b.n	8008ba8 <UART_SetConfig+0x114>
 8008b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b96:	681a      	ldr	r2, [r3, #0]
 8008b98:	4b42      	ldr	r3, [pc, #264]	; (8008ca4 <UART_SetConfig+0x210>)
 8008b9a:	429a      	cmp	r2, r3
 8008b9c:	d102      	bne.n	8008ba4 <UART_SetConfig+0x110>
 8008b9e:	2320      	movs	r3, #32
 8008ba0:	64bb      	str	r3, [r7, #72]	; 0x48
 8008ba2:	e001      	b.n	8008ba8 <UART_SetConfig+0x114>
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	4b3d      	ldr	r3, [pc, #244]	; (8008ca4 <UART_SetConfig+0x210>)
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d005      	beq.n	8008bbe <UART_SetConfig+0x12a>
 8008bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bb4:	681a      	ldr	r2, [r3, #0]
 8008bb6:	4b3d      	ldr	r3, [pc, #244]	; (8008cac <UART_SetConfig+0x218>)
 8008bb8:	429a      	cmp	r2, r3
 8008bba:	f040 8085 	bne.w	8008cc8 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	623b      	str	r3, [r7, #32]
 8008bc4:	627a      	str	r2, [r7, #36]	; 0x24
 8008bc6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8008bca:	f7fe fb67 	bl	800729c <HAL_RCCEx_GetPeriphCLKFreq>
 8008bce:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8008bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	f000 80e8 	beq.w	8008da8 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bdc:	4a39      	ldr	r2, [pc, #228]	; (8008cc4 <UART_SetConfig+0x230>)
 8008bde:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008be2:	461a      	mov	r2, r3
 8008be4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008be6:	fbb3 f3f2 	udiv	r3, r3, r2
 8008bea:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bee:	685a      	ldr	r2, [r3, #4]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	005b      	lsls	r3, r3, #1
 8008bf4:	4413      	add	r3, r2
 8008bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bf8:	429a      	cmp	r2, r3
 8008bfa:	d305      	bcc.n	8008c08 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008c02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d903      	bls.n	8008c10 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008c0e:	e048      	b.n	8008ca2 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c12:	2200      	movs	r2, #0
 8008c14:	61bb      	str	r3, [r7, #24]
 8008c16:	61fa      	str	r2, [r7, #28]
 8008c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c1c:	4a29      	ldr	r2, [pc, #164]	; (8008cc4 <UART_SetConfig+0x230>)
 8008c1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	2200      	movs	r2, #0
 8008c26:	613b      	str	r3, [r7, #16]
 8008c28:	617a      	str	r2, [r7, #20]
 8008c2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008c2e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8008c32:	f7f7 fb1f 	bl	8000274 <__aeabi_uldivmod>
 8008c36:	4602      	mov	r2, r0
 8008c38:	460b      	mov	r3, r1
 8008c3a:	4610      	mov	r0, r2
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	f04f 0200 	mov.w	r2, #0
 8008c42:	f04f 0300 	mov.w	r3, #0
 8008c46:	020b      	lsls	r3, r1, #8
 8008c48:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008c4c:	0202      	lsls	r2, r0, #8
 8008c4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c50:	6849      	ldr	r1, [r1, #4]
 8008c52:	0849      	lsrs	r1, r1, #1
 8008c54:	2000      	movs	r0, #0
 8008c56:	460c      	mov	r4, r1
 8008c58:	4605      	mov	r5, r0
 8008c5a:	eb12 0804 	adds.w	r8, r2, r4
 8008c5e:	eb43 0905 	adc.w	r9, r3, r5
 8008c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	60bb      	str	r3, [r7, #8]
 8008c6a:	60fa      	str	r2, [r7, #12]
 8008c6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008c70:	4640      	mov	r0, r8
 8008c72:	4649      	mov	r1, r9
 8008c74:	f7f7 fafe 	bl	8000274 <__aeabi_uldivmod>
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008c86:	d308      	bcc.n	8008c9a <UART_SetConfig+0x206>
 8008c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c8e:	d204      	bcs.n	8008c9a <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8008c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c96:	60da      	str	r2, [r3, #12]
 8008c98:	e003      	b.n	8008ca2 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8008ca0:	e082      	b.n	8008da8 <UART_SetConfig+0x314>
 8008ca2:	e081      	b.n	8008da8 <UART_SetConfig+0x314>
 8008ca4:	46002400 	.word	0x46002400
 8008ca8:	cfff69f3 	.word	0xcfff69f3
 8008cac:	56002400 	.word	0x56002400
 8008cb0:	40013800 	.word	0x40013800
 8008cb4:	40004400 	.word	0x40004400
 8008cb8:	40004800 	.word	0x40004800
 8008cbc:	40004c00 	.word	0x40004c00
 8008cc0:	40005000 	.word	0x40005000
 8008cc4:	0800ad3c 	.word	0x0800ad3c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cca:	69db      	ldr	r3, [r3, #28]
 8008ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cd0:	d13c      	bne.n	8008d4c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	603b      	str	r3, [r7, #0]
 8008cd8:	607a      	str	r2, [r7, #4]
 8008cda:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008cde:	f7fe fadd 	bl	800729c <HAL_RCCEx_GetPeriphCLKFreq>
 8008ce2:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ce4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d05e      	beq.n	8008da8 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cee:	4a39      	ldr	r2, [pc, #228]	; (8008dd4 <UART_SetConfig+0x340>)
 8008cf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008cf4:	461a      	mov	r2, r3
 8008cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008cfc:	005a      	lsls	r2, r3, #1
 8008cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d00:	685b      	ldr	r3, [r3, #4]
 8008d02:	085b      	lsrs	r3, r3, #1
 8008d04:	441a      	add	r2, r3
 8008d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d12:	2b0f      	cmp	r3, #15
 8008d14:	d916      	bls.n	8008d44 <UART_SetConfig+0x2b0>
 8008d16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d1c:	d212      	bcs.n	8008d44 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	f023 030f 	bic.w	r3, r3, #15
 8008d26:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d2a:	085b      	lsrs	r3, r3, #1
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	f003 0307 	and.w	r3, r3, #7
 8008d32:	b29a      	uxth	r2, r3
 8008d34:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008d36:	4313      	orrs	r3, r2
 8008d38:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8008d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8008d40:	60da      	str	r2, [r3, #12]
 8008d42:	e031      	b.n	8008da8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008d4a:	e02d      	b.n	8008da8 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8008d4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d4e:	2200      	movs	r2, #0
 8008d50:	469a      	mov	sl, r3
 8008d52:	4693      	mov	fp, r2
 8008d54:	4650      	mov	r0, sl
 8008d56:	4659      	mov	r1, fp
 8008d58:	f7fe faa0 	bl	800729c <HAL_RCCEx_GetPeriphCLKFreq>
 8008d5c:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8008d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d021      	beq.n	8008da8 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d68:	4a1a      	ldr	r2, [pc, #104]	; (8008dd4 <UART_SetConfig+0x340>)
 8008d6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008d6e:	461a      	mov	r2, r3
 8008d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008d72:	fbb3 f2f2 	udiv	r2, r3, r2
 8008d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	085b      	lsrs	r3, r3, #1
 8008d7c:	441a      	add	r2, r3
 8008d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d86:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d8a:	2b0f      	cmp	r3, #15
 8008d8c:	d909      	bls.n	8008da2 <UART_SetConfig+0x30e>
 8008d8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d94:	d205      	bcs.n	8008da2 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d98:	b29a      	uxth	r2, r3
 8008d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	60da      	str	r2, [r3, #12]
 8008da0:	e002      	b.n	8008da8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008daa:	2201      	movs	r2, #1
 8008dac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db2:	2201      	movs	r2, #1
 8008db4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dba:	2200      	movs	r2, #0
 8008dbc:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008dc4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3750      	adds	r7, #80	; 0x50
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008dd2:	bf00      	nop
 8008dd4:	0800ad3c 	.word	0x0800ad3c

08008dd8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008de4:	f003 0301 	and.w	r3, r3, #1
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d00a      	beq.n	8008e02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	685b      	ldr	r3, [r3, #4]
 8008df2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e06:	f003 0302 	and.w	r3, r3, #2
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00a      	beq.n	8008e24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	430a      	orrs	r2, r1
 8008e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e28:	f003 0304 	and.w	r3, r3, #4
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d00a      	beq.n	8008e46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	430a      	orrs	r2, r1
 8008e44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4a:	f003 0308 	and.w	r3, r3, #8
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d00a      	beq.n	8008e68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	430a      	orrs	r2, r1
 8008e66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e6c:	f003 0310 	and.w	r3, r3, #16
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00a      	beq.n	8008e8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	689b      	ldr	r3, [r3, #8]
 8008e7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	430a      	orrs	r2, r1
 8008e88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8e:	f003 0320 	and.w	r3, r3, #32
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d00a      	beq.n	8008eac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	430a      	orrs	r2, r1
 8008eaa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d01a      	beq.n	8008eee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	685b      	ldr	r3, [r3, #4]
 8008ebe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	430a      	orrs	r2, r1
 8008ecc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ed2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ed6:	d10a      	bne.n	8008eee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	430a      	orrs	r2, r1
 8008eec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d00a      	beq.n	8008f10 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	430a      	orrs	r2, r1
 8008f0e:	605a      	str	r2, [r3, #4]
  }
}
 8008f10:	bf00      	nop
 8008f12:	370c      	adds	r7, #12
 8008f14:	46bd      	mov	sp, r7
 8008f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1a:	4770      	bx	lr

08008f1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	b086      	sub	sp, #24
 8008f20:	af02      	add	r7, sp, #8
 8008f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008f2c:	f7f9 f9aa 	bl	8002284 <HAL_GetTick>
 8008f30:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f003 0308 	and.w	r3, r3, #8
 8008f3c:	2b08      	cmp	r3, #8
 8008f3e:	d10e      	bne.n	8008f5e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f44:	9300      	str	r3, [sp, #0]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2200      	movs	r2, #0
 8008f4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f82f 	bl	8008fb2 <UART_WaitOnFlagUntilTimeout>
 8008f54:	4603      	mov	r3, r0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d001      	beq.n	8008f5e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	e025      	b.n	8008faa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f003 0304 	and.w	r3, r3, #4
 8008f68:	2b04      	cmp	r3, #4
 8008f6a:	d10e      	bne.n	8008f8a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008f6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	2200      	movs	r2, #0
 8008f76:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f819 	bl	8008fb2 <UART_WaitOnFlagUntilTimeout>
 8008f80:	4603      	mov	r3, r0
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d001      	beq.n	8008f8a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008f86:	2303      	movs	r3, #3
 8008f88:	e00f      	b.n	8008faa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2220      	movs	r2, #32
 8008f8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2220      	movs	r2, #32
 8008f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008fa8:	2300      	movs	r3, #0
}
 8008faa:	4618      	mov	r0, r3
 8008fac:	3710      	adds	r7, #16
 8008fae:	46bd      	mov	sp, r7
 8008fb0:	bd80      	pop	{r7, pc}

08008fb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008fb2:	b580      	push	{r7, lr}
 8008fb4:	b09c      	sub	sp, #112	; 0x70
 8008fb6:	af00      	add	r7, sp, #0
 8008fb8:	60f8      	str	r0, [r7, #12]
 8008fba:	60b9      	str	r1, [r7, #8]
 8008fbc:	603b      	str	r3, [r7, #0]
 8008fbe:	4613      	mov	r3, r2
 8008fc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fc2:	e0a9      	b.n	8009118 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fca:	f000 80a5 	beq.w	8009118 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fce:	f7f9 f959 	bl	8002284 <HAL_GetTick>
 8008fd2:	4602      	mov	r2, r0
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	1ad3      	subs	r3, r2, r3
 8008fd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d302      	bcc.n	8008fe4 <UART_WaitOnFlagUntilTimeout+0x32>
 8008fde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d140      	bne.n	8009066 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008fec:	e853 3f00 	ldrex	r3, [r3]
 8008ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ff4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008ff8:	667b      	str	r3, [r7, #100]	; 0x64
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009002:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009004:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009006:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009008:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800900a:	e841 2300 	strex	r3, r2, [r1]
 800900e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009012:	2b00      	cmp	r3, #0
 8009014:	d1e6      	bne.n	8008fe4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	3308      	adds	r3, #8
 800901c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800901e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009020:	e853 3f00 	ldrex	r3, [r3]
 8009024:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009028:	f023 0301 	bic.w	r3, r3, #1
 800902c:	663b      	str	r3, [r7, #96]	; 0x60
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	3308      	adds	r3, #8
 8009034:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009036:	64ba      	str	r2, [r7, #72]	; 0x48
 8009038:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800903a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800903c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800903e:	e841 2300 	strex	r3, r2, [r1]
 8009042:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009046:	2b00      	cmp	r3, #0
 8009048:	d1e5      	bne.n	8009016 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	2220      	movs	r2, #32
 800904e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	2220      	movs	r2, #32
 8009056:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009062:	2303      	movs	r3, #3
 8009064:	e069      	b.n	800913a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 0304 	and.w	r3, r3, #4
 8009070:	2b00      	cmp	r3, #0
 8009072:	d051      	beq.n	8009118 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	69db      	ldr	r3, [r3, #28]
 800907a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800907e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009082:	d149      	bne.n	8009118 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800908c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009096:	e853 3f00 	ldrex	r3, [r3]
 800909a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800909c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800909e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80090a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	461a      	mov	r2, r3
 80090aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090ac:	637b      	str	r3, [r7, #52]	; 0x34
 80090ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090b4:	e841 2300 	strex	r3, r2, [r1]
 80090b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1e6      	bne.n	800908e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	3308      	adds	r3, #8
 80090c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090c8:	697b      	ldr	r3, [r7, #20]
 80090ca:	e853 3f00 	ldrex	r3, [r3]
 80090ce:	613b      	str	r3, [r7, #16]
   return(result);
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	f023 0301 	bic.w	r3, r3, #1
 80090d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	3308      	adds	r3, #8
 80090de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80090e0:	623a      	str	r2, [r7, #32]
 80090e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090e4:	69f9      	ldr	r1, [r7, #28]
 80090e6:	6a3a      	ldr	r2, [r7, #32]
 80090e8:	e841 2300 	strex	r3, r2, [r1]
 80090ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d1e5      	bne.n	80090c0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	2220      	movs	r2, #32
 80090f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2220      	movs	r2, #32
 8009100:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2220      	movs	r2, #32
 8009108:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009114:	2303      	movs	r3, #3
 8009116:	e010      	b.n	800913a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	69da      	ldr	r2, [r3, #28]
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	4013      	ands	r3, r2
 8009122:	68ba      	ldr	r2, [r7, #8]
 8009124:	429a      	cmp	r2, r3
 8009126:	bf0c      	ite	eq
 8009128:	2301      	moveq	r3, #1
 800912a:	2300      	movne	r3, #0
 800912c:	b2db      	uxtb	r3, r3
 800912e:	461a      	mov	r2, r3
 8009130:	79fb      	ldrb	r3, [r7, #7]
 8009132:	429a      	cmp	r2, r3
 8009134:	f43f af46 	beq.w	8008fc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009138:	2300      	movs	r3, #0
}
 800913a:	4618      	mov	r0, r3
 800913c:	3770      	adds	r7, #112	; 0x70
 800913e:	46bd      	mov	sp, r7
 8009140:	bd80      	pop	{r7, pc}

08009142 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009142:	b480      	push	{r7}
 8009144:	b085      	sub	sp, #20
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009150:	2b01      	cmp	r3, #1
 8009152:	d101      	bne.n	8009158 <HAL_UARTEx_DisableFifoMode+0x16>
 8009154:	2302      	movs	r3, #2
 8009156:	e027      	b.n	80091a8 <HAL_UARTEx_DisableFifoMode+0x66>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	2224      	movs	r2, #36	; 0x24
 8009164:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	681a      	ldr	r2, [r3, #0]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f022 0201 	bic.w	r2, r2, #1
 800917e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009186:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2200      	movs	r2, #0
 800918c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2220      	movs	r2, #32
 800919a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2200      	movs	r2, #0
 80091a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80091a6:	2300      	movs	r3, #0
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3714      	adds	r7, #20
 80091ac:	46bd      	mov	sp, r7
 80091ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b2:	4770      	bx	lr

080091b4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
 80091bc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d101      	bne.n	80091cc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80091c8:	2302      	movs	r3, #2
 80091ca:	e02d      	b.n	8009228 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2224      	movs	r2, #36	; 0x24
 80091d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f022 0201 	bic.w	r2, r2, #1
 80091f2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	689b      	ldr	r3, [r3, #8]
 80091fa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	683a      	ldr	r2, [r7, #0]
 8009204:	430a      	orrs	r2, r1
 8009206:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f000 f84f 	bl	80092ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2220      	movs	r2, #32
 800921a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3710      	adds	r7, #16
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b084      	sub	sp, #16
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009240:	2b01      	cmp	r3, #1
 8009242:	d101      	bne.n	8009248 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009244:	2302      	movs	r3, #2
 8009246:	e02d      	b.n	80092a4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2224      	movs	r2, #36	; 0x24
 8009254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f022 0201 	bic.w	r2, r2, #1
 800926e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	689b      	ldr	r3, [r3, #8]
 8009276:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	683a      	ldr	r2, [r7, #0]
 8009280:	430a      	orrs	r2, r1
 8009282:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f000 f811 	bl	80092ac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2220      	movs	r2, #32
 8009296:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b085      	sub	sp, #20
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d108      	bne.n	80092ce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2201      	movs	r2, #1
 80092c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2201      	movs	r2, #1
 80092c8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80092cc:	e031      	b.n	8009332 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80092ce:	2308      	movs	r3, #8
 80092d0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80092d2:	2308      	movs	r3, #8
 80092d4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	0e5b      	lsrs	r3, r3, #25
 80092de:	b2db      	uxtb	r3, r3
 80092e0:	f003 0307 	and.w	r3, r3, #7
 80092e4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	0f5b      	lsrs	r3, r3, #29
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	f003 0307 	and.w	r3, r3, #7
 80092f4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80092f6:	7bbb      	ldrb	r3, [r7, #14]
 80092f8:	7b3a      	ldrb	r2, [r7, #12]
 80092fa:	4911      	ldr	r1, [pc, #68]	; (8009340 <UARTEx_SetNbDataToProcess+0x94>)
 80092fc:	5c8a      	ldrb	r2, [r1, r2]
 80092fe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009302:	7b3a      	ldrb	r2, [r7, #12]
 8009304:	490f      	ldr	r1, [pc, #60]	; (8009344 <UARTEx_SetNbDataToProcess+0x98>)
 8009306:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009308:	fb93 f3f2 	sdiv	r3, r3, r2
 800930c:	b29a      	uxth	r2, r3
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009314:	7bfb      	ldrb	r3, [r7, #15]
 8009316:	7b7a      	ldrb	r2, [r7, #13]
 8009318:	4909      	ldr	r1, [pc, #36]	; (8009340 <UARTEx_SetNbDataToProcess+0x94>)
 800931a:	5c8a      	ldrb	r2, [r1, r2]
 800931c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009320:	7b7a      	ldrb	r2, [r7, #13]
 8009322:	4908      	ldr	r1, [pc, #32]	; (8009344 <UARTEx_SetNbDataToProcess+0x98>)
 8009324:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009326:	fb93 f3f2 	sdiv	r3, r3, r2
 800932a:	b29a      	uxth	r2, r3
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009332:	bf00      	nop
 8009334:	3714      	adds	r7, #20
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
 800933e:	bf00      	nop
 8009340:	0800ad54 	.word	0x0800ad54
 8009344:	0800ad5c 	.word	0x0800ad5c

08009348 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f043 0202 	orr.w	r2, r3, #2
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	685a      	ldr	r2, [r3, #4]
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	021b      	lsls	r3, r3, #8
 8009368:	431a      	orrs	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f023 0202 	bic.w	r2, r3, #2
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	601a      	str	r2, [r3, #0]
}
 800937a:	bf00      	nop
 800937c:	370c      	adds	r7, #12
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr

08009386 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8009386:	b480      	push	{r7}
 8009388:	b08b      	sub	sp, #44	; 0x2c
 800938a:	af00      	add	r7, sp, #0
 800938c:	60f8      	str	r0, [r7, #12]
 800938e:	60b9      	str	r1, [r7, #8]
 8009390:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681a      	ldr	r2, [r3, #0]
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	fa93 f3a3 	rbit	r3, r3
 80093a0:	613b      	str	r3, [r7, #16]
  return result;
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d101      	bne.n	80093b0 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80093ac:	2320      	movs	r3, #32
 80093ae:	e003      	b.n	80093b8 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80093b0:	69bb      	ldr	r3, [r7, #24]
 80093b2:	fab3 f383 	clz	r3, r3
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	005b      	lsls	r3, r3, #1
 80093ba:	2103      	movs	r1, #3
 80093bc:	fa01 f303 	lsl.w	r3, r1, r3
 80093c0:	43db      	mvns	r3, r3
 80093c2:	401a      	ands	r2, r3
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80093c8:	6a3b      	ldr	r3, [r7, #32]
 80093ca:	fa93 f3a3 	rbit	r3, r3
 80093ce:	61fb      	str	r3, [r7, #28]
  return result;
 80093d0:	69fb      	ldr	r3, [r7, #28]
 80093d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80093d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d101      	bne.n	80093de <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80093da:	2320      	movs	r3, #32
 80093dc:	e003      	b.n	80093e6 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80093de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e0:	fab3 f383 	clz	r3, r3
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	005b      	lsls	r3, r3, #1
 80093e8:	6879      	ldr	r1, [r7, #4]
 80093ea:	fa01 f303 	lsl.w	r3, r1, r3
 80093ee:	431a      	orrs	r2, r3
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	601a      	str	r2, [r3, #0]
}
 80093f4:	bf00      	nop
 80093f6:	372c      	adds	r7, #44	; 0x2c
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8009400:	b480      	push	{r7}
 8009402:	b085      	sub	sp, #20
 8009404:	af00      	add	r7, sp, #0
 8009406:	60f8      	str	r0, [r7, #12]
 8009408:	60b9      	str	r1, [r7, #8]
 800940a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	685a      	ldr	r2, [r3, #4]
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	43db      	mvns	r3, r3
 8009414:	401a      	ands	r2, r3
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	6879      	ldr	r1, [r7, #4]
 800941a:	fb01 f303 	mul.w	r3, r1, r3
 800941e:	431a      	orrs	r2, r3
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	605a      	str	r2, [r3, #4]
}
 8009424:	bf00      	nop
 8009426:	3714      	adds	r7, #20
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8009430:	b480      	push	{r7}
 8009432:	b08b      	sub	sp, #44	; 0x2c
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	689a      	ldr	r2, [r3, #8]
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	fa93 f3a3 	rbit	r3, r3
 800944a:	613b      	str	r3, [r7, #16]
  return result;
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009450:	69bb      	ldr	r3, [r7, #24]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d101      	bne.n	800945a <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8009456:	2320      	movs	r3, #32
 8009458:	e003      	b.n	8009462 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800945a:	69bb      	ldr	r3, [r7, #24]
 800945c:	fab3 f383 	clz	r3, r3
 8009460:	b2db      	uxtb	r3, r3
 8009462:	005b      	lsls	r3, r3, #1
 8009464:	2103      	movs	r1, #3
 8009466:	fa01 f303 	lsl.w	r3, r1, r3
 800946a:	43db      	mvns	r3, r3
 800946c:	401a      	ands	r2, r3
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009472:	6a3b      	ldr	r3, [r7, #32]
 8009474:	fa93 f3a3 	rbit	r3, r3
 8009478:	61fb      	str	r3, [r7, #28]
  return result;
 800947a:	69fb      	ldr	r3, [r7, #28]
 800947c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800947e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009480:	2b00      	cmp	r3, #0
 8009482:	d101      	bne.n	8009488 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8009484:	2320      	movs	r3, #32
 8009486:	e003      	b.n	8009490 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8009488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948a:	fab3 f383 	clz	r3, r3
 800948e:	b2db      	uxtb	r3, r3
 8009490:	005b      	lsls	r3, r3, #1
 8009492:	6879      	ldr	r1, [r7, #4]
 8009494:	fa01 f303 	lsl.w	r3, r1, r3
 8009498:	431a      	orrs	r2, r3
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800949e:	bf00      	nop
 80094a0:	372c      	adds	r7, #44	; 0x2c
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b08b      	sub	sp, #44	; 0x2c
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	60f8      	str	r0, [r7, #12]
 80094b2:	60b9      	str	r1, [r7, #8]
 80094b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	68da      	ldr	r2, [r3, #12]
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	fa93 f3a3 	rbit	r3, r3
 80094c4:	613b      	str	r3, [r7, #16]
  return result;
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d101      	bne.n	80094d4 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80094d0:	2320      	movs	r3, #32
 80094d2:	e003      	b.n	80094dc <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	fab3 f383 	clz	r3, r3
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	005b      	lsls	r3, r3, #1
 80094de:	2103      	movs	r1, #3
 80094e0:	fa01 f303 	lsl.w	r3, r1, r3
 80094e4:	43db      	mvns	r3, r3
 80094e6:	401a      	ands	r2, r3
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80094ec:	6a3b      	ldr	r3, [r7, #32]
 80094ee:	fa93 f3a3 	rbit	r3, r3
 80094f2:	61fb      	str	r3, [r7, #28]
  return result;
 80094f4:	69fb      	ldr	r3, [r7, #28]
 80094f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80094f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d101      	bne.n	8009502 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80094fe:	2320      	movs	r3, #32
 8009500:	e003      	b.n	800950a <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8009502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009504:	fab3 f383 	clz	r3, r3
 8009508:	b2db      	uxtb	r3, r3
 800950a:	005b      	lsls	r3, r3, #1
 800950c:	6879      	ldr	r1, [r7, #4]
 800950e:	fa01 f303 	lsl.w	r3, r1, r3
 8009512:	431a      	orrs	r2, r3
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	60da      	str	r2, [r3, #12]
}
 8009518:	bf00      	nop
 800951a:	372c      	adds	r7, #44	; 0x2c
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr

08009524 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8009524:	b480      	push	{r7}
 8009526:	b08b      	sub	sp, #44	; 0x2c
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6a1a      	ldr	r2, [r3, #32]
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009538:	697b      	ldr	r3, [r7, #20]
 800953a:	fa93 f3a3 	rbit	r3, r3
 800953e:	613b      	str	r3, [r7, #16]
  return result;
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8009544:	69bb      	ldr	r3, [r7, #24]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d101      	bne.n	800954e <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800954a:	2320      	movs	r3, #32
 800954c:	e003      	b.n	8009556 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	fab3 f383 	clz	r3, r3
 8009554:	b2db      	uxtb	r3, r3
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	210f      	movs	r1, #15
 800955a:	fa01 f303 	lsl.w	r3, r1, r3
 800955e:	43db      	mvns	r3, r3
 8009560:	401a      	ands	r2, r3
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009566:	6a3b      	ldr	r3, [r7, #32]
 8009568:	fa93 f3a3 	rbit	r3, r3
 800956c:	61fb      	str	r3, [r7, #28]
  return result;
 800956e:	69fb      	ldr	r3, [r7, #28]
 8009570:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8009572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009574:	2b00      	cmp	r3, #0
 8009576:	d101      	bne.n	800957c <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8009578:	2320      	movs	r3, #32
 800957a:	e003      	b.n	8009584 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800957c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957e:	fab3 f383 	clz	r3, r3
 8009582:	b2db      	uxtb	r3, r3
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	6879      	ldr	r1, [r7, #4]
 8009588:	fa01 f303 	lsl.w	r3, r1, r3
 800958c:	431a      	orrs	r2, r3
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8009592:	bf00      	nop
 8009594:	372c      	adds	r7, #44	; 0x2c
 8009596:	46bd      	mov	sp, r7
 8009598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959c:	4770      	bx	lr

0800959e <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800959e:	b480      	push	{r7}
 80095a0:	b08b      	sub	sp, #44	; 0x2c
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	60f8      	str	r0, [r7, #12]
 80095a6:	60b9      	str	r1, [r7, #8]
 80095a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	0a1b      	lsrs	r3, r3, #8
 80095b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	fa93 f3a3 	rbit	r3, r3
 80095ba:	613b      	str	r3, [r7, #16]
  return result;
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80095c0:	69bb      	ldr	r3, [r7, #24]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d101      	bne.n	80095ca <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80095c6:	2320      	movs	r3, #32
 80095c8:	e003      	b.n	80095d2 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	fab3 f383 	clz	r3, r3
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	210f      	movs	r1, #15
 80095d6:	fa01 f303 	lsl.w	r3, r1, r3
 80095da:	43db      	mvns	r3, r3
 80095dc:	401a      	ands	r2, r3
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	0a1b      	lsrs	r3, r3, #8
 80095e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80095e4:	6a3b      	ldr	r3, [r7, #32]
 80095e6:	fa93 f3a3 	rbit	r3, r3
 80095ea:	61fb      	str	r3, [r7, #28]
  return result;
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80095f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d101      	bne.n	80095fa <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80095f6:	2320      	movs	r3, #32
 80095f8:	e003      	b.n	8009602 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80095fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fc:	fab3 f383 	clz	r3, r3
 8009600:	b2db      	uxtb	r3, r3
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	6879      	ldr	r1, [r7, #4]
 8009606:	fa01 f303 	lsl.w	r3, r1, r3
 800960a:	431a      	orrs	r2, r3
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8009610:	bf00      	nop
 8009612:	372c      	adds	r7, #44	; 0x2c
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b08a      	sub	sp, #40	; 0x28
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8009626:	683b      	ldr	r3, [r7, #0]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	fa93 f3a3 	rbit	r3, r3
 8009632:	617b      	str	r3, [r7, #20]
  return result;
 8009634:	697b      	ldr	r3, [r7, #20]
 8009636:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d101      	bne.n	8009642 <LL_GPIO_Init+0x26>
    return 32U;
 800963e:	2320      	movs	r3, #32
 8009640:	e003      	b.n	800964a <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	fab3 f383 	clz	r3, r3
 8009648:	b2db      	uxtb	r3, r3
 800964a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800964c:	e050      	b.n	80096f0 <LL_GPIO_Init+0xd4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	681a      	ldr	r2, [r3, #0]
 8009652:	2101      	movs	r1, #1
 8009654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009656:	fa01 f303 	lsl.w	r3, r1, r3
 800965a:	4013      	ands	r3, r2
 800965c:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800965e:	6a3b      	ldr	r3, [r7, #32]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d042      	beq.n	80096ea <LL_GPIO_Init+0xce>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	685b      	ldr	r3, [r3, #4]
 8009668:	461a      	mov	r2, r3
 800966a:	6a39      	ldr	r1, [r7, #32]
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7ff fe8a 	bl	8009386 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d003      	beq.n	8009682 <LL_GPIO_Init+0x66>
 800967a:	683b      	ldr	r3, [r7, #0]
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	2b02      	cmp	r3, #2
 8009680:	d106      	bne.n	8009690 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	689b      	ldr	r3, [r3, #8]
 8009686:	461a      	mov	r2, r3
 8009688:	6a39      	ldr	r1, [r7, #32]
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f7ff fed0 	bl	8009430 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	461a      	mov	r2, r3
 8009696:	6a39      	ldr	r1, [r7, #32]
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f7ff ff06 	bl	80094aa <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d121      	bne.n	80096ea <LL_GPIO_Init+0xce>
 80096a6:	6a3b      	ldr	r3, [r7, #32]
 80096a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	fa93 f3a3 	rbit	r3, r3
 80096b0:	60bb      	str	r3, [r7, #8]
  return result;
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d101      	bne.n	80096c0 <LL_GPIO_Init+0xa4>
    return 32U;
 80096bc:	2320      	movs	r3, #32
 80096be:	e003      	b.n	80096c8 <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	fab3 f383 	clz	r3, r3
 80096c6:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 80096c8:	2b07      	cmp	r3, #7
 80096ca:	d807      	bhi.n	80096dc <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	695b      	ldr	r3, [r3, #20]
 80096d0:	461a      	mov	r2, r3
 80096d2:	6a39      	ldr	r1, [r7, #32]
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f7ff ff25 	bl	8009524 <LL_GPIO_SetAFPin_0_7>
 80096da:	e006      	b.n	80096ea <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	695b      	ldr	r3, [r3, #20]
 80096e0:	461a      	mov	r2, r3
 80096e2:	6a39      	ldr	r1, [r7, #32]
 80096e4:	6878      	ldr	r0, [r7, #4]
 80096e6:	f7ff ff5a 	bl	800959e <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80096ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ec:	3301      	adds	r3, #1
 80096ee:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f6:	fa22 f303 	lsr.w	r3, r2, r3
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1a7      	bne.n	800964e <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d003      	beq.n	800970e <LL_GPIO_Init+0xf2>
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	2b02      	cmp	r3, #2
 800970c:	d107      	bne.n	800971e <LL_GPIO_Init+0x102>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	6819      	ldr	r1, [r3, #0]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	461a      	mov	r2, r3
 8009718:	6878      	ldr	r0, [r7, #4]
 800971a:	f7ff fe71 	bl	8009400 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800971e:	2300      	movs	r3, #0
}
 8009720:	4618      	mov	r0, r3
 8009722:	3728      	adds	r7, #40	; 0x28
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009728:	b084      	sub	sp, #16
 800972a:	b580      	push	{r7, lr}
 800972c:	b084      	sub	sp, #16
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
 8009732:	f107 001c 	add.w	r0, r7, #28
 8009736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	68db      	ldr	r3, [r3, #12]
 800973e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 fa72 	bl	8009c30 <USB_CoreReset>
 800974c:	4603      	mov	r3, r0
 800974e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8009750:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009752:	2b00      	cmp	r3, #0
 8009754:	d106      	bne.n	8009764 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800975a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	639a      	str	r2, [r3, #56]	; 0x38
 8009762:	e005      	b.n	8009770 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009768:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 8009770:	7bfb      	ldrb	r3, [r7, #15]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800977c:	b004      	add	sp, #16
 800977e:	4770      	bx	lr

08009780 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009780:	b480      	push	{r7}
 8009782:	b083      	sub	sp, #12
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	f023 0201 	bic.w	r2, r3, #1
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009794:	2300      	movs	r3, #0
}
 8009796:	4618      	mov	r0, r3
 8009798:	370c      	adds	r7, #12
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr

080097a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80097a2:	b580      	push	{r7, lr}
 80097a4:	b084      	sub	sp, #16
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
 80097aa:	460b      	mov	r3, r1
 80097ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80097ae:	2300      	movs	r3, #0
 80097b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	68db      	ldr	r3, [r3, #12]
 80097b6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80097be:	78fb      	ldrb	r3, [r7, #3]
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d115      	bne.n	80097f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80097d0:	2001      	movs	r0, #1
 80097d2:	f7f8 fd63 	bl	800229c <HAL_Delay>
      ms++;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	3301      	adds	r3, #1
 80097da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fa19 	bl	8009c14 <USB_GetMode>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b01      	cmp	r3, #1
 80097e6:	d01e      	beq.n	8009826 <USB_SetCurrentMode+0x84>
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	2b31      	cmp	r3, #49	; 0x31
 80097ec:	d9f0      	bls.n	80097d0 <USB_SetCurrentMode+0x2e>
 80097ee:	e01a      	b.n	8009826 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80097f0:	78fb      	ldrb	r3, [r7, #3]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d115      	bne.n	8009822 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	68db      	ldr	r3, [r3, #12]
 80097fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009802:	2001      	movs	r0, #1
 8009804:	f7f8 fd4a 	bl	800229c <HAL_Delay>
      ms++;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	3301      	adds	r3, #1
 800980c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800980e:	6878      	ldr	r0, [r7, #4]
 8009810:	f000 fa00 	bl	8009c14 <USB_GetMode>
 8009814:	4603      	mov	r3, r0
 8009816:	2b00      	cmp	r3, #0
 8009818:	d005      	beq.n	8009826 <USB_SetCurrentMode+0x84>
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2b31      	cmp	r3, #49	; 0x31
 800981e:	d9f0      	bls.n	8009802 <USB_SetCurrentMode+0x60>
 8009820:	e001      	b.n	8009826 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e005      	b.n	8009832 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2b32      	cmp	r3, #50	; 0x32
 800982a:	d101      	bne.n	8009830 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800982c:	2301      	movs	r3, #1
 800982e:	e000      	b.n	8009832 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
	...

0800983c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800983c:	b084      	sub	sp, #16
 800983e:	b580      	push	{r7, lr}
 8009840:	b086      	sub	sp, #24
 8009842:	af00      	add	r7, sp, #0
 8009844:	6078      	str	r0, [r7, #4]
 8009846:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800984a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800984e:	2300      	movs	r3, #0
 8009850:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009856:	2300      	movs	r3, #0
 8009858:	613b      	str	r3, [r7, #16]
 800985a:	e009      	b.n	8009870 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	3340      	adds	r3, #64	; 0x40
 8009862:	009b      	lsls	r3, r3, #2
 8009864:	4413      	add	r3, r2
 8009866:	2200      	movs	r2, #0
 8009868:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	3301      	adds	r3, #1
 800986e:	613b      	str	r3, [r7, #16]
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	2b0e      	cmp	r3, #14
 8009874:	d9f2      	bls.n	800985c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009878:	2b00      	cmp	r3, #0
 800987a:	d11c      	bne.n	80098b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009882:	685b      	ldr	r3, [r3, #4]
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800988a:	f043 0302 	orr.w	r3, r3, #2
 800988e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009894:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	601a      	str	r2, [r3, #0]
 80098b4:	e005      	b.n	80098c2 <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098c8:	461a      	mov	r2, r3
 80098ca:	2300      	movs	r3, #0
 80098cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098d4:	4619      	mov	r1, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098dc:	461a      	mov	r2, r3
 80098de:	680b      	ldr	r3, [r1, #0]
 80098e0:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80098e2:	2103      	movs	r1, #3
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	f000 f95b 	bl	8009ba0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80098ea:	2110      	movs	r1, #16
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 f8f3 	bl	8009ad8 <USB_FlushTxFifo>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d001      	beq.n	80098fc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 f91f 	bl	8009b40 <USB_FlushRxFifo>
 8009902:	4603      	mov	r3, r0
 8009904:	2b00      	cmp	r3, #0
 8009906:	d001      	beq.n	800990c <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8009908:	2301      	movs	r3, #1
 800990a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009912:	461a      	mov	r2, r3
 8009914:	2300      	movs	r3, #0
 8009916:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800991e:	461a      	mov	r2, r3
 8009920:	2300      	movs	r3, #0
 8009922:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800992a:	461a      	mov	r2, r3
 800992c:	2300      	movs	r3, #0
 800992e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009930:	2300      	movs	r3, #0
 8009932:	613b      	str	r3, [r7, #16]
 8009934:	e043      	b.n	80099be <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	015a      	lsls	r2, r3, #5
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	4413      	add	r3, r2
 800993e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009948:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800994c:	d118      	bne.n	8009980 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d10a      	bne.n	800996a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	015a      	lsls	r2, r3, #5
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	4413      	add	r3, r2
 800995c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009960:	461a      	mov	r2, r3
 8009962:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009966:	6013      	str	r3, [r2, #0]
 8009968:	e013      	b.n	8009992 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	015a      	lsls	r2, r3, #5
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	4413      	add	r3, r2
 8009972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009976:	461a      	mov	r2, r3
 8009978:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800997c:	6013      	str	r3, [r2, #0]
 800997e:	e008      	b.n	8009992 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	015a      	lsls	r2, r3, #5
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	4413      	add	r3, r2
 8009988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800998c:	461a      	mov	r2, r3
 800998e:	2300      	movs	r3, #0
 8009990:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009992:	693b      	ldr	r3, [r7, #16]
 8009994:	015a      	lsls	r2, r3, #5
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	4413      	add	r3, r2
 800999a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800999e:	461a      	mov	r2, r3
 80099a0:	2300      	movs	r3, #0
 80099a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	015a      	lsls	r2, r3, #5
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	4413      	add	r3, r2
 80099ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099b0:	461a      	mov	r2, r3
 80099b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80099b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	3301      	adds	r3, #1
 80099bc:	613b      	str	r3, [r7, #16]
 80099be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c0:	693a      	ldr	r2, [r7, #16]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d3b7      	bcc.n	8009936 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80099c6:	2300      	movs	r3, #0
 80099c8:	613b      	str	r3, [r7, #16]
 80099ca:	e043      	b.n	8009a54 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	015a      	lsls	r2, r3, #5
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	4413      	add	r3, r2
 80099d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80099de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099e2:	d118      	bne.n	8009a16 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d10a      	bne.n	8009a00 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	015a      	lsls	r2, r3, #5
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	4413      	add	r3, r2
 80099f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099f6:	461a      	mov	r2, r3
 80099f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80099fc:	6013      	str	r3, [r2, #0]
 80099fe:	e013      	b.n	8009a28 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	015a      	lsls	r2, r3, #5
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	4413      	add	r3, r2
 8009a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a0c:	461a      	mov	r2, r3
 8009a0e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009a12:	6013      	str	r3, [r2, #0]
 8009a14:	e008      	b.n	8009a28 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	015a      	lsls	r2, r3, #5
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a22:	461a      	mov	r2, r3
 8009a24:	2300      	movs	r3, #0
 8009a26:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	015a      	lsls	r2, r3, #5
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	4413      	add	r3, r2
 8009a30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a34:	461a      	mov	r2, r3
 8009a36:	2300      	movs	r3, #0
 8009a38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	015a      	lsls	r2, r3, #5
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	4413      	add	r3, r2
 8009a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a46:	461a      	mov	r2, r3
 8009a48:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009a4c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	3301      	adds	r3, #1
 8009a52:	613b      	str	r3, [r7, #16]
 8009a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a56:	693a      	ldr	r2, [r7, #16]
 8009a58:	429a      	cmp	r2, r3
 8009a5a:	d3b7      	bcc.n	80099cc <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a6e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2200      	movs	r2, #0
 8009a74:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009a7c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d105      	bne.n	8009a90 <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	699b      	ldr	r3, [r3, #24]
 8009a88:	f043 0210 	orr.w	r2, r3, #16
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	699a      	ldr	r2, [r3, #24]
 8009a94:	4b0f      	ldr	r3, [pc, #60]	; (8009ad4 <USB_DevInit+0x298>)
 8009a96:	4313      	orrs	r3, r2
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d005      	beq.n	8009aae <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	699b      	ldr	r3, [r3, #24]
 8009aa6:	f043 0208 	orr.w	r2, r3, #8
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ab0:	2b01      	cmp	r3, #1
 8009ab2:	d107      	bne.n	8009ac4 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	699b      	ldr	r3, [r3, #24]
 8009ab8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009abc:	f043 0304 	orr.w	r3, r3, #4
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	3718      	adds	r7, #24
 8009aca:	46bd      	mov	sp, r7
 8009acc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009ad0:	b004      	add	sp, #16
 8009ad2:	4770      	bx	lr
 8009ad4:	803c3800 	.word	0x803c3800

08009ad8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	4a13      	ldr	r2, [pc, #76]	; (8009b3c <USB_FlushTxFifo+0x64>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d901      	bls.n	8009af8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009af4:	2303      	movs	r3, #3
 8009af6:	e01b      	b.n	8009b30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	691b      	ldr	r3, [r3, #16]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	daf2      	bge.n	8009ae6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009b00:	2300      	movs	r3, #0
 8009b02:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	019b      	lsls	r3, r3, #6
 8009b08:	f043 0220 	orr.w	r2, r3, #32
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	3301      	adds	r3, #1
 8009b14:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	4a08      	ldr	r2, [pc, #32]	; (8009b3c <USB_FlushTxFifo+0x64>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d901      	bls.n	8009b22 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009b1e:	2303      	movs	r3, #3
 8009b20:	e006      	b.n	8009b30 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	691b      	ldr	r3, [r3, #16]
 8009b26:	f003 0320 	and.w	r3, r3, #32
 8009b2a:	2b20      	cmp	r3, #32
 8009b2c:	d0f0      	beq.n	8009b10 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3714      	adds	r7, #20
 8009b34:	46bd      	mov	sp, r7
 8009b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3a:	4770      	bx	lr
 8009b3c:	00030d40 	.word	0x00030d40

08009b40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	3301      	adds	r3, #1
 8009b50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	4a11      	ldr	r2, [pc, #68]	; (8009b9c <USB_FlushRxFifo+0x5c>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d901      	bls.n	8009b5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	e018      	b.n	8009b90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	daf2      	bge.n	8009b4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009b66:	2300      	movs	r3, #0
 8009b68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2210      	movs	r2, #16
 8009b6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	3301      	adds	r3, #1
 8009b74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	4a08      	ldr	r2, [pc, #32]	; (8009b9c <USB_FlushRxFifo+0x5c>)
 8009b7a:	4293      	cmp	r3, r2
 8009b7c:	d901      	bls.n	8009b82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009b7e:	2303      	movs	r3, #3
 8009b80:	e006      	b.n	8009b90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	f003 0310 	and.w	r3, r3, #16
 8009b8a:	2b10      	cmp	r3, #16
 8009b8c:	d0f0      	beq.n	8009b70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009b8e:	2300      	movs	r3, #0
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	3714      	adds	r7, #20
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr
 8009b9c:	00030d40 	.word	0x00030d40

08009ba0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	460b      	mov	r3, r1
 8009baa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bb6:	681a      	ldr	r2, [r3, #0]
 8009bb8:	78fb      	ldrb	r3, [r7, #3]
 8009bba:	68f9      	ldr	r1, [r7, #12]
 8009bbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3714      	adds	r7, #20
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr

08009bd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009bd2:	b480      	push	{r7}
 8009bd4:	b085      	sub	sp, #20
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009bec:	f023 0303 	bic.w	r3, r3, #3
 8009bf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c00:	f043 0302 	orr.w	r3, r3, #2
 8009c04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b083      	sub	sp, #12
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	695b      	ldr	r3, [r3, #20]
 8009c20:	f003 0301 	and.w	r3, r3, #1
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b085      	sub	sp, #20
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	3301      	adds	r3, #1
 8009c40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	4a13      	ldr	r2, [pc, #76]	; (8009c94 <USB_CoreReset+0x64>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d901      	bls.n	8009c4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009c4a:	2303      	movs	r3, #3
 8009c4c:	e01b      	b.n	8009c86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	daf2      	bge.n	8009c3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009c56:	2300      	movs	r3, #0
 8009c58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	691b      	ldr	r3, [r3, #16]
 8009c5e:	f043 0201 	orr.w	r2, r3, #1
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	3301      	adds	r3, #1
 8009c6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	4a09      	ldr	r2, [pc, #36]	; (8009c94 <USB_CoreReset+0x64>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d901      	bls.n	8009c78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009c74:	2303      	movs	r3, #3
 8009c76:	e006      	b.n	8009c86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	691b      	ldr	r3, [r3, #16]
 8009c7c:	f003 0301 	and.w	r3, r3, #1
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d0f0      	beq.n	8009c66 <USB_CoreReset+0x36>

  return HAL_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3714      	adds	r7, #20
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr
 8009c92:	bf00      	nop
 8009c94:	00030d40 	.word	0x00030d40

08009c98 <__errno>:
 8009c98:	4b01      	ldr	r3, [pc, #4]	; (8009ca0 <__errno+0x8>)
 8009c9a:	6818      	ldr	r0, [r3, #0]
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	2000000c 	.word	0x2000000c

08009ca4 <__libc_init_array>:
 8009ca4:	b570      	push	{r4, r5, r6, lr}
 8009ca6:	4d0d      	ldr	r5, [pc, #52]	; (8009cdc <__libc_init_array+0x38>)
 8009ca8:	2600      	movs	r6, #0
 8009caa:	4c0d      	ldr	r4, [pc, #52]	; (8009ce0 <__libc_init_array+0x3c>)
 8009cac:	1b64      	subs	r4, r4, r5
 8009cae:	10a4      	asrs	r4, r4, #2
 8009cb0:	42a6      	cmp	r6, r4
 8009cb2:	d109      	bne.n	8009cc8 <__libc_init_array+0x24>
 8009cb4:	4d0b      	ldr	r5, [pc, #44]	; (8009ce4 <__libc_init_array+0x40>)
 8009cb6:	2600      	movs	r6, #0
 8009cb8:	4c0b      	ldr	r4, [pc, #44]	; (8009ce8 <__libc_init_array+0x44>)
 8009cba:	f000 ffbb 	bl	800ac34 <_init>
 8009cbe:	1b64      	subs	r4, r4, r5
 8009cc0:	10a4      	asrs	r4, r4, #2
 8009cc2:	42a6      	cmp	r6, r4
 8009cc4:	d105      	bne.n	8009cd2 <__libc_init_array+0x2e>
 8009cc6:	bd70      	pop	{r4, r5, r6, pc}
 8009cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ccc:	3601      	adds	r6, #1
 8009cce:	4798      	blx	r3
 8009cd0:	e7ee      	b.n	8009cb0 <__libc_init_array+0xc>
 8009cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cd6:	3601      	adds	r6, #1
 8009cd8:	4798      	blx	r3
 8009cda:	e7f2      	b.n	8009cc2 <__libc_init_array+0x1e>
 8009cdc:	0800ae04 	.word	0x0800ae04
 8009ce0:	0800ae04 	.word	0x0800ae04
 8009ce4:	0800ae04 	.word	0x0800ae04
 8009ce8:	0800ae08 	.word	0x0800ae08

08009cec <memset>:
 8009cec:	4402      	add	r2, r0
 8009cee:	4603      	mov	r3, r0
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d100      	bne.n	8009cf6 <memset+0xa>
 8009cf4:	4770      	bx	lr
 8009cf6:	f803 1b01 	strb.w	r1, [r3], #1
 8009cfa:	e7f9      	b.n	8009cf0 <memset+0x4>

08009cfc <iprintf>:
 8009cfc:	b40f      	push	{r0, r1, r2, r3}
 8009cfe:	4b0a      	ldr	r3, [pc, #40]	; (8009d28 <iprintf+0x2c>)
 8009d00:	b513      	push	{r0, r1, r4, lr}
 8009d02:	681c      	ldr	r4, [r3, #0]
 8009d04:	b124      	cbz	r4, 8009d10 <iprintf+0x14>
 8009d06:	69a3      	ldr	r3, [r4, #24]
 8009d08:	b913      	cbnz	r3, 8009d10 <iprintf+0x14>
 8009d0a:	4620      	mov	r0, r4
 8009d0c:	f000 f866 	bl	8009ddc <__sinit>
 8009d10:	ab05      	add	r3, sp, #20
 8009d12:	9a04      	ldr	r2, [sp, #16]
 8009d14:	68a1      	ldr	r1, [r4, #8]
 8009d16:	4620      	mov	r0, r4
 8009d18:	9301      	str	r3, [sp, #4]
 8009d1a:	f000 f9bd 	bl	800a098 <_vfiprintf_r>
 8009d1e:	b002      	add	sp, #8
 8009d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d24:	b004      	add	sp, #16
 8009d26:	4770      	bx	lr
 8009d28:	2000000c 	.word	0x2000000c

08009d2c <std>:
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	b510      	push	{r4, lr}
 8009d30:	4604      	mov	r4, r0
 8009d32:	6083      	str	r3, [r0, #8]
 8009d34:	8181      	strh	r1, [r0, #12]
 8009d36:	4619      	mov	r1, r3
 8009d38:	6643      	str	r3, [r0, #100]	; 0x64
 8009d3a:	81c2      	strh	r2, [r0, #14]
 8009d3c:	2208      	movs	r2, #8
 8009d3e:	6183      	str	r3, [r0, #24]
 8009d40:	e9c0 3300 	strd	r3, r3, [r0]
 8009d44:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d48:	305c      	adds	r0, #92	; 0x5c
 8009d4a:	f7ff ffcf 	bl	8009cec <memset>
 8009d4e:	4b05      	ldr	r3, [pc, #20]	; (8009d64 <std+0x38>)
 8009d50:	6224      	str	r4, [r4, #32]
 8009d52:	6263      	str	r3, [r4, #36]	; 0x24
 8009d54:	4b04      	ldr	r3, [pc, #16]	; (8009d68 <std+0x3c>)
 8009d56:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d58:	4b04      	ldr	r3, [pc, #16]	; (8009d6c <std+0x40>)
 8009d5a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d5c:	4b04      	ldr	r3, [pc, #16]	; (8009d70 <std+0x44>)
 8009d5e:	6323      	str	r3, [r4, #48]	; 0x30
 8009d60:	bd10      	pop	{r4, pc}
 8009d62:	bf00      	nop
 8009d64:	0800a645 	.word	0x0800a645
 8009d68:	0800a667 	.word	0x0800a667
 8009d6c:	0800a69f 	.word	0x0800a69f
 8009d70:	0800a6c3 	.word	0x0800a6c3

08009d74 <_cleanup_r>:
 8009d74:	4901      	ldr	r1, [pc, #4]	; (8009d7c <_cleanup_r+0x8>)
 8009d76:	f000 b8af 	b.w	8009ed8 <_fwalk_reent>
 8009d7a:	bf00      	nop
 8009d7c:	0800a999 	.word	0x0800a999

08009d80 <__sfmoreglue>:
 8009d80:	b570      	push	{r4, r5, r6, lr}
 8009d82:	2268      	movs	r2, #104	; 0x68
 8009d84:	1e4d      	subs	r5, r1, #1
 8009d86:	460e      	mov	r6, r1
 8009d88:	4355      	muls	r5, r2
 8009d8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d8e:	f000 f8e5 	bl	8009f5c <_malloc_r>
 8009d92:	4604      	mov	r4, r0
 8009d94:	b140      	cbz	r0, 8009da8 <__sfmoreglue+0x28>
 8009d96:	2100      	movs	r1, #0
 8009d98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d9c:	e9c0 1600 	strd	r1, r6, [r0]
 8009da0:	300c      	adds	r0, #12
 8009da2:	60a0      	str	r0, [r4, #8]
 8009da4:	f7ff ffa2 	bl	8009cec <memset>
 8009da8:	4620      	mov	r0, r4
 8009daa:	bd70      	pop	{r4, r5, r6, pc}

08009dac <__sfp_lock_acquire>:
 8009dac:	4801      	ldr	r0, [pc, #4]	; (8009db4 <__sfp_lock_acquire+0x8>)
 8009dae:	f000 b8b3 	b.w	8009f18 <__retarget_lock_acquire_recursive>
 8009db2:	bf00      	nop
 8009db4:	20000985 	.word	0x20000985

08009db8 <__sfp_lock_release>:
 8009db8:	4801      	ldr	r0, [pc, #4]	; (8009dc0 <__sfp_lock_release+0x8>)
 8009dba:	f000 b8ae 	b.w	8009f1a <__retarget_lock_release_recursive>
 8009dbe:	bf00      	nop
 8009dc0:	20000985 	.word	0x20000985

08009dc4 <__sinit_lock_acquire>:
 8009dc4:	4801      	ldr	r0, [pc, #4]	; (8009dcc <__sinit_lock_acquire+0x8>)
 8009dc6:	f000 b8a7 	b.w	8009f18 <__retarget_lock_acquire_recursive>
 8009dca:	bf00      	nop
 8009dcc:	20000986 	.word	0x20000986

08009dd0 <__sinit_lock_release>:
 8009dd0:	4801      	ldr	r0, [pc, #4]	; (8009dd8 <__sinit_lock_release+0x8>)
 8009dd2:	f000 b8a2 	b.w	8009f1a <__retarget_lock_release_recursive>
 8009dd6:	bf00      	nop
 8009dd8:	20000986 	.word	0x20000986

08009ddc <__sinit>:
 8009ddc:	b510      	push	{r4, lr}
 8009dde:	4604      	mov	r4, r0
 8009de0:	f7ff fff0 	bl	8009dc4 <__sinit_lock_acquire>
 8009de4:	69a3      	ldr	r3, [r4, #24]
 8009de6:	b11b      	cbz	r3, 8009df0 <__sinit+0x14>
 8009de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dec:	f7ff bff0 	b.w	8009dd0 <__sinit_lock_release>
 8009df0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009df4:	6523      	str	r3, [r4, #80]	; 0x50
 8009df6:	4620      	mov	r0, r4
 8009df8:	4b12      	ldr	r3, [pc, #72]	; (8009e44 <__sinit+0x68>)
 8009dfa:	4a13      	ldr	r2, [pc, #76]	; (8009e48 <__sinit+0x6c>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	62a2      	str	r2, [r4, #40]	; 0x28
 8009e00:	42a3      	cmp	r3, r4
 8009e02:	bf04      	itt	eq
 8009e04:	2301      	moveq	r3, #1
 8009e06:	61a3      	streq	r3, [r4, #24]
 8009e08:	f000 f820 	bl	8009e4c <__sfp>
 8009e0c:	6060      	str	r0, [r4, #4]
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f000 f81c 	bl	8009e4c <__sfp>
 8009e14:	60a0      	str	r0, [r4, #8]
 8009e16:	4620      	mov	r0, r4
 8009e18:	f000 f818 	bl	8009e4c <__sfp>
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	2104      	movs	r1, #4
 8009e20:	60e0      	str	r0, [r4, #12]
 8009e22:	6860      	ldr	r0, [r4, #4]
 8009e24:	f7ff ff82 	bl	8009d2c <std>
 8009e28:	2201      	movs	r2, #1
 8009e2a:	2109      	movs	r1, #9
 8009e2c:	68a0      	ldr	r0, [r4, #8]
 8009e2e:	f7ff ff7d 	bl	8009d2c <std>
 8009e32:	2202      	movs	r2, #2
 8009e34:	2112      	movs	r1, #18
 8009e36:	68e0      	ldr	r0, [r4, #12]
 8009e38:	f7ff ff78 	bl	8009d2c <std>
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	61a3      	str	r3, [r4, #24]
 8009e40:	e7d2      	b.n	8009de8 <__sinit+0xc>
 8009e42:	bf00      	nop
 8009e44:	0800ad64 	.word	0x0800ad64
 8009e48:	08009d75 	.word	0x08009d75

08009e4c <__sfp>:
 8009e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4e:	4607      	mov	r7, r0
 8009e50:	f7ff ffac 	bl	8009dac <__sfp_lock_acquire>
 8009e54:	4b1e      	ldr	r3, [pc, #120]	; (8009ed0 <__sfp+0x84>)
 8009e56:	681e      	ldr	r6, [r3, #0]
 8009e58:	69b3      	ldr	r3, [r6, #24]
 8009e5a:	b913      	cbnz	r3, 8009e62 <__sfp+0x16>
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	f7ff ffbd 	bl	8009ddc <__sinit>
 8009e62:	3648      	adds	r6, #72	; 0x48
 8009e64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	d503      	bpl.n	8009e74 <__sfp+0x28>
 8009e6c:	6833      	ldr	r3, [r6, #0]
 8009e6e:	b30b      	cbz	r3, 8009eb4 <__sfp+0x68>
 8009e70:	6836      	ldr	r6, [r6, #0]
 8009e72:	e7f7      	b.n	8009e64 <__sfp+0x18>
 8009e74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e78:	b9d5      	cbnz	r5, 8009eb0 <__sfp+0x64>
 8009e7a:	4b16      	ldr	r3, [pc, #88]	; (8009ed4 <__sfp+0x88>)
 8009e7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e80:	6665      	str	r5, [r4, #100]	; 0x64
 8009e82:	60e3      	str	r3, [r4, #12]
 8009e84:	f000 f847 	bl	8009f16 <__retarget_lock_init_recursive>
 8009e88:	f7ff ff96 	bl	8009db8 <__sfp_lock_release>
 8009e8c:	2208      	movs	r2, #8
 8009e8e:	4629      	mov	r1, r5
 8009e90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e94:	6025      	str	r5, [r4, #0]
 8009e96:	61a5      	str	r5, [r4, #24]
 8009e98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ea0:	f7ff ff24 	bl	8009cec <memset>
 8009ea4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ea8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009eac:	4620      	mov	r0, r4
 8009eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009eb0:	3468      	adds	r4, #104	; 0x68
 8009eb2:	e7d9      	b.n	8009e68 <__sfp+0x1c>
 8009eb4:	2104      	movs	r1, #4
 8009eb6:	4638      	mov	r0, r7
 8009eb8:	f7ff ff62 	bl	8009d80 <__sfmoreglue>
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	6030      	str	r0, [r6, #0]
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	d1d5      	bne.n	8009e70 <__sfp+0x24>
 8009ec4:	f7ff ff78 	bl	8009db8 <__sfp_lock_release>
 8009ec8:	230c      	movs	r3, #12
 8009eca:	603b      	str	r3, [r7, #0]
 8009ecc:	e7ee      	b.n	8009eac <__sfp+0x60>
 8009ece:	bf00      	nop
 8009ed0:	0800ad64 	.word	0x0800ad64
 8009ed4:	ffff0001 	.word	0xffff0001

08009ed8 <_fwalk_reent>:
 8009ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009edc:	4606      	mov	r6, r0
 8009ede:	4688      	mov	r8, r1
 8009ee0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009ee4:	2700      	movs	r7, #0
 8009ee6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009eea:	f1b9 0901 	subs.w	r9, r9, #1
 8009eee:	d505      	bpl.n	8009efc <_fwalk_reent+0x24>
 8009ef0:	6824      	ldr	r4, [r4, #0]
 8009ef2:	2c00      	cmp	r4, #0
 8009ef4:	d1f7      	bne.n	8009ee6 <_fwalk_reent+0xe>
 8009ef6:	4638      	mov	r0, r7
 8009ef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009efc:	89ab      	ldrh	r3, [r5, #12]
 8009efe:	2b01      	cmp	r3, #1
 8009f00:	d907      	bls.n	8009f12 <_fwalk_reent+0x3a>
 8009f02:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009f06:	3301      	adds	r3, #1
 8009f08:	d003      	beq.n	8009f12 <_fwalk_reent+0x3a>
 8009f0a:	4629      	mov	r1, r5
 8009f0c:	4630      	mov	r0, r6
 8009f0e:	47c0      	blx	r8
 8009f10:	4307      	orrs	r7, r0
 8009f12:	3568      	adds	r5, #104	; 0x68
 8009f14:	e7e9      	b.n	8009eea <_fwalk_reent+0x12>

08009f16 <__retarget_lock_init_recursive>:
 8009f16:	4770      	bx	lr

08009f18 <__retarget_lock_acquire_recursive>:
 8009f18:	4770      	bx	lr

08009f1a <__retarget_lock_release_recursive>:
 8009f1a:	4770      	bx	lr

08009f1c <sbrk_aligned>:
 8009f1c:	b570      	push	{r4, r5, r6, lr}
 8009f1e:	4e0e      	ldr	r6, [pc, #56]	; (8009f58 <sbrk_aligned+0x3c>)
 8009f20:	460c      	mov	r4, r1
 8009f22:	4605      	mov	r5, r0
 8009f24:	6831      	ldr	r1, [r6, #0]
 8009f26:	b911      	cbnz	r1, 8009f2e <sbrk_aligned+0x12>
 8009f28:	f000 fb7c 	bl	800a624 <_sbrk_r>
 8009f2c:	6030      	str	r0, [r6, #0]
 8009f2e:	4621      	mov	r1, r4
 8009f30:	4628      	mov	r0, r5
 8009f32:	f000 fb77 	bl	800a624 <_sbrk_r>
 8009f36:	1c43      	adds	r3, r0, #1
 8009f38:	d00a      	beq.n	8009f50 <sbrk_aligned+0x34>
 8009f3a:	1cc4      	adds	r4, r0, #3
 8009f3c:	f024 0403 	bic.w	r4, r4, #3
 8009f40:	42a0      	cmp	r0, r4
 8009f42:	d007      	beq.n	8009f54 <sbrk_aligned+0x38>
 8009f44:	1a21      	subs	r1, r4, r0
 8009f46:	4628      	mov	r0, r5
 8009f48:	f000 fb6c 	bl	800a624 <_sbrk_r>
 8009f4c:	3001      	adds	r0, #1
 8009f4e:	d101      	bne.n	8009f54 <sbrk_aligned+0x38>
 8009f50:	f04f 34ff 	mov.w	r4, #4294967295
 8009f54:	4620      	mov	r0, r4
 8009f56:	bd70      	pop	{r4, r5, r6, pc}
 8009f58:	2000098c 	.word	0x2000098c

08009f5c <_malloc_r>:
 8009f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f60:	1ccd      	adds	r5, r1, #3
 8009f62:	4607      	mov	r7, r0
 8009f64:	f025 0503 	bic.w	r5, r5, #3
 8009f68:	3508      	adds	r5, #8
 8009f6a:	2d0c      	cmp	r5, #12
 8009f6c:	bf38      	it	cc
 8009f6e:	250c      	movcc	r5, #12
 8009f70:	2d00      	cmp	r5, #0
 8009f72:	db01      	blt.n	8009f78 <_malloc_r+0x1c>
 8009f74:	42a9      	cmp	r1, r5
 8009f76:	d905      	bls.n	8009f84 <_malloc_r+0x28>
 8009f78:	230c      	movs	r3, #12
 8009f7a:	2600      	movs	r6, #0
 8009f7c:	603b      	str	r3, [r7, #0]
 8009f7e:	4630      	mov	r0, r6
 8009f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f84:	4e2e      	ldr	r6, [pc, #184]	; (800a040 <_malloc_r+0xe4>)
 8009f86:	f000 fdc9 	bl	800ab1c <__malloc_lock>
 8009f8a:	6833      	ldr	r3, [r6, #0]
 8009f8c:	461c      	mov	r4, r3
 8009f8e:	bb34      	cbnz	r4, 8009fde <_malloc_r+0x82>
 8009f90:	4629      	mov	r1, r5
 8009f92:	4638      	mov	r0, r7
 8009f94:	f7ff ffc2 	bl	8009f1c <sbrk_aligned>
 8009f98:	1c43      	adds	r3, r0, #1
 8009f9a:	4604      	mov	r4, r0
 8009f9c:	d14d      	bne.n	800a03a <_malloc_r+0xde>
 8009f9e:	6834      	ldr	r4, [r6, #0]
 8009fa0:	4626      	mov	r6, r4
 8009fa2:	2e00      	cmp	r6, #0
 8009fa4:	d140      	bne.n	800a028 <_malloc_r+0xcc>
 8009fa6:	6823      	ldr	r3, [r4, #0]
 8009fa8:	4631      	mov	r1, r6
 8009faa:	4638      	mov	r0, r7
 8009fac:	eb04 0803 	add.w	r8, r4, r3
 8009fb0:	f000 fb38 	bl	800a624 <_sbrk_r>
 8009fb4:	4580      	cmp	r8, r0
 8009fb6:	d13a      	bne.n	800a02e <_malloc_r+0xd2>
 8009fb8:	6821      	ldr	r1, [r4, #0]
 8009fba:	3503      	adds	r5, #3
 8009fbc:	4638      	mov	r0, r7
 8009fbe:	1a6d      	subs	r5, r5, r1
 8009fc0:	f025 0503 	bic.w	r5, r5, #3
 8009fc4:	3508      	adds	r5, #8
 8009fc6:	2d0c      	cmp	r5, #12
 8009fc8:	bf38      	it	cc
 8009fca:	250c      	movcc	r5, #12
 8009fcc:	4629      	mov	r1, r5
 8009fce:	f7ff ffa5 	bl	8009f1c <sbrk_aligned>
 8009fd2:	3001      	adds	r0, #1
 8009fd4:	d02b      	beq.n	800a02e <_malloc_r+0xd2>
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	442b      	add	r3, r5
 8009fda:	6023      	str	r3, [r4, #0]
 8009fdc:	e00e      	b.n	8009ffc <_malloc_r+0xa0>
 8009fde:	6822      	ldr	r2, [r4, #0]
 8009fe0:	1b52      	subs	r2, r2, r5
 8009fe2:	d41e      	bmi.n	800a022 <_malloc_r+0xc6>
 8009fe4:	2a0b      	cmp	r2, #11
 8009fe6:	d916      	bls.n	800a016 <_malloc_r+0xba>
 8009fe8:	1961      	adds	r1, r4, r5
 8009fea:	42a3      	cmp	r3, r4
 8009fec:	6025      	str	r5, [r4, #0]
 8009fee:	bf18      	it	ne
 8009ff0:	6059      	strne	r1, [r3, #4]
 8009ff2:	6863      	ldr	r3, [r4, #4]
 8009ff4:	bf08      	it	eq
 8009ff6:	6031      	streq	r1, [r6, #0]
 8009ff8:	5162      	str	r2, [r4, r5]
 8009ffa:	604b      	str	r3, [r1, #4]
 8009ffc:	f104 060b 	add.w	r6, r4, #11
 800a000:	4638      	mov	r0, r7
 800a002:	f000 fd91 	bl	800ab28 <__malloc_unlock>
 800a006:	1d23      	adds	r3, r4, #4
 800a008:	f026 0607 	bic.w	r6, r6, #7
 800a00c:	1af2      	subs	r2, r6, r3
 800a00e:	d0b6      	beq.n	8009f7e <_malloc_r+0x22>
 800a010:	1b9b      	subs	r3, r3, r6
 800a012:	50a3      	str	r3, [r4, r2]
 800a014:	e7b3      	b.n	8009f7e <_malloc_r+0x22>
 800a016:	6862      	ldr	r2, [r4, #4]
 800a018:	42a3      	cmp	r3, r4
 800a01a:	bf0c      	ite	eq
 800a01c:	6032      	streq	r2, [r6, #0]
 800a01e:	605a      	strne	r2, [r3, #4]
 800a020:	e7ec      	b.n	8009ffc <_malloc_r+0xa0>
 800a022:	4623      	mov	r3, r4
 800a024:	6864      	ldr	r4, [r4, #4]
 800a026:	e7b2      	b.n	8009f8e <_malloc_r+0x32>
 800a028:	4634      	mov	r4, r6
 800a02a:	6876      	ldr	r6, [r6, #4]
 800a02c:	e7b9      	b.n	8009fa2 <_malloc_r+0x46>
 800a02e:	230c      	movs	r3, #12
 800a030:	4638      	mov	r0, r7
 800a032:	603b      	str	r3, [r7, #0]
 800a034:	f000 fd78 	bl	800ab28 <__malloc_unlock>
 800a038:	e7a1      	b.n	8009f7e <_malloc_r+0x22>
 800a03a:	6025      	str	r5, [r4, #0]
 800a03c:	e7de      	b.n	8009ffc <_malloc_r+0xa0>
 800a03e:	bf00      	nop
 800a040:	20000988 	.word	0x20000988

0800a044 <__sfputc_r>:
 800a044:	6893      	ldr	r3, [r2, #8]
 800a046:	3b01      	subs	r3, #1
 800a048:	2b00      	cmp	r3, #0
 800a04a:	6093      	str	r3, [r2, #8]
 800a04c:	b410      	push	{r4}
 800a04e:	da08      	bge.n	800a062 <__sfputc_r+0x1e>
 800a050:	6994      	ldr	r4, [r2, #24]
 800a052:	42a3      	cmp	r3, r4
 800a054:	db01      	blt.n	800a05a <__sfputc_r+0x16>
 800a056:	290a      	cmp	r1, #10
 800a058:	d103      	bne.n	800a062 <__sfputc_r+0x1e>
 800a05a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a05e:	f000 bb35 	b.w	800a6cc <__swbuf_r>
 800a062:	6813      	ldr	r3, [r2, #0]
 800a064:	1c58      	adds	r0, r3, #1
 800a066:	6010      	str	r0, [r2, #0]
 800a068:	4608      	mov	r0, r1
 800a06a:	7019      	strb	r1, [r3, #0]
 800a06c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a070:	4770      	bx	lr

0800a072 <__sfputs_r>:
 800a072:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a074:	4606      	mov	r6, r0
 800a076:	460f      	mov	r7, r1
 800a078:	4614      	mov	r4, r2
 800a07a:	18d5      	adds	r5, r2, r3
 800a07c:	42ac      	cmp	r4, r5
 800a07e:	d101      	bne.n	800a084 <__sfputs_r+0x12>
 800a080:	2000      	movs	r0, #0
 800a082:	e007      	b.n	800a094 <__sfputs_r+0x22>
 800a084:	463a      	mov	r2, r7
 800a086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a08a:	4630      	mov	r0, r6
 800a08c:	f7ff ffda 	bl	800a044 <__sfputc_r>
 800a090:	1c43      	adds	r3, r0, #1
 800a092:	d1f3      	bne.n	800a07c <__sfputs_r+0xa>
 800a094:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a098 <_vfiprintf_r>:
 800a098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a09c:	460d      	mov	r5, r1
 800a09e:	b09d      	sub	sp, #116	; 0x74
 800a0a0:	4614      	mov	r4, r2
 800a0a2:	4698      	mov	r8, r3
 800a0a4:	4606      	mov	r6, r0
 800a0a6:	b118      	cbz	r0, 800a0b0 <_vfiprintf_r+0x18>
 800a0a8:	6983      	ldr	r3, [r0, #24]
 800a0aa:	b90b      	cbnz	r3, 800a0b0 <_vfiprintf_r+0x18>
 800a0ac:	f7ff fe96 	bl	8009ddc <__sinit>
 800a0b0:	4b89      	ldr	r3, [pc, #548]	; (800a2d8 <_vfiprintf_r+0x240>)
 800a0b2:	429d      	cmp	r5, r3
 800a0b4:	d11b      	bne.n	800a0ee <_vfiprintf_r+0x56>
 800a0b6:	6875      	ldr	r5, [r6, #4]
 800a0b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0ba:	07d9      	lsls	r1, r3, #31
 800a0bc:	d405      	bmi.n	800a0ca <_vfiprintf_r+0x32>
 800a0be:	89ab      	ldrh	r3, [r5, #12]
 800a0c0:	059a      	lsls	r2, r3, #22
 800a0c2:	d402      	bmi.n	800a0ca <_vfiprintf_r+0x32>
 800a0c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0c6:	f7ff ff27 	bl	8009f18 <__retarget_lock_acquire_recursive>
 800a0ca:	89ab      	ldrh	r3, [r5, #12]
 800a0cc:	071b      	lsls	r3, r3, #28
 800a0ce:	d501      	bpl.n	800a0d4 <_vfiprintf_r+0x3c>
 800a0d0:	692b      	ldr	r3, [r5, #16]
 800a0d2:	b9eb      	cbnz	r3, 800a110 <_vfiprintf_r+0x78>
 800a0d4:	4629      	mov	r1, r5
 800a0d6:	4630      	mov	r0, r6
 800a0d8:	f000 fb5c 	bl	800a794 <__swsetup_r>
 800a0dc:	b1c0      	cbz	r0, 800a110 <_vfiprintf_r+0x78>
 800a0de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0e0:	07dc      	lsls	r4, r3, #31
 800a0e2:	d50e      	bpl.n	800a102 <_vfiprintf_r+0x6a>
 800a0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e8:	b01d      	add	sp, #116	; 0x74
 800a0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ee:	4b7b      	ldr	r3, [pc, #492]	; (800a2dc <_vfiprintf_r+0x244>)
 800a0f0:	429d      	cmp	r5, r3
 800a0f2:	d101      	bne.n	800a0f8 <_vfiprintf_r+0x60>
 800a0f4:	68b5      	ldr	r5, [r6, #8]
 800a0f6:	e7df      	b.n	800a0b8 <_vfiprintf_r+0x20>
 800a0f8:	4b79      	ldr	r3, [pc, #484]	; (800a2e0 <_vfiprintf_r+0x248>)
 800a0fa:	429d      	cmp	r5, r3
 800a0fc:	bf08      	it	eq
 800a0fe:	68f5      	ldreq	r5, [r6, #12]
 800a100:	e7da      	b.n	800a0b8 <_vfiprintf_r+0x20>
 800a102:	89ab      	ldrh	r3, [r5, #12]
 800a104:	0598      	lsls	r0, r3, #22
 800a106:	d4ed      	bmi.n	800a0e4 <_vfiprintf_r+0x4c>
 800a108:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a10a:	f7ff ff06 	bl	8009f1a <__retarget_lock_release_recursive>
 800a10e:	e7e9      	b.n	800a0e4 <_vfiprintf_r+0x4c>
 800a110:	2300      	movs	r3, #0
 800a112:	f8cd 800c 	str.w	r8, [sp, #12]
 800a116:	f04f 0901 	mov.w	r9, #1
 800a11a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800a2e4 <_vfiprintf_r+0x24c>
 800a11e:	9309      	str	r3, [sp, #36]	; 0x24
 800a120:	2320      	movs	r3, #32
 800a122:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a126:	2330      	movs	r3, #48	; 0x30
 800a128:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a12c:	4623      	mov	r3, r4
 800a12e:	469a      	mov	sl, r3
 800a130:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a134:	b10a      	cbz	r2, 800a13a <_vfiprintf_r+0xa2>
 800a136:	2a25      	cmp	r2, #37	; 0x25
 800a138:	d1f9      	bne.n	800a12e <_vfiprintf_r+0x96>
 800a13a:	ebba 0b04 	subs.w	fp, sl, r4
 800a13e:	d00b      	beq.n	800a158 <_vfiprintf_r+0xc0>
 800a140:	465b      	mov	r3, fp
 800a142:	4622      	mov	r2, r4
 800a144:	4629      	mov	r1, r5
 800a146:	4630      	mov	r0, r6
 800a148:	f7ff ff93 	bl	800a072 <__sfputs_r>
 800a14c:	3001      	adds	r0, #1
 800a14e:	f000 80aa 	beq.w	800a2a6 <_vfiprintf_r+0x20e>
 800a152:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a154:	445a      	add	r2, fp
 800a156:	9209      	str	r2, [sp, #36]	; 0x24
 800a158:	f89a 3000 	ldrb.w	r3, [sl]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	f000 80a2 	beq.w	800a2a6 <_vfiprintf_r+0x20e>
 800a162:	2300      	movs	r3, #0
 800a164:	f04f 32ff 	mov.w	r2, #4294967295
 800a168:	f10a 0a01 	add.w	sl, sl, #1
 800a16c:	9304      	str	r3, [sp, #16]
 800a16e:	9307      	str	r3, [sp, #28]
 800a170:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a174:	931a      	str	r3, [sp, #104]	; 0x68
 800a176:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a17a:	4654      	mov	r4, sl
 800a17c:	2205      	movs	r2, #5
 800a17e:	4859      	ldr	r0, [pc, #356]	; (800a2e4 <_vfiprintf_r+0x24c>)
 800a180:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a184:	f000 fcbc 	bl	800ab00 <memchr>
 800a188:	9a04      	ldr	r2, [sp, #16]
 800a18a:	b9d8      	cbnz	r0, 800a1c4 <_vfiprintf_r+0x12c>
 800a18c:	06d1      	lsls	r1, r2, #27
 800a18e:	bf44      	itt	mi
 800a190:	2320      	movmi	r3, #32
 800a192:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a196:	0713      	lsls	r3, r2, #28
 800a198:	bf44      	itt	mi
 800a19a:	232b      	movmi	r3, #43	; 0x2b
 800a19c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a1a4:	2b2a      	cmp	r3, #42	; 0x2a
 800a1a6:	d015      	beq.n	800a1d4 <_vfiprintf_r+0x13c>
 800a1a8:	9a07      	ldr	r2, [sp, #28]
 800a1aa:	4654      	mov	r4, sl
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	f04f 0c0a 	mov.w	ip, #10
 800a1b2:	4621      	mov	r1, r4
 800a1b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1b8:	3b30      	subs	r3, #48	; 0x30
 800a1ba:	2b09      	cmp	r3, #9
 800a1bc:	d94e      	bls.n	800a25c <_vfiprintf_r+0x1c4>
 800a1be:	b1b0      	cbz	r0, 800a1ee <_vfiprintf_r+0x156>
 800a1c0:	9207      	str	r2, [sp, #28]
 800a1c2:	e014      	b.n	800a1ee <_vfiprintf_r+0x156>
 800a1c4:	eba0 0308 	sub.w	r3, r0, r8
 800a1c8:	46a2      	mov	sl, r4
 800a1ca:	fa09 f303 	lsl.w	r3, r9, r3
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	9304      	str	r3, [sp, #16]
 800a1d2:	e7d2      	b.n	800a17a <_vfiprintf_r+0xe2>
 800a1d4:	9b03      	ldr	r3, [sp, #12]
 800a1d6:	1d19      	adds	r1, r3, #4
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	9103      	str	r1, [sp, #12]
 800a1de:	bfbb      	ittet	lt
 800a1e0:	425b      	neglt	r3, r3
 800a1e2:	f042 0202 	orrlt.w	r2, r2, #2
 800a1e6:	9307      	strge	r3, [sp, #28]
 800a1e8:	9307      	strlt	r3, [sp, #28]
 800a1ea:	bfb8      	it	lt
 800a1ec:	9204      	strlt	r2, [sp, #16]
 800a1ee:	7823      	ldrb	r3, [r4, #0]
 800a1f0:	2b2e      	cmp	r3, #46	; 0x2e
 800a1f2:	d10c      	bne.n	800a20e <_vfiprintf_r+0x176>
 800a1f4:	7863      	ldrb	r3, [r4, #1]
 800a1f6:	2b2a      	cmp	r3, #42	; 0x2a
 800a1f8:	d135      	bne.n	800a266 <_vfiprintf_r+0x1ce>
 800a1fa:	9b03      	ldr	r3, [sp, #12]
 800a1fc:	3402      	adds	r4, #2
 800a1fe:	1d1a      	adds	r2, r3, #4
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	2b00      	cmp	r3, #0
 800a204:	9203      	str	r2, [sp, #12]
 800a206:	bfb8      	it	lt
 800a208:	f04f 33ff 	movlt.w	r3, #4294967295
 800a20c:	9305      	str	r3, [sp, #20]
 800a20e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a2f4 <_vfiprintf_r+0x25c>
 800a212:	2203      	movs	r2, #3
 800a214:	7821      	ldrb	r1, [r4, #0]
 800a216:	4650      	mov	r0, sl
 800a218:	f000 fc72 	bl	800ab00 <memchr>
 800a21c:	b140      	cbz	r0, 800a230 <_vfiprintf_r+0x198>
 800a21e:	2340      	movs	r3, #64	; 0x40
 800a220:	eba0 000a 	sub.w	r0, r0, sl
 800a224:	3401      	adds	r4, #1
 800a226:	fa03 f000 	lsl.w	r0, r3, r0
 800a22a:	9b04      	ldr	r3, [sp, #16]
 800a22c:	4303      	orrs	r3, r0
 800a22e:	9304      	str	r3, [sp, #16]
 800a230:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a234:	2206      	movs	r2, #6
 800a236:	482c      	ldr	r0, [pc, #176]	; (800a2e8 <_vfiprintf_r+0x250>)
 800a238:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a23c:	f000 fc60 	bl	800ab00 <memchr>
 800a240:	2800      	cmp	r0, #0
 800a242:	d03f      	beq.n	800a2c4 <_vfiprintf_r+0x22c>
 800a244:	4b29      	ldr	r3, [pc, #164]	; (800a2ec <_vfiprintf_r+0x254>)
 800a246:	bb1b      	cbnz	r3, 800a290 <_vfiprintf_r+0x1f8>
 800a248:	9b03      	ldr	r3, [sp, #12]
 800a24a:	3307      	adds	r3, #7
 800a24c:	f023 0307 	bic.w	r3, r3, #7
 800a250:	3308      	adds	r3, #8
 800a252:	9303      	str	r3, [sp, #12]
 800a254:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a256:	443b      	add	r3, r7
 800a258:	9309      	str	r3, [sp, #36]	; 0x24
 800a25a:	e767      	b.n	800a12c <_vfiprintf_r+0x94>
 800a25c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a260:	460c      	mov	r4, r1
 800a262:	2001      	movs	r0, #1
 800a264:	e7a5      	b.n	800a1b2 <_vfiprintf_r+0x11a>
 800a266:	2300      	movs	r3, #0
 800a268:	3401      	adds	r4, #1
 800a26a:	f04f 0c0a 	mov.w	ip, #10
 800a26e:	4619      	mov	r1, r3
 800a270:	9305      	str	r3, [sp, #20]
 800a272:	4620      	mov	r0, r4
 800a274:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a278:	3a30      	subs	r2, #48	; 0x30
 800a27a:	2a09      	cmp	r2, #9
 800a27c:	d903      	bls.n	800a286 <_vfiprintf_r+0x1ee>
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d0c5      	beq.n	800a20e <_vfiprintf_r+0x176>
 800a282:	9105      	str	r1, [sp, #20]
 800a284:	e7c3      	b.n	800a20e <_vfiprintf_r+0x176>
 800a286:	fb0c 2101 	mla	r1, ip, r1, r2
 800a28a:	4604      	mov	r4, r0
 800a28c:	2301      	movs	r3, #1
 800a28e:	e7f0      	b.n	800a272 <_vfiprintf_r+0x1da>
 800a290:	ab03      	add	r3, sp, #12
 800a292:	462a      	mov	r2, r5
 800a294:	a904      	add	r1, sp, #16
 800a296:	4630      	mov	r0, r6
 800a298:	9300      	str	r3, [sp, #0]
 800a29a:	4b15      	ldr	r3, [pc, #84]	; (800a2f0 <_vfiprintf_r+0x258>)
 800a29c:	e000      	b.n	800a2a0 <_vfiprintf_r+0x208>
 800a29e:	bf00      	nop
 800a2a0:	4607      	mov	r7, r0
 800a2a2:	1c78      	adds	r0, r7, #1
 800a2a4:	d1d6      	bne.n	800a254 <_vfiprintf_r+0x1bc>
 800a2a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a2a8:	07d9      	lsls	r1, r3, #31
 800a2aa:	d405      	bmi.n	800a2b8 <_vfiprintf_r+0x220>
 800a2ac:	89ab      	ldrh	r3, [r5, #12]
 800a2ae:	059a      	lsls	r2, r3, #22
 800a2b0:	d402      	bmi.n	800a2b8 <_vfiprintf_r+0x220>
 800a2b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a2b4:	f7ff fe31 	bl	8009f1a <__retarget_lock_release_recursive>
 800a2b8:	89ab      	ldrh	r3, [r5, #12]
 800a2ba:	065b      	lsls	r3, r3, #25
 800a2bc:	f53f af12 	bmi.w	800a0e4 <_vfiprintf_r+0x4c>
 800a2c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2c2:	e711      	b.n	800a0e8 <_vfiprintf_r+0x50>
 800a2c4:	ab03      	add	r3, sp, #12
 800a2c6:	462a      	mov	r2, r5
 800a2c8:	a904      	add	r1, sp, #16
 800a2ca:	4630      	mov	r0, r6
 800a2cc:	9300      	str	r3, [sp, #0]
 800a2ce:	4b08      	ldr	r3, [pc, #32]	; (800a2f0 <_vfiprintf_r+0x258>)
 800a2d0:	f000 f882 	bl	800a3d8 <_printf_i>
 800a2d4:	e7e4      	b.n	800a2a0 <_vfiprintf_r+0x208>
 800a2d6:	bf00      	nop
 800a2d8:	0800ad88 	.word	0x0800ad88
 800a2dc:	0800ada8 	.word	0x0800ada8
 800a2e0:	0800ad68 	.word	0x0800ad68
 800a2e4:	0800adc8 	.word	0x0800adc8
 800a2e8:	0800add2 	.word	0x0800add2
 800a2ec:	00000000 	.word	0x00000000
 800a2f0:	0800a073 	.word	0x0800a073
 800a2f4:	0800adce 	.word	0x0800adce

0800a2f8 <_printf_common>:
 800a2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2fc:	4616      	mov	r6, r2
 800a2fe:	4699      	mov	r9, r3
 800a300:	688a      	ldr	r2, [r1, #8]
 800a302:	4607      	mov	r7, r0
 800a304:	690b      	ldr	r3, [r1, #16]
 800a306:	460c      	mov	r4, r1
 800a308:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a30c:	4293      	cmp	r3, r2
 800a30e:	bfb8      	it	lt
 800a310:	4613      	movlt	r3, r2
 800a312:	6033      	str	r3, [r6, #0]
 800a314:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a318:	b10a      	cbz	r2, 800a31e <_printf_common+0x26>
 800a31a:	3301      	adds	r3, #1
 800a31c:	6033      	str	r3, [r6, #0]
 800a31e:	6823      	ldr	r3, [r4, #0]
 800a320:	0699      	lsls	r1, r3, #26
 800a322:	bf42      	ittt	mi
 800a324:	6833      	ldrmi	r3, [r6, #0]
 800a326:	3302      	addmi	r3, #2
 800a328:	6033      	strmi	r3, [r6, #0]
 800a32a:	6825      	ldr	r5, [r4, #0]
 800a32c:	f015 0506 	ands.w	r5, r5, #6
 800a330:	d106      	bne.n	800a340 <_printf_common+0x48>
 800a332:	f104 0a19 	add.w	sl, r4, #25
 800a336:	68e3      	ldr	r3, [r4, #12]
 800a338:	6832      	ldr	r2, [r6, #0]
 800a33a:	1a9b      	subs	r3, r3, r2
 800a33c:	42ab      	cmp	r3, r5
 800a33e:	dc29      	bgt.n	800a394 <_printf_common+0x9c>
 800a340:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a344:	1e13      	subs	r3, r2, #0
 800a346:	6822      	ldr	r2, [r4, #0]
 800a348:	bf18      	it	ne
 800a34a:	2301      	movne	r3, #1
 800a34c:	0692      	lsls	r2, r2, #26
 800a34e:	d42e      	bmi.n	800a3ae <_printf_common+0xb6>
 800a350:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a354:	4649      	mov	r1, r9
 800a356:	4638      	mov	r0, r7
 800a358:	47c0      	blx	r8
 800a35a:	3001      	adds	r0, #1
 800a35c:	d021      	beq.n	800a3a2 <_printf_common+0xaa>
 800a35e:	6823      	ldr	r3, [r4, #0]
 800a360:	341a      	adds	r4, #26
 800a362:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800a366:	f003 0306 	and.w	r3, r3, #6
 800a36a:	6832      	ldr	r2, [r6, #0]
 800a36c:	2600      	movs	r6, #0
 800a36e:	2b04      	cmp	r3, #4
 800a370:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800a374:	bf08      	it	eq
 800a376:	1aad      	subeq	r5, r5, r2
 800a378:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800a37c:	bf14      	ite	ne
 800a37e:	2500      	movne	r5, #0
 800a380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a384:	4293      	cmp	r3, r2
 800a386:	bfc4      	itt	gt
 800a388:	1a9b      	subgt	r3, r3, r2
 800a38a:	18ed      	addgt	r5, r5, r3
 800a38c:	42b5      	cmp	r5, r6
 800a38e:	d11a      	bne.n	800a3c6 <_printf_common+0xce>
 800a390:	2000      	movs	r0, #0
 800a392:	e008      	b.n	800a3a6 <_printf_common+0xae>
 800a394:	2301      	movs	r3, #1
 800a396:	4652      	mov	r2, sl
 800a398:	4649      	mov	r1, r9
 800a39a:	4638      	mov	r0, r7
 800a39c:	47c0      	blx	r8
 800a39e:	3001      	adds	r0, #1
 800a3a0:	d103      	bne.n	800a3aa <_printf_common+0xb2>
 800a3a2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3aa:	3501      	adds	r5, #1
 800a3ac:	e7c3      	b.n	800a336 <_printf_common+0x3e>
 800a3ae:	18e1      	adds	r1, r4, r3
 800a3b0:	1c5a      	adds	r2, r3, #1
 800a3b2:	2030      	movs	r0, #48	; 0x30
 800a3b4:	3302      	adds	r3, #2
 800a3b6:	4422      	add	r2, r4
 800a3b8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a3bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a3c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a3c4:	e7c4      	b.n	800a350 <_printf_common+0x58>
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	4622      	mov	r2, r4
 800a3ca:	4649      	mov	r1, r9
 800a3cc:	4638      	mov	r0, r7
 800a3ce:	47c0      	blx	r8
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	d0e6      	beq.n	800a3a2 <_printf_common+0xaa>
 800a3d4:	3601      	adds	r6, #1
 800a3d6:	e7d9      	b.n	800a38c <_printf_common+0x94>

0800a3d8 <_printf_i>:
 800a3d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a3dc:	7e0f      	ldrb	r7, [r1, #24]
 800a3de:	4691      	mov	r9, r2
 800a3e0:	4680      	mov	r8, r0
 800a3e2:	460c      	mov	r4, r1
 800a3e4:	2f78      	cmp	r7, #120	; 0x78
 800a3e6:	469a      	mov	sl, r3
 800a3e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a3ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a3ee:	d807      	bhi.n	800a400 <_printf_i+0x28>
 800a3f0:	2f62      	cmp	r7, #98	; 0x62
 800a3f2:	d80a      	bhi.n	800a40a <_printf_i+0x32>
 800a3f4:	2f00      	cmp	r7, #0
 800a3f6:	f000 80d8 	beq.w	800a5aa <_printf_i+0x1d2>
 800a3fa:	2f58      	cmp	r7, #88	; 0x58
 800a3fc:	f000 80a3 	beq.w	800a546 <_printf_i+0x16e>
 800a400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a404:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a408:	e03a      	b.n	800a480 <_printf_i+0xa8>
 800a40a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a40e:	2b15      	cmp	r3, #21
 800a410:	d8f6      	bhi.n	800a400 <_printf_i+0x28>
 800a412:	a101      	add	r1, pc, #4	; (adr r1, 800a418 <_printf_i+0x40>)
 800a414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a418:	0800a471 	.word	0x0800a471
 800a41c:	0800a485 	.word	0x0800a485
 800a420:	0800a401 	.word	0x0800a401
 800a424:	0800a401 	.word	0x0800a401
 800a428:	0800a401 	.word	0x0800a401
 800a42c:	0800a401 	.word	0x0800a401
 800a430:	0800a485 	.word	0x0800a485
 800a434:	0800a401 	.word	0x0800a401
 800a438:	0800a401 	.word	0x0800a401
 800a43c:	0800a401 	.word	0x0800a401
 800a440:	0800a401 	.word	0x0800a401
 800a444:	0800a591 	.word	0x0800a591
 800a448:	0800a4b5 	.word	0x0800a4b5
 800a44c:	0800a573 	.word	0x0800a573
 800a450:	0800a401 	.word	0x0800a401
 800a454:	0800a401 	.word	0x0800a401
 800a458:	0800a5b3 	.word	0x0800a5b3
 800a45c:	0800a401 	.word	0x0800a401
 800a460:	0800a4b5 	.word	0x0800a4b5
 800a464:	0800a401 	.word	0x0800a401
 800a468:	0800a401 	.word	0x0800a401
 800a46c:	0800a57b 	.word	0x0800a57b
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	1d1a      	adds	r2, r3, #4
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	602a      	str	r2, [r5, #0]
 800a478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a47c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a480:	2301      	movs	r3, #1
 800a482:	e0a3      	b.n	800a5cc <_printf_i+0x1f4>
 800a484:	6820      	ldr	r0, [r4, #0]
 800a486:	6829      	ldr	r1, [r5, #0]
 800a488:	0606      	lsls	r6, r0, #24
 800a48a:	f101 0304 	add.w	r3, r1, #4
 800a48e:	d50a      	bpl.n	800a4a6 <_printf_i+0xce>
 800a490:	680e      	ldr	r6, [r1, #0]
 800a492:	602b      	str	r3, [r5, #0]
 800a494:	2e00      	cmp	r6, #0
 800a496:	da03      	bge.n	800a4a0 <_printf_i+0xc8>
 800a498:	232d      	movs	r3, #45	; 0x2d
 800a49a:	4276      	negs	r6, r6
 800a49c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4a0:	485e      	ldr	r0, [pc, #376]	; (800a61c <_printf_i+0x244>)
 800a4a2:	230a      	movs	r3, #10
 800a4a4:	e019      	b.n	800a4da <_printf_i+0x102>
 800a4a6:	680e      	ldr	r6, [r1, #0]
 800a4a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a4ac:	602b      	str	r3, [r5, #0]
 800a4ae:	bf18      	it	ne
 800a4b0:	b236      	sxthne	r6, r6
 800a4b2:	e7ef      	b.n	800a494 <_printf_i+0xbc>
 800a4b4:	682b      	ldr	r3, [r5, #0]
 800a4b6:	6820      	ldr	r0, [r4, #0]
 800a4b8:	1d19      	adds	r1, r3, #4
 800a4ba:	6029      	str	r1, [r5, #0]
 800a4bc:	0601      	lsls	r1, r0, #24
 800a4be:	d501      	bpl.n	800a4c4 <_printf_i+0xec>
 800a4c0:	681e      	ldr	r6, [r3, #0]
 800a4c2:	e002      	b.n	800a4ca <_printf_i+0xf2>
 800a4c4:	0646      	lsls	r6, r0, #25
 800a4c6:	d5fb      	bpl.n	800a4c0 <_printf_i+0xe8>
 800a4c8:	881e      	ldrh	r6, [r3, #0]
 800a4ca:	2f6f      	cmp	r7, #111	; 0x6f
 800a4cc:	4853      	ldr	r0, [pc, #332]	; (800a61c <_printf_i+0x244>)
 800a4ce:	bf0c      	ite	eq
 800a4d0:	2308      	moveq	r3, #8
 800a4d2:	230a      	movne	r3, #10
 800a4d4:	2100      	movs	r1, #0
 800a4d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a4da:	6865      	ldr	r5, [r4, #4]
 800a4dc:	2d00      	cmp	r5, #0
 800a4de:	60a5      	str	r5, [r4, #8]
 800a4e0:	bfa2      	ittt	ge
 800a4e2:	6821      	ldrge	r1, [r4, #0]
 800a4e4:	f021 0104 	bicge.w	r1, r1, #4
 800a4e8:	6021      	strge	r1, [r4, #0]
 800a4ea:	b90e      	cbnz	r6, 800a4f0 <_printf_i+0x118>
 800a4ec:	2d00      	cmp	r5, #0
 800a4ee:	d04d      	beq.n	800a58c <_printf_i+0x1b4>
 800a4f0:	4615      	mov	r5, r2
 800a4f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a4f6:	fb03 6711 	mls	r7, r3, r1, r6
 800a4fa:	5dc7      	ldrb	r7, [r0, r7]
 800a4fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a500:	4637      	mov	r7, r6
 800a502:	460e      	mov	r6, r1
 800a504:	42bb      	cmp	r3, r7
 800a506:	d9f4      	bls.n	800a4f2 <_printf_i+0x11a>
 800a508:	2b08      	cmp	r3, #8
 800a50a:	d10b      	bne.n	800a524 <_printf_i+0x14c>
 800a50c:	6823      	ldr	r3, [r4, #0]
 800a50e:	07de      	lsls	r6, r3, #31
 800a510:	d508      	bpl.n	800a524 <_printf_i+0x14c>
 800a512:	6923      	ldr	r3, [r4, #16]
 800a514:	6861      	ldr	r1, [r4, #4]
 800a516:	4299      	cmp	r1, r3
 800a518:	bfde      	ittt	le
 800a51a:	2330      	movle	r3, #48	; 0x30
 800a51c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a520:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a524:	1b52      	subs	r2, r2, r5
 800a526:	6122      	str	r2, [r4, #16]
 800a528:	464b      	mov	r3, r9
 800a52a:	aa03      	add	r2, sp, #12
 800a52c:	4621      	mov	r1, r4
 800a52e:	4640      	mov	r0, r8
 800a530:	f8cd a000 	str.w	sl, [sp]
 800a534:	f7ff fee0 	bl	800a2f8 <_printf_common>
 800a538:	3001      	adds	r0, #1
 800a53a:	d14c      	bne.n	800a5d6 <_printf_i+0x1fe>
 800a53c:	f04f 30ff 	mov.w	r0, #4294967295
 800a540:	b004      	add	sp, #16
 800a542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a546:	4835      	ldr	r0, [pc, #212]	; (800a61c <_printf_i+0x244>)
 800a548:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a54c:	6829      	ldr	r1, [r5, #0]
 800a54e:	6823      	ldr	r3, [r4, #0]
 800a550:	f851 6b04 	ldr.w	r6, [r1], #4
 800a554:	6029      	str	r1, [r5, #0]
 800a556:	061d      	lsls	r5, r3, #24
 800a558:	d514      	bpl.n	800a584 <_printf_i+0x1ac>
 800a55a:	07df      	lsls	r7, r3, #31
 800a55c:	bf44      	itt	mi
 800a55e:	f043 0320 	orrmi.w	r3, r3, #32
 800a562:	6023      	strmi	r3, [r4, #0]
 800a564:	b91e      	cbnz	r6, 800a56e <_printf_i+0x196>
 800a566:	6823      	ldr	r3, [r4, #0]
 800a568:	f023 0320 	bic.w	r3, r3, #32
 800a56c:	6023      	str	r3, [r4, #0]
 800a56e:	2310      	movs	r3, #16
 800a570:	e7b0      	b.n	800a4d4 <_printf_i+0xfc>
 800a572:	6823      	ldr	r3, [r4, #0]
 800a574:	f043 0320 	orr.w	r3, r3, #32
 800a578:	6023      	str	r3, [r4, #0]
 800a57a:	2378      	movs	r3, #120	; 0x78
 800a57c:	4828      	ldr	r0, [pc, #160]	; (800a620 <_printf_i+0x248>)
 800a57e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a582:	e7e3      	b.n	800a54c <_printf_i+0x174>
 800a584:	0659      	lsls	r1, r3, #25
 800a586:	bf48      	it	mi
 800a588:	b2b6      	uxthmi	r6, r6
 800a58a:	e7e6      	b.n	800a55a <_printf_i+0x182>
 800a58c:	4615      	mov	r5, r2
 800a58e:	e7bb      	b.n	800a508 <_printf_i+0x130>
 800a590:	682b      	ldr	r3, [r5, #0]
 800a592:	6826      	ldr	r6, [r4, #0]
 800a594:	1d18      	adds	r0, r3, #4
 800a596:	6961      	ldr	r1, [r4, #20]
 800a598:	6028      	str	r0, [r5, #0]
 800a59a:	0635      	lsls	r5, r6, #24
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	d501      	bpl.n	800a5a4 <_printf_i+0x1cc>
 800a5a0:	6019      	str	r1, [r3, #0]
 800a5a2:	e002      	b.n	800a5aa <_printf_i+0x1d2>
 800a5a4:	0670      	lsls	r0, r6, #25
 800a5a6:	d5fb      	bpl.n	800a5a0 <_printf_i+0x1c8>
 800a5a8:	8019      	strh	r1, [r3, #0]
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	4615      	mov	r5, r2
 800a5ae:	6123      	str	r3, [r4, #16]
 800a5b0:	e7ba      	b.n	800a528 <_printf_i+0x150>
 800a5b2:	682b      	ldr	r3, [r5, #0]
 800a5b4:	2100      	movs	r1, #0
 800a5b6:	1d1a      	adds	r2, r3, #4
 800a5b8:	602a      	str	r2, [r5, #0]
 800a5ba:	681d      	ldr	r5, [r3, #0]
 800a5bc:	6862      	ldr	r2, [r4, #4]
 800a5be:	4628      	mov	r0, r5
 800a5c0:	f000 fa9e 	bl	800ab00 <memchr>
 800a5c4:	b108      	cbz	r0, 800a5ca <_printf_i+0x1f2>
 800a5c6:	1b40      	subs	r0, r0, r5
 800a5c8:	6060      	str	r0, [r4, #4]
 800a5ca:	6863      	ldr	r3, [r4, #4]
 800a5cc:	6123      	str	r3, [r4, #16]
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5d4:	e7a8      	b.n	800a528 <_printf_i+0x150>
 800a5d6:	6923      	ldr	r3, [r4, #16]
 800a5d8:	462a      	mov	r2, r5
 800a5da:	4649      	mov	r1, r9
 800a5dc:	4640      	mov	r0, r8
 800a5de:	47d0      	blx	sl
 800a5e0:	3001      	adds	r0, #1
 800a5e2:	d0ab      	beq.n	800a53c <_printf_i+0x164>
 800a5e4:	6823      	ldr	r3, [r4, #0]
 800a5e6:	079b      	lsls	r3, r3, #30
 800a5e8:	d413      	bmi.n	800a612 <_printf_i+0x23a>
 800a5ea:	68e0      	ldr	r0, [r4, #12]
 800a5ec:	9b03      	ldr	r3, [sp, #12]
 800a5ee:	4298      	cmp	r0, r3
 800a5f0:	bfb8      	it	lt
 800a5f2:	4618      	movlt	r0, r3
 800a5f4:	e7a4      	b.n	800a540 <_printf_i+0x168>
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	4632      	mov	r2, r6
 800a5fa:	4649      	mov	r1, r9
 800a5fc:	4640      	mov	r0, r8
 800a5fe:	47d0      	blx	sl
 800a600:	3001      	adds	r0, #1
 800a602:	d09b      	beq.n	800a53c <_printf_i+0x164>
 800a604:	3501      	adds	r5, #1
 800a606:	68e3      	ldr	r3, [r4, #12]
 800a608:	9903      	ldr	r1, [sp, #12]
 800a60a:	1a5b      	subs	r3, r3, r1
 800a60c:	42ab      	cmp	r3, r5
 800a60e:	dcf2      	bgt.n	800a5f6 <_printf_i+0x21e>
 800a610:	e7eb      	b.n	800a5ea <_printf_i+0x212>
 800a612:	2500      	movs	r5, #0
 800a614:	f104 0619 	add.w	r6, r4, #25
 800a618:	e7f5      	b.n	800a606 <_printf_i+0x22e>
 800a61a:	bf00      	nop
 800a61c:	0800add9 	.word	0x0800add9
 800a620:	0800adea 	.word	0x0800adea

0800a624 <_sbrk_r>:
 800a624:	b538      	push	{r3, r4, r5, lr}
 800a626:	2300      	movs	r3, #0
 800a628:	4d05      	ldr	r5, [pc, #20]	; (800a640 <_sbrk_r+0x1c>)
 800a62a:	4604      	mov	r4, r0
 800a62c:	4608      	mov	r0, r1
 800a62e:	602b      	str	r3, [r5, #0]
 800a630:	f7f7 fd18 	bl	8002064 <_sbrk>
 800a634:	1c43      	adds	r3, r0, #1
 800a636:	d102      	bne.n	800a63e <_sbrk_r+0x1a>
 800a638:	682b      	ldr	r3, [r5, #0]
 800a63a:	b103      	cbz	r3, 800a63e <_sbrk_r+0x1a>
 800a63c:	6023      	str	r3, [r4, #0]
 800a63e:	bd38      	pop	{r3, r4, r5, pc}
 800a640:	20000990 	.word	0x20000990

0800a644 <__sread>:
 800a644:	b510      	push	{r4, lr}
 800a646:	460c      	mov	r4, r1
 800a648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a64c:	f000 fabe 	bl	800abcc <_read_r>
 800a650:	2800      	cmp	r0, #0
 800a652:	bfab      	itete	ge
 800a654:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a656:	89a3      	ldrhlt	r3, [r4, #12]
 800a658:	181b      	addge	r3, r3, r0
 800a65a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a65e:	bfac      	ite	ge
 800a660:	6563      	strge	r3, [r4, #84]	; 0x54
 800a662:	81a3      	strhlt	r3, [r4, #12]
 800a664:	bd10      	pop	{r4, pc}

0800a666 <__swrite>:
 800a666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a66a:	461f      	mov	r7, r3
 800a66c:	898b      	ldrh	r3, [r1, #12]
 800a66e:	4605      	mov	r5, r0
 800a670:	460c      	mov	r4, r1
 800a672:	05db      	lsls	r3, r3, #23
 800a674:	4616      	mov	r6, r2
 800a676:	d505      	bpl.n	800a684 <__swrite+0x1e>
 800a678:	2302      	movs	r3, #2
 800a67a:	2200      	movs	r2, #0
 800a67c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a680:	f000 f9c6 	bl	800aa10 <_lseek_r>
 800a684:	89a3      	ldrh	r3, [r4, #12]
 800a686:	4632      	mov	r2, r6
 800a688:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a68c:	4628      	mov	r0, r5
 800a68e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a692:	81a3      	strh	r3, [r4, #12]
 800a694:	463b      	mov	r3, r7
 800a696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a69a:	f000 b869 	b.w	800a770 <_write_r>

0800a69e <__sseek>:
 800a69e:	b510      	push	{r4, lr}
 800a6a0:	460c      	mov	r4, r1
 800a6a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6a6:	f000 f9b3 	bl	800aa10 <_lseek_r>
 800a6aa:	1c43      	adds	r3, r0, #1
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	bf15      	itete	ne
 800a6b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a6b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a6b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a6ba:	81a3      	strheq	r3, [r4, #12]
 800a6bc:	bf18      	it	ne
 800a6be:	81a3      	strhne	r3, [r4, #12]
 800a6c0:	bd10      	pop	{r4, pc}

0800a6c2 <__sclose>:
 800a6c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a6c6:	f000 b8d3 	b.w	800a870 <_close_r>
	...

0800a6cc <__swbuf_r>:
 800a6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6ce:	460e      	mov	r6, r1
 800a6d0:	4614      	mov	r4, r2
 800a6d2:	4605      	mov	r5, r0
 800a6d4:	b118      	cbz	r0, 800a6de <__swbuf_r+0x12>
 800a6d6:	6983      	ldr	r3, [r0, #24]
 800a6d8:	b90b      	cbnz	r3, 800a6de <__swbuf_r+0x12>
 800a6da:	f7ff fb7f 	bl	8009ddc <__sinit>
 800a6de:	4b21      	ldr	r3, [pc, #132]	; (800a764 <__swbuf_r+0x98>)
 800a6e0:	429c      	cmp	r4, r3
 800a6e2:	d12b      	bne.n	800a73c <__swbuf_r+0x70>
 800a6e4:	686c      	ldr	r4, [r5, #4]
 800a6e6:	69a3      	ldr	r3, [r4, #24]
 800a6e8:	60a3      	str	r3, [r4, #8]
 800a6ea:	89a3      	ldrh	r3, [r4, #12]
 800a6ec:	071a      	lsls	r2, r3, #28
 800a6ee:	d52f      	bpl.n	800a750 <__swbuf_r+0x84>
 800a6f0:	6923      	ldr	r3, [r4, #16]
 800a6f2:	b36b      	cbz	r3, 800a750 <__swbuf_r+0x84>
 800a6f4:	6923      	ldr	r3, [r4, #16]
 800a6f6:	b2f6      	uxtb	r6, r6
 800a6f8:	6820      	ldr	r0, [r4, #0]
 800a6fa:	4637      	mov	r7, r6
 800a6fc:	1ac0      	subs	r0, r0, r3
 800a6fe:	6963      	ldr	r3, [r4, #20]
 800a700:	4283      	cmp	r3, r0
 800a702:	dc04      	bgt.n	800a70e <__swbuf_r+0x42>
 800a704:	4621      	mov	r1, r4
 800a706:	4628      	mov	r0, r5
 800a708:	f000 f946 	bl	800a998 <_fflush_r>
 800a70c:	bb30      	cbnz	r0, 800a75c <__swbuf_r+0x90>
 800a70e:	68a3      	ldr	r3, [r4, #8]
 800a710:	3001      	adds	r0, #1
 800a712:	3b01      	subs	r3, #1
 800a714:	60a3      	str	r3, [r4, #8]
 800a716:	6823      	ldr	r3, [r4, #0]
 800a718:	1c5a      	adds	r2, r3, #1
 800a71a:	6022      	str	r2, [r4, #0]
 800a71c:	701e      	strb	r6, [r3, #0]
 800a71e:	6963      	ldr	r3, [r4, #20]
 800a720:	4283      	cmp	r3, r0
 800a722:	d004      	beq.n	800a72e <__swbuf_r+0x62>
 800a724:	89a3      	ldrh	r3, [r4, #12]
 800a726:	07db      	lsls	r3, r3, #31
 800a728:	d506      	bpl.n	800a738 <__swbuf_r+0x6c>
 800a72a:	2e0a      	cmp	r6, #10
 800a72c:	d104      	bne.n	800a738 <__swbuf_r+0x6c>
 800a72e:	4621      	mov	r1, r4
 800a730:	4628      	mov	r0, r5
 800a732:	f000 f931 	bl	800a998 <_fflush_r>
 800a736:	b988      	cbnz	r0, 800a75c <__swbuf_r+0x90>
 800a738:	4638      	mov	r0, r7
 800a73a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a73c:	4b0a      	ldr	r3, [pc, #40]	; (800a768 <__swbuf_r+0x9c>)
 800a73e:	429c      	cmp	r4, r3
 800a740:	d101      	bne.n	800a746 <__swbuf_r+0x7a>
 800a742:	68ac      	ldr	r4, [r5, #8]
 800a744:	e7cf      	b.n	800a6e6 <__swbuf_r+0x1a>
 800a746:	4b09      	ldr	r3, [pc, #36]	; (800a76c <__swbuf_r+0xa0>)
 800a748:	429c      	cmp	r4, r3
 800a74a:	bf08      	it	eq
 800a74c:	68ec      	ldreq	r4, [r5, #12]
 800a74e:	e7ca      	b.n	800a6e6 <__swbuf_r+0x1a>
 800a750:	4621      	mov	r1, r4
 800a752:	4628      	mov	r0, r5
 800a754:	f000 f81e 	bl	800a794 <__swsetup_r>
 800a758:	2800      	cmp	r0, #0
 800a75a:	d0cb      	beq.n	800a6f4 <__swbuf_r+0x28>
 800a75c:	f04f 37ff 	mov.w	r7, #4294967295
 800a760:	e7ea      	b.n	800a738 <__swbuf_r+0x6c>
 800a762:	bf00      	nop
 800a764:	0800ad88 	.word	0x0800ad88
 800a768:	0800ada8 	.word	0x0800ada8
 800a76c:	0800ad68 	.word	0x0800ad68

0800a770 <_write_r>:
 800a770:	b538      	push	{r3, r4, r5, lr}
 800a772:	4604      	mov	r4, r0
 800a774:	4d06      	ldr	r5, [pc, #24]	; (800a790 <_write_r+0x20>)
 800a776:	4608      	mov	r0, r1
 800a778:	4611      	mov	r1, r2
 800a77a:	2200      	movs	r2, #0
 800a77c:	602a      	str	r2, [r5, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	f7f7 fc1f 	bl	8001fc2 <_write>
 800a784:	1c43      	adds	r3, r0, #1
 800a786:	d102      	bne.n	800a78e <_write_r+0x1e>
 800a788:	682b      	ldr	r3, [r5, #0]
 800a78a:	b103      	cbz	r3, 800a78e <_write_r+0x1e>
 800a78c:	6023      	str	r3, [r4, #0]
 800a78e:	bd38      	pop	{r3, r4, r5, pc}
 800a790:	20000990 	.word	0x20000990

0800a794 <__swsetup_r>:
 800a794:	4b32      	ldr	r3, [pc, #200]	; (800a860 <__swsetup_r+0xcc>)
 800a796:	b570      	push	{r4, r5, r6, lr}
 800a798:	681d      	ldr	r5, [r3, #0]
 800a79a:	4606      	mov	r6, r0
 800a79c:	460c      	mov	r4, r1
 800a79e:	b125      	cbz	r5, 800a7aa <__swsetup_r+0x16>
 800a7a0:	69ab      	ldr	r3, [r5, #24]
 800a7a2:	b913      	cbnz	r3, 800a7aa <__swsetup_r+0x16>
 800a7a4:	4628      	mov	r0, r5
 800a7a6:	f7ff fb19 	bl	8009ddc <__sinit>
 800a7aa:	4b2e      	ldr	r3, [pc, #184]	; (800a864 <__swsetup_r+0xd0>)
 800a7ac:	429c      	cmp	r4, r3
 800a7ae:	d10f      	bne.n	800a7d0 <__swsetup_r+0x3c>
 800a7b0:	686c      	ldr	r4, [r5, #4]
 800a7b2:	89a3      	ldrh	r3, [r4, #12]
 800a7b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7b8:	0719      	lsls	r1, r3, #28
 800a7ba:	d42c      	bmi.n	800a816 <__swsetup_r+0x82>
 800a7bc:	06dd      	lsls	r5, r3, #27
 800a7be:	d411      	bmi.n	800a7e4 <__swsetup_r+0x50>
 800a7c0:	2309      	movs	r3, #9
 800a7c2:	6033      	str	r3, [r6, #0]
 800a7c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a7c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a7cc:	81a3      	strh	r3, [r4, #12]
 800a7ce:	e03e      	b.n	800a84e <__swsetup_r+0xba>
 800a7d0:	4b25      	ldr	r3, [pc, #148]	; (800a868 <__swsetup_r+0xd4>)
 800a7d2:	429c      	cmp	r4, r3
 800a7d4:	d101      	bne.n	800a7da <__swsetup_r+0x46>
 800a7d6:	68ac      	ldr	r4, [r5, #8]
 800a7d8:	e7eb      	b.n	800a7b2 <__swsetup_r+0x1e>
 800a7da:	4b24      	ldr	r3, [pc, #144]	; (800a86c <__swsetup_r+0xd8>)
 800a7dc:	429c      	cmp	r4, r3
 800a7de:	bf08      	it	eq
 800a7e0:	68ec      	ldreq	r4, [r5, #12]
 800a7e2:	e7e6      	b.n	800a7b2 <__swsetup_r+0x1e>
 800a7e4:	0758      	lsls	r0, r3, #29
 800a7e6:	d512      	bpl.n	800a80e <__swsetup_r+0x7a>
 800a7e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7ea:	b141      	cbz	r1, 800a7fe <__swsetup_r+0x6a>
 800a7ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a7f0:	4299      	cmp	r1, r3
 800a7f2:	d002      	beq.n	800a7fa <__swsetup_r+0x66>
 800a7f4:	4630      	mov	r0, r6
 800a7f6:	f000 f99d 	bl	800ab34 <_free_r>
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	6363      	str	r3, [r4, #52]	; 0x34
 800a7fe:	89a3      	ldrh	r3, [r4, #12]
 800a800:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a804:	81a3      	strh	r3, [r4, #12]
 800a806:	2300      	movs	r3, #0
 800a808:	6063      	str	r3, [r4, #4]
 800a80a:	6923      	ldr	r3, [r4, #16]
 800a80c:	6023      	str	r3, [r4, #0]
 800a80e:	89a3      	ldrh	r3, [r4, #12]
 800a810:	f043 0308 	orr.w	r3, r3, #8
 800a814:	81a3      	strh	r3, [r4, #12]
 800a816:	6923      	ldr	r3, [r4, #16]
 800a818:	b94b      	cbnz	r3, 800a82e <__swsetup_r+0x9a>
 800a81a:	89a3      	ldrh	r3, [r4, #12]
 800a81c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a824:	d003      	beq.n	800a82e <__swsetup_r+0x9a>
 800a826:	4621      	mov	r1, r4
 800a828:	4630      	mov	r0, r6
 800a82a:	f000 f929 	bl	800aa80 <__smakebuf_r>
 800a82e:	89a0      	ldrh	r0, [r4, #12]
 800a830:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a834:	f010 0301 	ands.w	r3, r0, #1
 800a838:	d00a      	beq.n	800a850 <__swsetup_r+0xbc>
 800a83a:	2300      	movs	r3, #0
 800a83c:	60a3      	str	r3, [r4, #8]
 800a83e:	6963      	ldr	r3, [r4, #20]
 800a840:	425b      	negs	r3, r3
 800a842:	61a3      	str	r3, [r4, #24]
 800a844:	6923      	ldr	r3, [r4, #16]
 800a846:	b943      	cbnz	r3, 800a85a <__swsetup_r+0xc6>
 800a848:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a84c:	d1ba      	bne.n	800a7c4 <__swsetup_r+0x30>
 800a84e:	bd70      	pop	{r4, r5, r6, pc}
 800a850:	0781      	lsls	r1, r0, #30
 800a852:	bf58      	it	pl
 800a854:	6963      	ldrpl	r3, [r4, #20]
 800a856:	60a3      	str	r3, [r4, #8]
 800a858:	e7f4      	b.n	800a844 <__swsetup_r+0xb0>
 800a85a:	2000      	movs	r0, #0
 800a85c:	e7f7      	b.n	800a84e <__swsetup_r+0xba>
 800a85e:	bf00      	nop
 800a860:	2000000c 	.word	0x2000000c
 800a864:	0800ad88 	.word	0x0800ad88
 800a868:	0800ada8 	.word	0x0800ada8
 800a86c:	0800ad68 	.word	0x0800ad68

0800a870 <_close_r>:
 800a870:	b538      	push	{r3, r4, r5, lr}
 800a872:	2300      	movs	r3, #0
 800a874:	4d05      	ldr	r5, [pc, #20]	; (800a88c <_close_r+0x1c>)
 800a876:	4604      	mov	r4, r0
 800a878:	4608      	mov	r0, r1
 800a87a:	602b      	str	r3, [r5, #0]
 800a87c:	f7f7 fbbd 	bl	8001ffa <_close>
 800a880:	1c43      	adds	r3, r0, #1
 800a882:	d102      	bne.n	800a88a <_close_r+0x1a>
 800a884:	682b      	ldr	r3, [r5, #0]
 800a886:	b103      	cbz	r3, 800a88a <_close_r+0x1a>
 800a888:	6023      	str	r3, [r4, #0]
 800a88a:	bd38      	pop	{r3, r4, r5, pc}
 800a88c:	20000990 	.word	0x20000990

0800a890 <__sflush_r>:
 800a890:	898a      	ldrh	r2, [r1, #12]
 800a892:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a896:	4605      	mov	r5, r0
 800a898:	0710      	lsls	r0, r2, #28
 800a89a:	460c      	mov	r4, r1
 800a89c:	d458      	bmi.n	800a950 <__sflush_r+0xc0>
 800a89e:	684b      	ldr	r3, [r1, #4]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	dc05      	bgt.n	800a8b0 <__sflush_r+0x20>
 800a8a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	dc02      	bgt.n	800a8b0 <__sflush_r+0x20>
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8b2:	2e00      	cmp	r6, #0
 800a8b4:	d0f9      	beq.n	800a8aa <__sflush_r+0x1a>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a8bc:	682f      	ldr	r7, [r5, #0]
 800a8be:	602b      	str	r3, [r5, #0]
 800a8c0:	d032      	beq.n	800a928 <__sflush_r+0x98>
 800a8c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a8c4:	89a3      	ldrh	r3, [r4, #12]
 800a8c6:	075a      	lsls	r2, r3, #29
 800a8c8:	d505      	bpl.n	800a8d6 <__sflush_r+0x46>
 800a8ca:	6863      	ldr	r3, [r4, #4]
 800a8cc:	1ac0      	subs	r0, r0, r3
 800a8ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8d0:	b10b      	cbz	r3, 800a8d6 <__sflush_r+0x46>
 800a8d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a8d4:	1ac0      	subs	r0, r0, r3
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	4602      	mov	r2, r0
 800a8da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a8dc:	4628      	mov	r0, r5
 800a8de:	6a21      	ldr	r1, [r4, #32]
 800a8e0:	47b0      	blx	r6
 800a8e2:	1c43      	adds	r3, r0, #1
 800a8e4:	89a3      	ldrh	r3, [r4, #12]
 800a8e6:	d106      	bne.n	800a8f6 <__sflush_r+0x66>
 800a8e8:	6829      	ldr	r1, [r5, #0]
 800a8ea:	291d      	cmp	r1, #29
 800a8ec:	d82c      	bhi.n	800a948 <__sflush_r+0xb8>
 800a8ee:	4a29      	ldr	r2, [pc, #164]	; (800a994 <__sflush_r+0x104>)
 800a8f0:	40ca      	lsrs	r2, r1
 800a8f2:	07d6      	lsls	r6, r2, #31
 800a8f4:	d528      	bpl.n	800a948 <__sflush_r+0xb8>
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	04d9      	lsls	r1, r3, #19
 800a8fa:	6062      	str	r2, [r4, #4]
 800a8fc:	6922      	ldr	r2, [r4, #16]
 800a8fe:	6022      	str	r2, [r4, #0]
 800a900:	d504      	bpl.n	800a90c <__sflush_r+0x7c>
 800a902:	1c42      	adds	r2, r0, #1
 800a904:	d101      	bne.n	800a90a <__sflush_r+0x7a>
 800a906:	682b      	ldr	r3, [r5, #0]
 800a908:	b903      	cbnz	r3, 800a90c <__sflush_r+0x7c>
 800a90a:	6560      	str	r0, [r4, #84]	; 0x54
 800a90c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a90e:	602f      	str	r7, [r5, #0]
 800a910:	2900      	cmp	r1, #0
 800a912:	d0ca      	beq.n	800a8aa <__sflush_r+0x1a>
 800a914:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a918:	4299      	cmp	r1, r3
 800a91a:	d002      	beq.n	800a922 <__sflush_r+0x92>
 800a91c:	4628      	mov	r0, r5
 800a91e:	f000 f909 	bl	800ab34 <_free_r>
 800a922:	2000      	movs	r0, #0
 800a924:	6360      	str	r0, [r4, #52]	; 0x34
 800a926:	e7c1      	b.n	800a8ac <__sflush_r+0x1c>
 800a928:	6a21      	ldr	r1, [r4, #32]
 800a92a:	2301      	movs	r3, #1
 800a92c:	4628      	mov	r0, r5
 800a92e:	47b0      	blx	r6
 800a930:	1c41      	adds	r1, r0, #1
 800a932:	d1c7      	bne.n	800a8c4 <__sflush_r+0x34>
 800a934:	682b      	ldr	r3, [r5, #0]
 800a936:	2b00      	cmp	r3, #0
 800a938:	d0c4      	beq.n	800a8c4 <__sflush_r+0x34>
 800a93a:	2b1d      	cmp	r3, #29
 800a93c:	d001      	beq.n	800a942 <__sflush_r+0xb2>
 800a93e:	2b16      	cmp	r3, #22
 800a940:	d101      	bne.n	800a946 <__sflush_r+0xb6>
 800a942:	602f      	str	r7, [r5, #0]
 800a944:	e7b1      	b.n	800a8aa <__sflush_r+0x1a>
 800a946:	89a3      	ldrh	r3, [r4, #12]
 800a948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a94c:	81a3      	strh	r3, [r4, #12]
 800a94e:	e7ad      	b.n	800a8ac <__sflush_r+0x1c>
 800a950:	690f      	ldr	r7, [r1, #16]
 800a952:	2f00      	cmp	r7, #0
 800a954:	d0a9      	beq.n	800a8aa <__sflush_r+0x1a>
 800a956:	0793      	lsls	r3, r2, #30
 800a958:	680e      	ldr	r6, [r1, #0]
 800a95a:	600f      	str	r7, [r1, #0]
 800a95c:	bf0c      	ite	eq
 800a95e:	694b      	ldreq	r3, [r1, #20]
 800a960:	2300      	movne	r3, #0
 800a962:	eba6 0807 	sub.w	r8, r6, r7
 800a966:	608b      	str	r3, [r1, #8]
 800a968:	f1b8 0f00 	cmp.w	r8, #0
 800a96c:	dd9d      	ble.n	800a8aa <__sflush_r+0x1a>
 800a96e:	4643      	mov	r3, r8
 800a970:	463a      	mov	r2, r7
 800a972:	6a21      	ldr	r1, [r4, #32]
 800a974:	4628      	mov	r0, r5
 800a976:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a978:	47b0      	blx	r6
 800a97a:	2800      	cmp	r0, #0
 800a97c:	dc06      	bgt.n	800a98c <__sflush_r+0xfc>
 800a97e:	89a3      	ldrh	r3, [r4, #12]
 800a980:	f04f 30ff 	mov.w	r0, #4294967295
 800a984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a988:	81a3      	strh	r3, [r4, #12]
 800a98a:	e78f      	b.n	800a8ac <__sflush_r+0x1c>
 800a98c:	4407      	add	r7, r0
 800a98e:	eba8 0800 	sub.w	r8, r8, r0
 800a992:	e7e9      	b.n	800a968 <__sflush_r+0xd8>
 800a994:	20400001 	.word	0x20400001

0800a998 <_fflush_r>:
 800a998:	b538      	push	{r3, r4, r5, lr}
 800a99a:	690b      	ldr	r3, [r1, #16]
 800a99c:	4605      	mov	r5, r0
 800a99e:	460c      	mov	r4, r1
 800a9a0:	b913      	cbnz	r3, 800a9a8 <_fflush_r+0x10>
 800a9a2:	2500      	movs	r5, #0
 800a9a4:	4628      	mov	r0, r5
 800a9a6:	bd38      	pop	{r3, r4, r5, pc}
 800a9a8:	b118      	cbz	r0, 800a9b2 <_fflush_r+0x1a>
 800a9aa:	6983      	ldr	r3, [r0, #24]
 800a9ac:	b90b      	cbnz	r3, 800a9b2 <_fflush_r+0x1a>
 800a9ae:	f7ff fa15 	bl	8009ddc <__sinit>
 800a9b2:	4b14      	ldr	r3, [pc, #80]	; (800aa04 <_fflush_r+0x6c>)
 800a9b4:	429c      	cmp	r4, r3
 800a9b6:	d11b      	bne.n	800a9f0 <_fflush_r+0x58>
 800a9b8:	686c      	ldr	r4, [r5, #4]
 800a9ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d0ef      	beq.n	800a9a2 <_fflush_r+0xa>
 800a9c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a9c4:	07d0      	lsls	r0, r2, #31
 800a9c6:	d404      	bmi.n	800a9d2 <_fflush_r+0x3a>
 800a9c8:	0599      	lsls	r1, r3, #22
 800a9ca:	d402      	bmi.n	800a9d2 <_fflush_r+0x3a>
 800a9cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9ce:	f7ff faa3 	bl	8009f18 <__retarget_lock_acquire_recursive>
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	4621      	mov	r1, r4
 800a9d6:	f7ff ff5b 	bl	800a890 <__sflush_r>
 800a9da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a9dc:	4605      	mov	r5, r0
 800a9de:	07da      	lsls	r2, r3, #31
 800a9e0:	d4e0      	bmi.n	800a9a4 <_fflush_r+0xc>
 800a9e2:	89a3      	ldrh	r3, [r4, #12]
 800a9e4:	059b      	lsls	r3, r3, #22
 800a9e6:	d4dd      	bmi.n	800a9a4 <_fflush_r+0xc>
 800a9e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a9ea:	f7ff fa96 	bl	8009f1a <__retarget_lock_release_recursive>
 800a9ee:	e7d9      	b.n	800a9a4 <_fflush_r+0xc>
 800a9f0:	4b05      	ldr	r3, [pc, #20]	; (800aa08 <_fflush_r+0x70>)
 800a9f2:	429c      	cmp	r4, r3
 800a9f4:	d101      	bne.n	800a9fa <_fflush_r+0x62>
 800a9f6:	68ac      	ldr	r4, [r5, #8]
 800a9f8:	e7df      	b.n	800a9ba <_fflush_r+0x22>
 800a9fa:	4b04      	ldr	r3, [pc, #16]	; (800aa0c <_fflush_r+0x74>)
 800a9fc:	429c      	cmp	r4, r3
 800a9fe:	bf08      	it	eq
 800aa00:	68ec      	ldreq	r4, [r5, #12]
 800aa02:	e7da      	b.n	800a9ba <_fflush_r+0x22>
 800aa04:	0800ad88 	.word	0x0800ad88
 800aa08:	0800ada8 	.word	0x0800ada8
 800aa0c:	0800ad68 	.word	0x0800ad68

0800aa10 <_lseek_r>:
 800aa10:	b538      	push	{r3, r4, r5, lr}
 800aa12:	4604      	mov	r4, r0
 800aa14:	4d06      	ldr	r5, [pc, #24]	; (800aa30 <_lseek_r+0x20>)
 800aa16:	4608      	mov	r0, r1
 800aa18:	4611      	mov	r1, r2
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	602a      	str	r2, [r5, #0]
 800aa1e:	461a      	mov	r2, r3
 800aa20:	f7f7 fb12 	bl	8002048 <_lseek>
 800aa24:	1c43      	adds	r3, r0, #1
 800aa26:	d102      	bne.n	800aa2e <_lseek_r+0x1e>
 800aa28:	682b      	ldr	r3, [r5, #0]
 800aa2a:	b103      	cbz	r3, 800aa2e <_lseek_r+0x1e>
 800aa2c:	6023      	str	r3, [r4, #0]
 800aa2e:	bd38      	pop	{r3, r4, r5, pc}
 800aa30:	20000990 	.word	0x20000990

0800aa34 <__swhatbuf_r>:
 800aa34:	b570      	push	{r4, r5, r6, lr}
 800aa36:	460e      	mov	r6, r1
 800aa38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa3c:	b096      	sub	sp, #88	; 0x58
 800aa3e:	4614      	mov	r4, r2
 800aa40:	2900      	cmp	r1, #0
 800aa42:	461d      	mov	r5, r3
 800aa44:	da08      	bge.n	800aa58 <__swhatbuf_r+0x24>
 800aa46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	602a      	str	r2, [r5, #0]
 800aa4e:	061a      	lsls	r2, r3, #24
 800aa50:	d410      	bmi.n	800aa74 <__swhatbuf_r+0x40>
 800aa52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa56:	e00e      	b.n	800aa76 <__swhatbuf_r+0x42>
 800aa58:	466a      	mov	r2, sp
 800aa5a:	f000 f8c9 	bl	800abf0 <_fstat_r>
 800aa5e:	2800      	cmp	r0, #0
 800aa60:	dbf1      	blt.n	800aa46 <__swhatbuf_r+0x12>
 800aa62:	9a01      	ldr	r2, [sp, #4]
 800aa64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa6c:	425a      	negs	r2, r3
 800aa6e:	415a      	adcs	r2, r3
 800aa70:	602a      	str	r2, [r5, #0]
 800aa72:	e7ee      	b.n	800aa52 <__swhatbuf_r+0x1e>
 800aa74:	2340      	movs	r3, #64	; 0x40
 800aa76:	2000      	movs	r0, #0
 800aa78:	6023      	str	r3, [r4, #0]
 800aa7a:	b016      	add	sp, #88	; 0x58
 800aa7c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aa80 <__smakebuf_r>:
 800aa80:	898b      	ldrh	r3, [r1, #12]
 800aa82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa84:	079d      	lsls	r5, r3, #30
 800aa86:	4606      	mov	r6, r0
 800aa88:	460c      	mov	r4, r1
 800aa8a:	d507      	bpl.n	800aa9c <__smakebuf_r+0x1c>
 800aa8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa90:	6023      	str	r3, [r4, #0]
 800aa92:	6123      	str	r3, [r4, #16]
 800aa94:	2301      	movs	r3, #1
 800aa96:	6163      	str	r3, [r4, #20]
 800aa98:	b002      	add	sp, #8
 800aa9a:	bd70      	pop	{r4, r5, r6, pc}
 800aa9c:	ab01      	add	r3, sp, #4
 800aa9e:	466a      	mov	r2, sp
 800aaa0:	f7ff ffc8 	bl	800aa34 <__swhatbuf_r>
 800aaa4:	9900      	ldr	r1, [sp, #0]
 800aaa6:	4605      	mov	r5, r0
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	f7ff fa57 	bl	8009f5c <_malloc_r>
 800aaae:	b948      	cbnz	r0, 800aac4 <__smakebuf_r+0x44>
 800aab0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aab4:	059a      	lsls	r2, r3, #22
 800aab6:	d4ef      	bmi.n	800aa98 <__smakebuf_r+0x18>
 800aab8:	f023 0303 	bic.w	r3, r3, #3
 800aabc:	f043 0302 	orr.w	r3, r3, #2
 800aac0:	81a3      	strh	r3, [r4, #12]
 800aac2:	e7e3      	b.n	800aa8c <__smakebuf_r+0xc>
 800aac4:	4b0d      	ldr	r3, [pc, #52]	; (800aafc <__smakebuf_r+0x7c>)
 800aac6:	62b3      	str	r3, [r6, #40]	; 0x28
 800aac8:	89a3      	ldrh	r3, [r4, #12]
 800aaca:	6020      	str	r0, [r4, #0]
 800aacc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aad0:	6120      	str	r0, [r4, #16]
 800aad2:	81a3      	strh	r3, [r4, #12]
 800aad4:	9b00      	ldr	r3, [sp, #0]
 800aad6:	6163      	str	r3, [r4, #20]
 800aad8:	9b01      	ldr	r3, [sp, #4]
 800aada:	b15b      	cbz	r3, 800aaf4 <__smakebuf_r+0x74>
 800aadc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aae0:	4630      	mov	r0, r6
 800aae2:	f000 f897 	bl	800ac14 <_isatty_r>
 800aae6:	b128      	cbz	r0, 800aaf4 <__smakebuf_r+0x74>
 800aae8:	89a3      	ldrh	r3, [r4, #12]
 800aaea:	f023 0303 	bic.w	r3, r3, #3
 800aaee:	f043 0301 	orr.w	r3, r3, #1
 800aaf2:	81a3      	strh	r3, [r4, #12]
 800aaf4:	89a0      	ldrh	r0, [r4, #12]
 800aaf6:	4305      	orrs	r5, r0
 800aaf8:	81a5      	strh	r5, [r4, #12]
 800aafa:	e7cd      	b.n	800aa98 <__smakebuf_r+0x18>
 800aafc:	08009d75 	.word	0x08009d75

0800ab00 <memchr>:
 800ab00:	b2c9      	uxtb	r1, r1
 800ab02:	4402      	add	r2, r0
 800ab04:	b510      	push	{r4, lr}
 800ab06:	4290      	cmp	r0, r2
 800ab08:	4603      	mov	r3, r0
 800ab0a:	d101      	bne.n	800ab10 <memchr+0x10>
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	e003      	b.n	800ab18 <memchr+0x18>
 800ab10:	781c      	ldrb	r4, [r3, #0]
 800ab12:	3001      	adds	r0, #1
 800ab14:	428c      	cmp	r4, r1
 800ab16:	d1f6      	bne.n	800ab06 <memchr+0x6>
 800ab18:	4618      	mov	r0, r3
 800ab1a:	bd10      	pop	{r4, pc}

0800ab1c <__malloc_lock>:
 800ab1c:	4801      	ldr	r0, [pc, #4]	; (800ab24 <__malloc_lock+0x8>)
 800ab1e:	f7ff b9fb 	b.w	8009f18 <__retarget_lock_acquire_recursive>
 800ab22:	bf00      	nop
 800ab24:	20000984 	.word	0x20000984

0800ab28 <__malloc_unlock>:
 800ab28:	4801      	ldr	r0, [pc, #4]	; (800ab30 <__malloc_unlock+0x8>)
 800ab2a:	f7ff b9f6 	b.w	8009f1a <__retarget_lock_release_recursive>
 800ab2e:	bf00      	nop
 800ab30:	20000984 	.word	0x20000984

0800ab34 <_free_r>:
 800ab34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab36:	2900      	cmp	r1, #0
 800ab38:	d043      	beq.n	800abc2 <_free_r+0x8e>
 800ab3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab3e:	1f0c      	subs	r4, r1, #4
 800ab40:	9001      	str	r0, [sp, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	bfb8      	it	lt
 800ab46:	18e4      	addlt	r4, r4, r3
 800ab48:	f7ff ffe8 	bl	800ab1c <__malloc_lock>
 800ab4c:	4a1e      	ldr	r2, [pc, #120]	; (800abc8 <_free_r+0x94>)
 800ab4e:	9801      	ldr	r0, [sp, #4]
 800ab50:	6813      	ldr	r3, [r2, #0]
 800ab52:	b933      	cbnz	r3, 800ab62 <_free_r+0x2e>
 800ab54:	6063      	str	r3, [r4, #4]
 800ab56:	6014      	str	r4, [r2, #0]
 800ab58:	b003      	add	sp, #12
 800ab5a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab5e:	f7ff bfe3 	b.w	800ab28 <__malloc_unlock>
 800ab62:	42a3      	cmp	r3, r4
 800ab64:	d908      	bls.n	800ab78 <_free_r+0x44>
 800ab66:	6825      	ldr	r5, [r4, #0]
 800ab68:	1961      	adds	r1, r4, r5
 800ab6a:	428b      	cmp	r3, r1
 800ab6c:	bf01      	itttt	eq
 800ab6e:	6819      	ldreq	r1, [r3, #0]
 800ab70:	685b      	ldreq	r3, [r3, #4]
 800ab72:	1949      	addeq	r1, r1, r5
 800ab74:	6021      	streq	r1, [r4, #0]
 800ab76:	e7ed      	b.n	800ab54 <_free_r+0x20>
 800ab78:	461a      	mov	r2, r3
 800ab7a:	685b      	ldr	r3, [r3, #4]
 800ab7c:	b10b      	cbz	r3, 800ab82 <_free_r+0x4e>
 800ab7e:	42a3      	cmp	r3, r4
 800ab80:	d9fa      	bls.n	800ab78 <_free_r+0x44>
 800ab82:	6811      	ldr	r1, [r2, #0]
 800ab84:	1855      	adds	r5, r2, r1
 800ab86:	42a5      	cmp	r5, r4
 800ab88:	d10b      	bne.n	800aba2 <_free_r+0x6e>
 800ab8a:	6824      	ldr	r4, [r4, #0]
 800ab8c:	4421      	add	r1, r4
 800ab8e:	1854      	adds	r4, r2, r1
 800ab90:	6011      	str	r1, [r2, #0]
 800ab92:	42a3      	cmp	r3, r4
 800ab94:	d1e0      	bne.n	800ab58 <_free_r+0x24>
 800ab96:	681c      	ldr	r4, [r3, #0]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	4421      	add	r1, r4
 800ab9c:	6053      	str	r3, [r2, #4]
 800ab9e:	6011      	str	r1, [r2, #0]
 800aba0:	e7da      	b.n	800ab58 <_free_r+0x24>
 800aba2:	d902      	bls.n	800abaa <_free_r+0x76>
 800aba4:	230c      	movs	r3, #12
 800aba6:	6003      	str	r3, [r0, #0]
 800aba8:	e7d6      	b.n	800ab58 <_free_r+0x24>
 800abaa:	6825      	ldr	r5, [r4, #0]
 800abac:	1961      	adds	r1, r4, r5
 800abae:	428b      	cmp	r3, r1
 800abb0:	bf02      	ittt	eq
 800abb2:	6819      	ldreq	r1, [r3, #0]
 800abb4:	685b      	ldreq	r3, [r3, #4]
 800abb6:	1949      	addeq	r1, r1, r5
 800abb8:	6063      	str	r3, [r4, #4]
 800abba:	bf08      	it	eq
 800abbc:	6021      	streq	r1, [r4, #0]
 800abbe:	6054      	str	r4, [r2, #4]
 800abc0:	e7ca      	b.n	800ab58 <_free_r+0x24>
 800abc2:	b003      	add	sp, #12
 800abc4:	bd30      	pop	{r4, r5, pc}
 800abc6:	bf00      	nop
 800abc8:	20000988 	.word	0x20000988

0800abcc <_read_r>:
 800abcc:	b538      	push	{r3, r4, r5, lr}
 800abce:	4604      	mov	r4, r0
 800abd0:	4d06      	ldr	r5, [pc, #24]	; (800abec <_read_r+0x20>)
 800abd2:	4608      	mov	r0, r1
 800abd4:	4611      	mov	r1, r2
 800abd6:	2200      	movs	r2, #0
 800abd8:	602a      	str	r2, [r5, #0]
 800abda:	461a      	mov	r2, r3
 800abdc:	f7f7 f9d4 	bl	8001f88 <_read>
 800abe0:	1c43      	adds	r3, r0, #1
 800abe2:	d102      	bne.n	800abea <_read_r+0x1e>
 800abe4:	682b      	ldr	r3, [r5, #0]
 800abe6:	b103      	cbz	r3, 800abea <_read_r+0x1e>
 800abe8:	6023      	str	r3, [r4, #0]
 800abea:	bd38      	pop	{r3, r4, r5, pc}
 800abec:	20000990 	.word	0x20000990

0800abf0 <_fstat_r>:
 800abf0:	b538      	push	{r3, r4, r5, lr}
 800abf2:	2300      	movs	r3, #0
 800abf4:	4d06      	ldr	r5, [pc, #24]	; (800ac10 <_fstat_r+0x20>)
 800abf6:	4604      	mov	r4, r0
 800abf8:	4608      	mov	r0, r1
 800abfa:	4611      	mov	r1, r2
 800abfc:	602b      	str	r3, [r5, #0]
 800abfe:	f7f7 fa08 	bl	8002012 <_fstat>
 800ac02:	1c43      	adds	r3, r0, #1
 800ac04:	d102      	bne.n	800ac0c <_fstat_r+0x1c>
 800ac06:	682b      	ldr	r3, [r5, #0]
 800ac08:	b103      	cbz	r3, 800ac0c <_fstat_r+0x1c>
 800ac0a:	6023      	str	r3, [r4, #0]
 800ac0c:	bd38      	pop	{r3, r4, r5, pc}
 800ac0e:	bf00      	nop
 800ac10:	20000990 	.word	0x20000990

0800ac14 <_isatty_r>:
 800ac14:	b538      	push	{r3, r4, r5, lr}
 800ac16:	2300      	movs	r3, #0
 800ac18:	4d05      	ldr	r5, [pc, #20]	; (800ac30 <_isatty_r+0x1c>)
 800ac1a:	4604      	mov	r4, r0
 800ac1c:	4608      	mov	r0, r1
 800ac1e:	602b      	str	r3, [r5, #0]
 800ac20:	f7f7 fa07 	bl	8002032 <_isatty>
 800ac24:	1c43      	adds	r3, r0, #1
 800ac26:	d102      	bne.n	800ac2e <_isatty_r+0x1a>
 800ac28:	682b      	ldr	r3, [r5, #0]
 800ac2a:	b103      	cbz	r3, 800ac2e <_isatty_r+0x1a>
 800ac2c:	6023      	str	r3, [r4, #0]
 800ac2e:	bd38      	pop	{r3, r4, r5, pc}
 800ac30:	20000990 	.word	0x20000990

0800ac34 <_init>:
 800ac34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac36:	bf00      	nop
 800ac38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac3a:	bc08      	pop	{r3}
 800ac3c:	469e      	mov	lr, r3
 800ac3e:	4770      	bx	lr

0800ac40 <_fini>:
 800ac40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac42:	bf00      	nop
 800ac44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac46:	bc08      	pop	{r3}
 800ac48:	469e      	mov	lr, r3
 800ac4a:	4770      	bx	lr
